%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: The_Killers.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Platon1
%%CreationDate: 2/2/2009
%%BoundingBox: 0 0 193 193
%%HiResBoundingBox: 0 0 192.7559 192.7559
%%CropBox: 0 0 192.7559 192.7559
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 7837 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF
%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF
%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD67FF7D527D527D527DFFFF
%FFA8A8FD08FF52527D527D27A8FFFFFFA8527D7D527D27FD0AFFA8277D52
%7D527DFD0FFF7D527E527D528452A852A8FD05FF7D527D527D528452A852
%A852A8FD09FF7D7D7D527D527D52A852A852A8FD08FF59F852F852F87DFF
%A8A8A852FD08FF5227520052F87DFD04FFF85227275227A8FD09FF7D2752
%27522727FD0FFFFD0827522152FD05FFFD082752212E2752FD09FFF852FD
%06275227522153FD08FF7D527D527D5284FF52527D7D53A8FFA852A8FFFF
%FD047DA852A8FD04FF527D7D527D27FD0AFFA82784277D527DFD0DFF7D7D
%7D52A8527D52A852A828A8FFFFFF7DA87D7D7D527D52A852A827A852A859
%A8FD05FFFD057D527D527D52A852A852A8FD08FF7D2752F852F87DFF7D7D
%A827A852A8527DF8A8FF52F852F852F87DFD04FFF85227275227A8FD09FF
%7D275227522752FD0DFFF8FD0927522752FFFFA8F8522752FD0627522727
%27522727FD04FFA8F852F852FD0827522752FD08FF7D527D527D52A8FF52
%FFA97DFFA852527D7EA8FF7D7DA8528452A8FD04FF527D7D527D27FD0AFF
%A827A8527D527DFD0BFF7DA87D527D527D287D288427A827A8FFFFA9527D
%527D7D527D528452A827A827A8527D7DA8FFFFA8527D527D7D527D52A827
%A827A82784FD08FF52F852F852F87DFF7D277D52FF7DA827522EA8FF52F8
%52F852F87DFD04FFF85227275221A8FD09FF7D215227522727FD0AFFA8F8
%4CFD092721272752FFFFA8F852F852FD0527212727272127272721F8FFFF
%A8F852F827F8FD062721272752FD08FF7D527D527D52A8FFFFA8A8FD05FF
%7DAFFFFF59597D527D52A8FD04FF527D7D527E27FD0AFFA827A852A8527D
%FD0BFF527D7D527D527D27AF7DFF7DFF7DFD04FF277D527D7D52A87DA87D
%FF7DA828A852A8527DFFFFFF52FD057DA852FF7DFF7DFF7DA8FD08FF52F8
%52F852F87DFD0DFF520052F852F87DFD04FFF85227275227A8FD09FF7D27
%2827522727FD0AFFA8F852FD0627A8FD08FFA8F852F8522727FD06FF8427
%2727282727FFFFA8F8522752FD0427A8FD0EFF7D527D527D52A8FFFFFFA8
%7DA87DA8A8A8FFFFFF7D527D527D52A8FD04FF527D7D527D27FD0AFFA827
%A827A8527DFD09FFA8A8527D7D527D52A87DFD09FFA8527D527D7D52FD07
%FF528452A8527DFFFFA8527D527D7D527D52FFA8FD0DFF52F852F852F87D
%FFFFFF7DF852F827F852FFFFFF522752F852F87DFD04FFF852FD0427A8FD
%09FF7D2728FD0427FD08FFA8F8522752FD0427A8FD0AFFA8F85227522727
%FD06FF7D272E27522752FFFFA8F8520052FD0527217DFD0CFF7D527D527D
%277EFFFFFFFD067DA8FFFFFF7D527D527D52A8FD04FF527D7D528427FD0A
%FFA927A827A8527DFD08FFA8527D537D7D527D52FFA8FFA8FFA8FFA8FFFF
%FFA8527D537D7D52FD06FFA8277D277D527DFFFFA8527D527D7D527D527D
%27FD0DFF52F852F852F87DFFFF7D275227522752FD04FF52277D277DF8A8
%FD04FFF852FD0427A8FD09FF7D2728FD0427FD08FFA8F87D27522752FD04
%2752FD052752FFFFA8F8522752275227272E2752275227522752FD07FFF8
%5227525227522728277DFD0AFF7D527D527D52A8FFFFA8527D527D52A8FD
%04FF52527D275227A8FD04FF527D7D52A827FD0AFFA827A852A8527DFD08
%FFA8277DFD04527D527D5284277D277D27A8FFFFA827FD04522859277D27
%7D277D277D277DFD06FFA8FD04527D527D287D27A8FD0AFF53F852F852F8
%52F852F852FD0427A8FD04FF52277D007DF8A8FD04FFF85227272821A8FD
%09FF7D212EFD0427FD08FFA8F87D27522752FD04275227522752277DFFFF
%A8F8522752274C2752522752275227522752FD09FF27FD04522752275227
%7DFD08FF7D527D527D527D527D527D53527D52FD05FF52525927532784FD
%04FF527D7D527D27FD0AFFA827A852A8527DFD08FFA8277DFD04527D5259
%527D277D277D27A8FFFFA827FD05527D527D277D277D277D277DFD09FF52
%5252277D277D277DF8A8FD08FF7D007D0052F852275927522752FD07FF7D
%277D277D27A8FD04FFF85227525227A8FD09FF7D275227522727FD08FFA8
%F87D277D27FD07527D2752277DFFFFFF277D277DFD045259527D527D277D
%527D5252FD09FFFD04527D27525259527DFD06FF7D4C59277D2752527DFD
%0452FD07FF5227522752277DFD04FF527D7D527D27FD0AFFA82784277D52
%7DFD08FF7D27FD06522752275227592752F8A8FFFFA827522752522752F8
%522752F852277D27532752FD09FF522752277D2752277D277DFD06FF7D27
%7D277D277D277D277DFD0452A8FD04FF7D527D27A827A8FD04FF27522E52
%5227A8FD09FF7D275227525252FD09FF27A8527D527D7D52A8FFFFFFA8FD
%07FF277D527D5259A8FFA8AFFFAFA8527D527D527DFD09FFA8FF7D527D52
%7D527D527DFD06FF522752275227522752275228275227FD05FF52275227
%52277DFD04FF525252287D27FD0AFFA8F87D277D2752FD08FFA827525227
%522752F8FD0BFFA8275227525227FD06FFA8F852F8522152FD0BFF7DF852
%2152F852217DFD06FF7D287D277D27A8A8FFA852277D277D277DFFFFFF7D
%52A827A827A8FD04FF277D52527D52A8FD09FF7E277D527D5252FD09FF7D
%FF527D527D7D527D7DA8FD09FF277E527D527DFD06FFA8527D527D527DFD
%0BFF7D527D527D527D527DFD06FF5227522727277DFFFFFF522752277D27
%59FFFFFF2727522727277DFFFFFFA82752522752F8FD0AFFA8F87D275227
%52FD0AFFA827522727522752F8A8FD08FFA8FD052721FD06FF84F852F852
%F852FD0BFF7DF852F852F852F87DFD06FF7D28A827A827A8FFFFFFA8277D
%277D527DFFFFFF7D27A827A8F8A8FD04FF277D52527D527D537D527D527D
%527DFFA8277D527D52527D537D527D527D27A9FFFF277DFD04527D277D7D
%A87DA87DA8FFFFFF2784527D5252FD06FFA8287D527D527DFFFFFF7DA87D
%A87DA8A8A87D527D277D277D277DFD06FF5227522727277DFFFFFFA82752
%27522752FFFFFF2727522727277DFD04FF275252275227522752F852F852
%F87DFFA8F853275227522752FD04275227A8FFA827274C27522752F852F8
%52F852F87DFFFFA8272827522727FD06FFA8F8522752277DFFFF7DFD0727
%F8522752F852F852F853FD06FF7D27A827A827A8FD04FF52A852A8527DFF
%FFFF7D2784277D27A8FD04FF527D527D7D527D527D527D527D527DFFA852
%7D527D53527D527D527D52A827FFFFFF7DA8527D52527D527D527D527D52
%7DFFFFFF277D277D5252FD06FFA8277D527D5252FFFFA8277D277D527D52
%527D527D277D287D7D7DFD06FF5227522727277DFFFFFF7DFD0627FFFFFF
%5227522752277DFFFFFFA8FD0427522152F852F827F852F87DFF84F852F8
%5227522128FD042752277DFFFFFFA8272727F852275221522752F87DFFFF
%A82752FD0427FD06FFA8F852F8522152FFFF7D27522752FD042752275221
%52F87DFD08FF7D27A827A827A8FFFFFFA8277D277D527DFFFFFF7D527D27
%A827A8FD04FF7DA852527D527D527D287D277D527DFFA8A8A8277DFD0452
%7D277D277D27A8FD04FF52A87D7D53527D527D527D277DFFFFFF277D527D
%5259FD06FFA8527D527D527DFFFFA9277D277D527D52537D527D527D7DA8
%FD08FF5227522727277DFFFFFF7D275227522727FFFFFF5227522752277D
%FD06FF27F852F828F852F827F852F852FFFFFFA8F852F827F8FD05275227
%7DFD08FF53F852F852F852F87DFFFFA8275227525227FD06FFA8F852277D
%2753FFFFA8275227525227522752F852F8A8FD0AFFA853A852A852A8FFFF
%FFA952A87DA85984FFFFFF7D52A852A852A8FD06FF7DFD04A87DA87DA87D
%A87DA8FFFFFFA87DA8A87DA87DA87DA87DA87DFD09FF7D7D7D527D527D52
%7DFFFFA8277D527D5253FD06FF7D28FD045259FFFFFF527D527D53FD047D
%527D52A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC
%FFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC
%FFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD6AFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-02-02T11:35:42-03:00</xap:CreateDate>
         <xap:ModifyDate>2009-02-02T11:35:42-03:00</xap:ModifyDate>
         <xap:MetadataDate>2009-02-02T11:35:42-03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEAggCCAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAggAAAAEA&#xA;AQCCAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FUq81+YYPLnlrUtenhkuIdNt5Ll4Yqc2EYrQV2Hz7Yq8mtf+&#xA;cptBnk0ZT5e1EDVoJZ6pxk4+lJLHxjCisu8JqRSmGlZr+XH5s6P5z8o3nmd7Z9GsbCaSK6e7dfTV&#xA;YkWRpBKKLxCvv4GuBWSTeZLCLzFYaCVka61G1nvYJVCmL0rZokcM3LlyJnXjRfHFU1xVJvOfmeDy&#xA;t5W1LzBcQSXUWnQmZreKnN9wAKnYCp3PYYq8stv+co9Bml0lP8P6iRqdlPekR8Hdfq7TqyRqKerX&#xA;6s3xVH68NKzz8rPzItPzB8strtrYzaesdzJavBMQ1WjVW5I4A5KRIO3Wo7YFQf5kfm1p/kXVNA0+&#xA;6065vm16ZoY3t+P7sK0aHY7u1ZRRRirBp/8AnK/QItPvrw+XdQC2V9HY8XKIG9RZW5MSPgcCE1jI&#xA;+nDSvcbW4W5tobhVZFmRZFVxRgGFaMOx3wKqYqw/80/zItPy+8srrt1YzagslzHapBCQtGkVm5O5&#xA;B4qBGe3Wg74qwS5/5yi0KGfVY18vaiw02xgvxyCqzC49GiyLv6QX6yPi36fLDSvUfJnmeDzT5W03&#xA;zBBbyWsWowiZbeWnNNyKEjqNtj3GBU6xV2KuxV4lef8AOVflK1g1GU6NqLfo+9SxYUiAcuJTzqW+&#xA;GnoH4Tvv86Gldf8A/OVflK0/StdG1J20u6W0I4xrzLGQFmJb93T0Ts25+/GlZP5L/O/y/wCbfOU/&#xA;lew0+9gnitFvVuLhAilCsbFWQEsh/fDrt+GBXo2KvDT/AM5Z+TRZyXX6G1Pil2LWnCMVUgtzqWpy&#xA;+H7HXDSql7/zlb5RtotSkOjai36OvEsiOMa8y/qkMSW+D+4Pwnf7jRpVa+/5yk8p2txrcP6G1Jm0&#xA;bjUmNE9SsqwmvJv3e71HLrjSvVfK+v2vmLy7p2u2sckVvqVvHcxRTAB1WReVGpUfdgVM8VYL+Y/5&#xA;taP5E1HQ7G/sbq7fXJWiie3CkR8GRSW5EVNZRQDFWCP/AM5b+TVieQ6JqfwXX1ehSMfBQnlUtQPt&#xA;/d9cNKibz/nKrylbQapL+htRYaZex2LDjGvIyetRzVvg/wB52+E7/jRpWU+SPzr0Hzd5yv8AyvZW&#xA;F5bXNjAbgz3CBFZVKKw41LLvKONdiN/DAr0PFWLfmpcLb/lx5jma6msglhOfrVqOUyfAd0HKPft9&#xA;ofPFXyhpnmG3Fx5O/wCdy1+ApZXXJorfm0NZ7lQUH1iTlypxOzbDt0Uq9J/LK4Oof843+dVg1G91&#xA;aRU1BeN3GVeI/VVb04/3k/JSDz+11J27lVONM8veStf83+WbPQtdu73SpdK1KW9lttUuJpedbEG3&#xA;eb1WmhXdWaMMvuNziqUeZfNGvWtrpGkatqd2+k21xrFjDdfXzppvbuw1M2lsl9qBIKJHb1kb4qtx&#xA;7mmKshstav8A/lQXmOWfzLc3UlkLiCLzIis6v8S1S0lMjTzRq7GFZpCrE1PQDFXken+brpbnylJJ&#xA;+YWpW4/Q14ZpfQlf0Cr3QXmvqESMKcQfi+wN/s4q9u/5xh1KW/8Ay3kkl1e41iSPUJ4y90HDwfBE&#xA;3oguz8h8XqVB/bp2xKpF/wA5JX8Nt5m8hq+rX+nFr124WSc1KiSEGQ/vYvjXlRdjsT8ihXh9/rlq&#xA;fL2u080a7JXXoHHqQU5ApckSt/pCUlPGpG24G38qr7f0xw+m2jh3lDQxkSyijtVB8Tj+Y98ConFX&#xA;kH/OUt1Hb/llGXvrqx9TUbdA1mvMyHhI3py/HFRPh5Vr9pVwhXg+ta7atf8Amhh5p151k0Owo8kH&#xA;F5CTZgLKPrC0B50Ow+0dz+2q+pPyZnSf8rvLcqXU96rWij6xdDjKxDMCGHKTZacV+I7AYFZniqy4&#xA;nit4JJ5TxihRpJGoTRVFSaD2xV8ufmt+eOi+bLDy9eeX9d1by2ltqU0V1HHEQzxqImFy3pTBWEQb&#xA;ZKknkdttyrBNb8yyfUfM1POGrsf0/CyIInBZaXP74H6wvH7P2dvsrt/Kq35i80ScfOKr5y1ST1dV&#xA;gMSCBlFwFebv6w9Ph4bVoPair1L8lNebUPzo1If4ovtYSTSIWUXEDQxzkRW/xFC5CFK/yCtT9Kqc&#xA;/n95kutN8++R7WDzFe6NHLNzuYbVHaNkM0ah5QjpzrQrx4t/VCvDE82XA8t2ZbzxqiSya7JK1YJG&#xA;YKkcR+uM3rFm4lq+ny7nbFUTrWvqLLzNGfOmqO36fhYKIJB6gH1j9+D64p48dvsjbwVVvM/mXnqf&#xA;npE87apJ6ksTCIW7ItyI7hVKbyjh6BbiPs1+WKst8o/mhp/lvz9caxq/mvVdW0q00KzY2hgYLO72&#xA;9uqoI2mKK/KTlUgCpNW6kqvobSfOGleZ/IJ8z6XPNaWF3aTyxTyR0mhMXNHYxgtVo3Q9CQabEjAr&#xA;5J0rzhfz2vlZ7jztq8kq67KXSWOSQxov1YrIWaduY3+wa9Tt1qVQdz5snbRtVZfO2rSH9OwzIBA6&#xA;MyssxN0D6y8S1K+nt0G3gqjvMHmeUQed1TzlqkofVYPRjEDKLg+pMSQfVHohaV/ZrxA9sVek/kr5&#xA;glvvzmu0Pme/1WOfRreThcxNHHOwt7c82Uu3FlqWrx3JO/iq+kcCsX/NGcwfl15ilF6dOK2E/wDp&#xA;gUuY6oR9ld9+m2KvlHSvME8Nx5IZ/PP1Zbaxuwzm3ncW/Oa4HQpSbnTj8XSmFXuX/OLF09x+XNyk&#xA;mq/pQxahMtCsg9EFEb0+UgVn5cudfenbEqn3mv8ANf8ALryL5qtNAv7OWC/urdrr6xaWqGOONuX2&#xA;ypV6v6P7Ct2rgVj1p/zkb+UmtR6bYSaddvFrN41sba4tIGSOYun7ydfUdSHaYGqcj1qMNKzT821j&#xA;tfys8wxwT2+nRJYtGkk0XqQIpIXgYlSXZgeIohpXAr5i0vU5UvfJ7DzXo8Bt9EvVSVrBikHxXfwu&#xA;PqoB8DWnQneoLlXuX/OLkpf8s3X69bXoj1G4VfqkJgWIFI29NwY4SzVbnXj0YCu2JVJv+ckdTNp5&#xA;n8hKNZutLreu5S2jMi7SQj1WAdOXCtAtD1P0oV4dfeY5D5e14f4v1Kctr8EvE27K0nw3B+s1Mq8e&#xA;fGvDboNvBV9v6ZJ6um2knqmfnDG3rkcS9UB5le3LrTAqJxV4/wD85TXxtPyyjI1CbTzNqNvH/o6c&#xA;mm+CV/SJ5JxHwc61/Zp3whXhWq+ZjJfeapf8Z6jMJtCsQJ/qzAXFfqg4cfVHp15EVoPtH/ZKvqL8&#xA;mbk3X5XeW5jdyXxazUfWZl4yHixXiwq32Kca1NaYFZnirD/O35neVPK+pWGhapfNaaprQKWLiJpU&#xA;jLH00klpsF5mn9mKvkeHVpE8r6ZEPOFnH6HmGa7WMWc5VW4xt9bB+rhioJJ9MqOv0Aqyzy/5M82e&#xA;ez5w03y95ksLmeLXYNQnSSGSFWCmdVn5GDY1C/AKjY/7JV9Qx+TfLUlrLHf6TYXc96I21SV7WE/W&#xA;pogKSSgr8ZB3HLpgVHWuh6LaX01/a6fbW99cIsdxdxQxpLIiCiK8igMwWmwJ2xV4l/zkFeND+Ynk&#xA;Irr9rpTQXHqrHPA8rIWlRPWqscikMKqFcqKivuCFeJ22otH5b05F85afCF8wS3QX6nOeLcIm+tb2&#xA;wNFLfYpTf2pir7Nl8l+TpkuEl0LTpEu5hc3SvaQMJZ1rxlkBT43HI0Y74Fecf85Faboum/l5qV7a&#xA;HTdHvtVurWK8vJrVGe8CEssTlIZndgE5LUbBT0whXh19q9+8nmeWTzjo88j6JYwSSixcmVCbVTEl&#xA;LTZRUrtXqKqN+Cr6Y/L93g/J3Spf0jbM0ek801KKH07ZAIyyv6XGM8Yx1HAE06DAr5e0PX776j5X&#xA;i/xRpa8fMM0/p/UW/dufq/7+ptR15t4deux4lUPd+Yb9vL+rxHzbpUqtr0U5jWwekjFZiboUtT8J&#xA;Kg0oenyDKvp3yh5h/Kbzjfazolha2Op6jAUk10vYIkd3LE3D1jzSkvGQbE1pXbArOLfQ9Ftr+TUb&#xA;fT7aHUJY1hlvI4Y1maJKcUaQAMVWmwrTFUbirF/zScp+XPmNhcw2ZGnz/wCkXCerEtUI+NOEvIHp&#xA;9g/LFXyjpN76U/kl/wDFuiWhhsbwJJNYsVtuU9zs5NsnLnXjuRvWla1Yq9L/ACC/M7yZ5X8p2ui6&#xA;1rttLeapqUws0tLWSOOKoiUCZhDDu7GoYr0NK0GyrBfNPnm+1nWtc123842Bt7y5ez8rvcWsguba&#xA;P1kchHe3Mlqgt34u4NHJ37lVWZ/kZptzrnnyW4XU9H1fQPLtvEhtbezSIR3rxKrT2sZgiCc5onYz&#xA;Ifj7jeiqvYPzjkkj/K7zK8bWyMtk9GvFV4eo6qwZS38gI+1TAr5e0nU79bzyVxm8tqTod8waeCAR&#xA;IOd2aXZ9McW9gevKvU1Kvc/+cV7iaf8AK9pJXtG/3IXAUWaJEVAWPadUVB6lanp9jjiVSj/nJG6a&#xA;LzN5AH6Zi0wR6g0wSWF5aMrxD1hwRweHKnEkVr9yFeH3t6p8va+B5vtZhN5it7nitrMBKeM5F1UQ&#xA;mlaV4Co+H5VVfb+muX061czC4LQxk3AHESVUHmF7cutMCojFXkH/ADlNIV/K8J+kY9PEuoW6ESxt&#xA;IJ6LI3ogoshQ/D6nKn7NO+EK8K1rU/Vv/N8zec7a6a78v2ERn+pyr9ZU/VB6fEQ0irWnw/zdqGir&#xA;6i/JuUy/ld5aY3i35Fki/WURkU8CV4gMqN8FOFSN6VwKzLFXgv573Msf5qeQES+0u2/ehlS/gWVw&#xA;fXX4i5ikKq1OKfEvxb7dQQrxODUrpdEsANZ8uKP8QSseVjH9sLFSYj6oP9HFfAdQPYKprF52816D&#xA;N5hm0XzTo+mzXGvJHO9taiN3BM55sVtKtbgj37+PxKp95k/Nn8ybWbzgkPniwRbHUoYrZI42LCNm&#xA;lHp23+jtXiEXn1+yd+5VZ9+T3nvzjrf5n6ppereabLWNPi0yGdLW1QqjSssJ9WA+jHsObc/i/aG3&#xA;gqpf85BX91B+YfkGOGfSYg1wSP0jAkrKfVT45HeOQpEaADiQeW/aoQrxK31q/Xy3ppF35cUHzDLR&#xA;XsrcFWVIqSMogAFrvUmlaU+QVZhqn50fmtFZa5JH5u05Tba5FaQcY4i6xN61fTBhNbf4FqxBPwnf&#xA;xVQf5g+f/Oet2nnXS9Y17Rr6w069gNnbGJJCtJWUfUj6fxFVPFyxbvv3xVPfyw0XTNe/NS+0TWU0&#xA;LUdMvNCs5Lm3s4UVXZYLdx6DpGjqwdQ7gMPltQKvpyx0rTbDTIdLs7aODTreIQQ2qqPTWIDjw4+F&#xA;MCvH/wAw/wAoNVGr+Vz5C0jR7LSdPvGu9RWa3gJWRniJkPqIzFOEVCEIO3yoVeDSXt3J5bvFfV/L&#xA;BluNej5Us4uTMEkBk3tqfVqvUNxp133piqfXXmzzV5dv/O9/ovmPQtOuzqsMM0trbxrK6PJOeMJF&#xA;ueYqAXry6E18VX0p5G/Mjyzr7Q6HFrdrqXmazsoJtVS0VxEzlE9WSFmVUZObfsk8a70wKzHFWMfm&#xA;eJD+XnmMRtbI50+cK17xNuPgP2+YKfLltXFXytoKawt75HMc3lcP+j7zibhbRhvLcbXQRak/yce9&#xA;anrhVC+UYtUF35L/AH/loU1a43kFkW2aHe54r3/3Vx36e1FVPTxqyaFoVLjywOPmGYgSCz5AgQbu&#xA;QoU2/jxPKnH2oq+rPy/f8rfrmtR+SPqIuluB+mls9m9WrBeX+TXnx4/D1pgVd+b8Ukv5ZeY444ba&#xA;djZvSK9cRQEAgks7NGFKjdSWHxUxV8x6Tpt+b3yfx0fy05OiX3pxzXkRjkAe8/vh9ZbkT470PLcc&#xA;TxKvcP8AnF+GSH8tHV7eyt66hcFRYyrOHHGP4pnWSb95X4ftfYC4lUo/5yMlmTzL5C4X2mWn+nsQ&#xA;uoQrK3L1IaOC0UvGMftbrvTwqEK8V1K9uZPL2vcta8uPXzDCzGOySrOVuPjRTatWE9R1FOW+55Kv&#xA;tXTmLafbMzpITEhMkW0bEqN0/wAk9sCojFXkf/OUErx/lkCt1Z2obULcMb6ITBxxkPCJTHN+8qOV&#xA;eP2Q2EK8P1q7vn1DzW7a35akdtBsDK8dpEY3A+qfDCTaklj2AJ/Z2FBxVfTf5PM7flj5cLzW1wfq&#xA;afvbNBHCQCQAqBIwCBs3wj4q4FZjirwj88LbVH/NjyJLHa6PJahwsMmpSxJI03rfEhR3R2VQUMfF&#xA;T8Z37YQrxqx02+XR9J+sWflkRQeYpRfO9zZkr6npFUdlmI+r/C+yHoo+lVH2Pknz/r0+rWWm6B5e&#xA;1C8t9cWfUorea3d4yOahWVZfhteXIU2brt1xVkPmH8pPzWux5ueHyjpjvqWrw3Fsym3DtAplq1vy&#xA;lARTVC3Li3xN70Veg/lB5D866J+Zmv6rrmgadpumzWaW9ldWXAAlGjCJEoZmVTGh9TkB8QGKoP8A&#xA;P6C6f8w/IZistIuB6/wvqU0cTlvWT4WVpIy8dDUAK3xe9KoV4rb2V8fLWnFdK8sNXX5AvO7gZi5j&#xA;iPAt9ZZTbH9ocvDamKsq1T8qfzPks9cjj8h6c5uNbjuYSr0dkHrD4K3I/cfGvcdfnxVU/PHkfzpp&#xA;sHnXUNT8p6LZWF/eQNDeyXCwLT1mKm1LzqAXBq/2e+3bFV9rqPmvy55l13WdG0/y3Y6pZaDYhJ4b&#xA;u24Rc0tEYxo9zxBKsQCy0Pw7mo5Kvpf8vdU1rVvJOjalrRgbVLu2SW5a1ZHhYturK0bOhqtCeJpX&#xA;pgVkLKGBVhVTsQehGKvAPzZ/I6K2sNKh/LvyhY3XO/a61MTyyVUhQIx+9mT9yatyRTQbUXCrynzH&#xA;pl69t52ebTPLqynXbdZaXsSuh5XNRD/pKiPfr9k05bbHiqnFnqPnHyl5j836to1n5b0zVLaxtlZ4&#xA;Lu3YRo8lupEEck5QBgfjqo3p3pVV9ReSNR1PU/J+jahqrwSajd2cM109qyvCzugJKMhZSD/kkjw2&#xA;wKg/zQhab8u/Mca28F0zWE9ILqT0YW+An45OcXEDrXmvzGKvlTStIvJLjyYqeWvL1wZbK7MUc2oA&#xA;LNSe5J5n629ePUbHeo2pRSr0v8g/yu8oeYvKlvq+vaFZfXNM1KVrCSyu5JkcKsTVm4TzKxV12Vj0&#xA;ptQ7qsV/Mz8tLTy/59sdC0fSNJi0KeCa70mK/vArzXzQkBX9WdZTWaONFQ/uj3/aOKqH5f675j8t&#xA;SeW7/RZ9Dsz5j1J4fNE31u3cyNHMCsbh5WEYWKfkPq/dhXsMVfQ35xwmb8r/ADKi2i3x+pOwtncx&#xA;qeJDciysh+CnOld6UwK+XtN0WeW58lovk61n+s6HfSCFryVfrQD3PxEmb939tWof5qdhxKvc/wDn&#xA;FiB4vyxdm09NP9XUbhx6bs4mokaeqQ7yFCCnp8f8mvfEqlf/ADkakjeZvIQSy0y6/wBOcg6hMsLV&#xA;9SH4aNLFyjP7Wzb08d0K8UvobhPL2v8A+4fy2B/iCAMI7yKqsFuPgRjcp+42oOgpy22NFX1fb/mf&#xA;+Xtpp0gutf023bTPStr+OKZeEMxBX0lAJ2qjAU8MCoiT80Py7j+ucvMdh/uPRJLsidCEWUqqHY71&#xA;LqNvHFWCf85J3dtqX5S297YJp+pWVzeWs0U11MqR+k6OVlt5PUiq5qBs32C2EK8V1uG8Gpea1bRf&#xA;LUbjQbH1EiuohEg/0PeAfWV4tv8ADQDou5qOSr338rfPvkzTfIWi6XqOq6Vp2o2Wmrc3VhBcIyRQ&#xA;gF+Vecm5Qh2+ImpxVlEX5o/l1K8SR+Y9PZp7d7uIeum8EQYyP12CiNia+BwKlGt+U/y7/MldK80x&#xA;susnSGd9OltrgpFI6MG9KWm1OaDrT7sVfKKWMMnlm1nTydZFrvzC9oZPrcyVKovCyWs/IA82HqFq&#xA;bfThVl2ieefMXkS5856t5f8ALFhbXDa3DYTySzSSpEjtMwg4GYVqyj41oNz7UVfUMXnfywllLNqO&#xA;safZT2SxDVonvIALSaUbRzMWHAlqheVK4FTC113RLy/m0+01C2uL+2RZLi0imjeaNHAKM8aksoYE&#xA;UJG+KvFvz+0y4u/zB8iej5bg1gyT+mZpZpIy3GVG9E8JI1UL9rk4IqaexIV4xFoV83lzTmHkS0cn&#xA;XpYKm6uRWqxD6tQ3Bbi1P7wsRtXvUqvt7AryX/nJ6zlufywb0tJ/Szw30EgUGQGDZ09bjGVZ/t8K&#xA;f5Ve2EK8C1Ly9dRSeaQPIZtxbaNYER/WLh/q7MbU8uXP96TQ/CNxQ174q+qvypgNp+Wvl2OSx/RZ&#xA;SxjZ7NmZvTqORJLnl8VeVD0rTAqcQ+bfKky2rQ61YSLfSNBZFLmFhNKn2o4qN8bL3Vd8VcfNvlQR&#xA;esdasPR+sfU/U+sw8frP++K8qep/kdcVfG/muwkWPz0/+F7ZRb+YbdDMbmYmEu1yAlBOOfPmNxsO&#xA;R9uJVEeZdJkg1Lz9XyfbWotbG1dgLuVxbB57due01JTJTlQdPvqq+rfyuhaH8ufLkbWi2LDT4K2s&#xA;bmRUqgOzMXJr13JwK780YGuPy68xxLZHUGawnpZhiheiE/aXfbrtir5O0ny5cyz+Rlk8ktdrcWF3&#xA;6itcTRi6KzXB5E8qQ8K8t+tflhV7r/zitZy235c3Jl0s6a8uozNyZnJmARF58ZCWTjThT/Jr3xKp&#xA;X+e9o035meSP+dWTXVkLIZmlmjJ4yhvTHpuiL6dfUq4INaYhXkWjWDvpPlh18gRn1fME0Qk9e8HL&#xA;a3/dANLyUmlObVX4enXFX1F+cts1z+V3mSFbSS9LWbn6tC3CQ8SGqpo32KcqUNaUwK+W9O8svJd+&#xA;T428n6lOJdFvmaFbop9Y+O8NefpfuvtA02+0NvEq92/5xYsTaflnKDp8+nmXUriQ/WGLNN+7iX1V&#xA;BWPivw8KU6qT3xKqP5++XNa1fzD5Lm07yv8A4gitbtzdTcpgIkLxMUf0pIwquFJ5OCBT70K8CvbH&#xA;0/L+vMfKelxLD5gt7Y8b6UrG4W4X6vtdA0WtOQIG58PhVROv2JjtfPDP5T0yP6rq1sjyfXZP9FLN&#xA;Of8Alp+PlUL8NBv02oqq2+01oR5zR/Jel2TWlpZtJGL6R/qnOaEilLn4vVHxbUp+BVey/mD5e1fU&#xA;/wDnHvyzY6Z5Xj1G7iFjL+i7d5plt1EDgzR+lJ6kn2uNObfbJNaVxV5VrOjz2up+b7eXyZpttJZ6&#xA;HZNNam9lrbUNpVj/AKSOXEgnYA7bk1PJVBW2nFtSnUeUNLqPLIuTW/kqFNqo+tb3PiePDY079yq7&#xA;QrD1L7RVHlHTXE/l3UJ1j+vSgyqI7sGYk3XwE9OJ3G9KU+FV9Cf8442scv5R28Umnw2UNzNc8ltp&#xA;WkSZWbiZORklZW/ZI5fs9sSrzT8zPyM0Ty0/lrSfL+g6rr1pe6i8t9dLMWaJW9JPQb0ouCRsoJ5s&#xA;Kin2sVYFrfla+i0vXJ7ryLqtqbnXYfSd5ZBxBFwfQQGE8h8VOfxdRv0qqt8yeWin+MwPJepRfV9U&#xA;t/3guHb6qrNMNv3JEglqBU8h8Q36VVeofkLon1P839aJ8sXmirb6XHFEbicypEv7hVWvAczKF5A8&#xA;jSnTwSqZ/wDOQmiXF/8AmJ5Flj0G+1RFl4PLaSFIzSdG9JiEcIQKtyqu3yqEK8Th8n33+HNO5eTN&#xA;YkYa7JE1ZmRmUpEDbcPQBDNxp6nHYg/IKvunAryX/nJ7T5b78sGji0661F0vrdwtmxDRUDr6sihX&#xA;5p8XClOrA9sIV89aj5SvFk8ygeT9bi4aRY+mrysxhPK1JZ/9H/eD4Ps9gG6dVVfTvk7TnX8jbOwO&#xA;k3Su2iSRnSJZSLmQvCw9P1AEKNLX4dhxr0FMCvmTyx5XuB/gtz5R1Qltbl9SVpmUTAPbUDfuV9Lj&#xA;SlfhrQ7/AMpVAHyldDQnU+SdVDLrYhJ+sPUDgR9TKmHr/wAW8fp7Yqj/ADL5VuxD5zp5T1JfT1uB&#xA;g4mZvSQm6Hwj0W9RW5gct+o38VWbeU/ygg8zefvNGl6z5b1XQdMubKP0r8zckjdJIHAjd4uEnq8K&#xA;/aNBUU8FX0r5a8v2Pl3QNP0OwLtZ6dAlvC0p5OVQUqxAAqeuwwK15n8vWXmPy9qGhXryR2mpQPbz&#xA;PCQsiq4pVSQwqPcYq8ut/wDnFryDFJpbm+1J/wBGRSQ/3yIZRI8klWKRqV4tMfsU2698Nqzf8s/y&#xA;00T8vtCm0fSZ7i4iuLhrqaa5ZWcuyqmwRUUAKg7YFQPnz8nfLXnXzFpGu6pcXcNzo9BFFbuiJIFk&#xA;9VQ/JGYfF3UjFWJ2v/OK3kG3g0+JdQ1Nv0fePeqxlhq5f0gUakQAH7hd1oevtQ2r0/zh5Ys/NPln&#xA;UPL97LJDbajEYpJYSBIu4YFagjqMCvMYP+cW/JUb6Wx1PUWGm2k1mwEiL6gnaZiwIWsdGuG2Xbp7&#xA;1Nqzn8svy30r8vvLr6JptzPdxS3L3cs1wV5GSRUSgCgAALGuBWW4q8ff/nFj8sWsrq0D6iiXV1Hd&#xA;lxcJyT0g4WFKxkenSVvtAt/lYbVfe/8AOLv5Z3UepoX1GL9JXKXRaO4SsLpz+GHlG3wn1Wr6nI++&#xA;Nqtb/nFn8rqaisQv4F1CKOEKlwtIAjpITDyjbd2jHL1OXtTG1en+XtCsNA0Ox0XTwwstPhS3t/Ub&#xA;k/FBQFm7k4FYDr//ADjx+X+ua1rmr3jXq3evIEuRHOqpGwdJDJCCjUYtED8ZZfbG1S+P/nFz8sUm&#xA;eauoFnsvqNDcLQfu/S9cUjH73j/sP8nDarrX/nF/8sreS3dTfv8AV7OayKvcLSQXCyK8r0jB9Skz&#xA;U40X/JxtWc+QPIWh+RvLqaDozTyWqyvM0ty6vK7yEVLFVRegA2UYFZHirCvzS/KvRvzE0yzsNTu7&#xA;m0Wyn9eKS2K1NV4srK4ZTt0Pb78VYVqX/OK3ky9n1mc6rqSSarMJ1pIpWI8zIwK8f3oJO3Pp88Nq&#xA;yPyF+RnlryX5pm8w6de3lxPLZpYpDcMjKqKsasxKqpZm9FfYb+1AqI/MP8n9J87+YdC1m81G6s5N&#xA;EfksNuVAcc1kFCd425KPiHbFWEr/AM4m+WRp1vZfp7UOMF894X+AclcIvDiNg4EY/efhhtXuuBWI&#xA;/mj+XVp+YHlj9A3N9Np6LcR3KzQANVoww4uhIDL8daV6gHtirz24/wCcVtClfUm/xFqP+n2cFkC/&#xA;B2AtzCQ0h29QH6uKLtT6BhtXqXl/yfZ6P5KtfKa3E09pb2ZsTcs3GVkZSpYEfZO/w06YFeYWH/OK&#xA;nk+0TTFGr6i5029a+B5RqHL+l8FAvwf3C/Eu/wCFDaqcn/OJvk17G5s/0zqQS4vFuyxaNiFRXUJQ&#xA;rQt+9PxnfG1VtQ/5xW8oXh1cnWNSRtVulvPtowjZWkYqar+8r6p3bcffjavYNH0yDStIsdLt2d4L&#xA;C3itYXlblIUhQIpdu7ELucCovFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/&#xA;2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:7901332536F1DD11A24AECAF04CBA978</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:7A01332536F1DD11A24AECAF04CBA978</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grupo de muestras por defecto</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 286 CVC</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>60.000002</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>5.882353</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -192.756 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 192.756 li
192.756 192.756 li
192.756 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 0 mo
192.756 0 li
192.756 192.756 li
0 192.756 li
0 0 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
7.87988 77.0293 mo
7.87988 77.8408 7.22168 78.4995 6.40918 78.4995 cv
5.59717 78.4995 4.93896 77.8408 4.93896 77.0293 cv
4.93896 76.2168 5.59717 75.5586 6.40918 75.5586 cv
7.22168 75.5586 7.87988 76.2168 7.87988 77.0293 cv
cp
0 0 0 1 cmyk
ef
11.1338 77.0293 mo
11.1338 77.8408 10.4756 78.4995 9.66357 78.4995 cv
8.85205 78.4995 8.19385 77.8408 8.19385 77.0293 cv
8.19385 76.2168 8.85205 75.5586 9.66357 75.5586 cv
10.4756 75.5586 11.1338 76.2168 11.1338 77.0293 cv
cp
ef
14.3887 77.0293 mo
14.3887 77.8408 13.73 78.4995 12.9185 78.4995 cv
12.106 78.4995 11.4478 77.8408 11.4478 77.0293 cv
11.4478 76.2168 12.106 75.5586 12.9185 75.5586 cv
13.73 75.5586 14.3887 76.2168 14.3887 77.0293 cv
cp
ef
7.87988 80.167 mo
7.87988 80.9785 7.22168 81.6372 6.40918 81.6372 cv
5.59717 81.6372 4.93896 80.9785 4.93896 80.167 cv
4.93896 79.3545 5.59717 78.6963 6.40918 78.6963 cv
7.22168 78.6963 7.87988 79.3545 7.87988 80.167 cv
cp
ef
11.1338 80.167 mo
11.1338 80.9785 10.4756 81.6372 9.66357 81.6372 cv
8.85205 81.6372 8.19385 80.9785 8.19385 80.167 cv
8.19385 79.3545 8.85205 78.6963 9.66357 78.6963 cv
10.4756 78.6963 11.1338 79.3545 11.1338 80.167 cv
cp
ef
14.3887 80.167 mo
14.3887 80.9785 13.73 81.6372 12.9185 81.6372 cv
12.106 81.6372 11.4478 80.9785 11.4478 80.167 cv
11.4478 79.3545 12.106 78.6963 12.9185 78.6963 cv
13.73 78.6963 14.3887 79.3545 14.3887 80.167 cv
cp
ef
7.87988 83.3584 mo
7.87988 84.1709 7.22168 84.8286 6.40918 84.8286 cv
5.59717 84.8286 4.93896 84.1709 4.93896 83.3584 cv
4.93896 82.5459 5.59717 81.8882 6.40918 81.8882 cv
7.22168 81.8882 7.87988 82.5459 7.87988 83.3584 cv
cp
ef
11.1338 83.3584 mo
11.1338 84.1709 10.4756 84.8286 9.66357 84.8286 cv
8.85205 84.8286 8.19385 84.1709 8.19385 83.3584 cv
8.19385 82.5459 8.85205 81.8882 9.66357 81.8882 cv
10.4756 81.8882 11.1338 82.5459 11.1338 83.3584 cv
cp
ef
14.3887 83.3584 mo
14.3887 84.1709 13.73 84.8286 12.9185 84.8286 cv
12.106 84.8286 11.4478 84.1709 11.4478 83.3584 cv
11.4478 82.5459 12.106 81.8882 12.9185 81.8882 cv
13.73 81.8882 14.3887 82.5459 14.3887 83.3584 cv
cp
ef
7.87988 86.5508 mo
7.87988 87.3623 7.22168 88.02 6.40918 88.02 cv
5.59717 88.02 4.93896 87.3623 4.93896 86.5508 cv
4.93896 85.7383 5.59717 85.0796 6.40918 85.0796 cv
7.22168 85.0796 7.87988 85.7383 7.87988 86.5508 cv
cp
ef
11.1338 86.5508 mo
11.1338 87.3623 10.4756 88.02 9.66357 88.02 cv
8.85205 88.02 8.19385 87.3623 8.19385 86.5508 cv
8.19385 85.7383 8.85205 85.0796 9.66357 85.0796 cv
10.4756 85.0796 11.1338 85.7383 11.1338 86.5508 cv
cp
ef
14.3887 86.5508 mo
14.3887 87.3623 13.73 88.02 12.9185 88.02 cv
12.106 88.02 11.4478 87.3623 11.4478 86.5508 cv
11.4478 85.7383 12.106 85.0796 12.9185 85.0796 cv
13.73 85.0796 14.3887 85.7383 14.3887 86.5508 cv
cp
ef
7.87988 89.7603 mo
7.87988 90.5723 7.22168 91.2295 6.40918 91.2295 cv
5.59717 91.2295 4.93896 90.5723 4.93896 89.7603 cv
4.93896 88.9473 5.59717 88.2896 6.40918 88.2896 cv
7.22168 88.2896 7.87988 88.9473 7.87988 89.7603 cv
cp
ef
11.1338 89.7603 mo
11.1338 90.5723 10.4756 91.2295 9.66357 91.2295 cv
8.85205 91.2295 8.19385 90.5723 8.19385 89.7603 cv
8.19385 88.9473 8.85205 88.2896 9.66357 88.2896 cv
10.4756 88.2896 11.1338 88.9473 11.1338 89.7603 cv
cp
ef
14.3887 89.7603 mo
14.3887 90.5723 13.73 91.2295 12.9185 91.2295 cv
12.106 91.2295 11.4478 90.5723 11.4478 89.7603 cv
11.4478 88.9473 12.106 88.2896 12.9185 88.2896 cv
13.73 88.2896 14.3887 88.9473 14.3887 89.7603 cv
cp
ef
7.87988 92.8447 mo
7.87988 93.6563 7.22168 94.3145 6.40918 94.3145 cv
5.59717 94.3145 4.93896 93.6563 4.93896 92.8447 cv
4.93896 92.0322 5.59717 91.373 6.40918 91.373 cv
7.22168 91.373 7.87988 92.0322 7.87988 92.8447 cv
cp
ef
11.1338 92.8447 mo
11.1338 93.6563 10.4756 94.3145 9.66357 94.3145 cv
8.85205 94.3145 8.19385 93.6563 8.19385 92.8447 cv
8.19385 92.0322 8.85205 91.373 9.66357 91.373 cv
10.4756 91.373 11.1338 92.0322 11.1338 92.8447 cv
cp
ef
14.3887 92.8447 mo
14.3887 93.6563 13.73 94.3145 12.9185 94.3145 cv
12.106 94.3145 11.4478 93.6563 11.4478 92.8447 cv
11.4478 92.0322 12.106 91.373 12.9185 91.373 cv
13.73 91.373 14.3887 92.0322 14.3887 92.8447 cv
cp
ef
7.87988 96.1074 mo
7.87988 96.9189 7.22168 97.5781 6.40918 97.5781 cv
5.59717 97.5781 4.93896 96.9189 4.93896 96.1074 cv
4.93896 95.2949 5.59717 94.6367 6.40918 94.6367 cv
7.22168 94.6367 7.87988 95.2949 7.87988 96.1074 cv
cp
ef
11.1338 96.1074 mo
11.1338 96.9189 10.4756 97.5781 9.66357 97.5781 cv
8.85205 97.5781 8.19385 96.9189 8.19385 96.1074 cv
8.19385 95.2949 8.85205 94.6367 9.66357 94.6367 cv
10.4756 94.6367 11.1338 95.2949 11.1338 96.1074 cv
cp
ef
14.3887 96.1074 mo
14.3887 96.9189 13.73 97.5781 12.9185 97.5781 cv
12.106 97.5781 11.4478 96.9189 11.4478 96.1074 cv
11.4478 95.2949 12.106 94.6367 12.9185 94.6367 cv
13.73 94.6367 14.3887 95.2949 14.3887 96.1074 cv
cp
ef
7.87988 99.3174 mo
7.87988 100.129 7.22168 100.787 6.40918 100.787 cv
5.59717 100.787 4.93896 100.129 4.93896 99.3174 cv
4.93896 98.5049 5.59717 97.8477 6.40918 97.8477 cv
7.22168 97.8477 7.87988 98.5049 7.87988 99.3174 cv
cp
ef
11.1338 99.3174 mo
11.1338 100.129 10.4756 100.787 9.66357 100.787 cv
8.85205 100.787 8.19385 100.129 8.19385 99.3174 cv
8.19385 98.5049 8.85205 97.8477 9.66357 97.8477 cv
10.4756 97.8477 11.1338 98.5049 11.1338 99.3174 cv
cp
ef
14.3887 99.3174 mo
14.3887 100.129 13.73 100.787 12.9185 100.787 cv
12.106 100.787 11.4478 100.129 11.4478 99.3174 cv
11.4478 98.5049 12.106 97.8477 12.9185 97.8477 cv
13.73 97.8477 14.3887 98.5049 14.3887 99.3174 cv
cp
ef
7.87988 102.617 mo
7.87988 103.429 7.22168 104.087 6.40918 104.087 cv
5.59717 104.087 4.93896 103.429 4.93896 102.617 cv
4.93896 101.805 5.59717 101.146 6.40918 101.146 cv
7.22168 101.146 7.87988 101.805 7.87988 102.617 cv
cp
ef
11.1338 102.617 mo
11.1338 103.429 10.4756 104.087 9.66357 104.087 cv
8.85205 104.087 8.19385 103.429 8.19385 102.617 cv
8.19385 101.805 8.85205 101.146 9.66357 101.146 cv
10.4756 101.146 11.1338 101.805 11.1338 102.617 cv
cp
ef
14.3887 102.617 mo
14.3887 103.429 13.73 104.087 12.9185 104.087 cv
12.106 104.087 11.4478 103.429 11.4478 102.617 cv
11.4478 101.805 12.106 101.146 12.9185 101.146 cv
13.73 101.146 14.3887 101.805 14.3887 102.617 cv
cp
ef
17.4619 96.1074 mo
17.4619 96.9189 16.8037 97.5781 15.9912 97.5781 cv
15.1797 97.5781 14.521 96.9189 14.521 96.1074 cv
14.521 95.2949 15.1797 94.6367 15.9912 94.6367 cv
16.8037 94.6367 17.4619 95.2949 17.4619 96.1074 cv
cp
ef
20.7168 96.1074 mo
20.7168 96.9189 20.0576 97.5781 19.2461 97.5781 cv
18.4341 97.5781 17.7759 96.9189 17.7759 96.1074 cv
17.7759 95.2949 18.4341 94.6367 19.2461 94.6367 cv
20.0576 94.6367 20.7168 95.2949 20.7168 96.1074 cv
cp
ef
23.9707 96.1074 mo
23.9707 96.9189 23.3125 97.5781 22.5005 97.5781 cv
21.689 97.5781 21.0308 96.9189 21.0308 96.1074 cv
21.0308 95.2949 21.689 94.6367 22.5005 94.6367 cv
23.3125 94.6367 23.9707 95.2949 23.9707 96.1074 cv
cp
ef
27.1655 96.1074 mo
27.1655 96.9189 26.5068 97.5781 25.6953 97.5781 cv
24.8828 97.5781 24.2246 96.9189 24.2246 96.1074 cv
24.2246 95.2949 24.8828 94.6367 25.6953 94.6367 cv
26.5068 94.6367 27.1655 95.2949 27.1655 96.1074 cv
cp
ef
21.8306 92.877 mo
21.8306 93.6885 21.1719 94.3457 20.3604 94.3457 cv
19.5488 94.3457 18.8901 93.6885 18.8901 92.877 cv
18.8901 92.0635 19.5488 91.4063 20.3604 91.4063 cv
21.1719 91.4063 21.8306 92.0635 21.8306 92.877 cv
cp
ef
25.085 92.877 mo
25.085 93.6885 24.4268 94.3457 23.6152 94.3457 cv
22.8027 94.3457 22.144 93.6885 22.144 92.877 cv
22.144 92.0635 22.8027 91.4063 23.6152 91.4063 cv
24.4268 91.4063 25.085 92.0635 25.085 92.877 cv
cp
ef
28.2798 92.877 mo
28.2798 93.6885 27.6216 94.3457 26.8091 94.3457 cv
25.9971 94.3457 25.3389 93.6885 25.3389 92.877 cv
25.3389 92.0635 25.9971 91.4063 26.8091 91.4063 cv
27.6216 91.4063 28.2798 92.0635 28.2798 92.877 cv
cp
ef
23.1675 89.5708 mo
23.1675 90.3823 22.5093 91.041 21.6978 91.041 cv
20.8853 91.041 20.2275 90.3823 20.2275 89.5708 cv
20.2275 88.7583 20.8853 88.0996 21.6978 88.0996 cv
22.5093 88.0996 23.1675 88.7583 23.1675 89.5708 cv
cp
ef
26.4224 89.5708 mo
26.4224 90.3823 25.7642 91.041 24.9517 91.041 cv
24.1396 91.041 23.4814 90.3823 23.4814 89.5708 cv
23.4814 88.7583 24.1396 88.0996 24.9517 88.0996 cv
25.7642 88.0996 26.4224 88.7583 26.4224 89.5708 cv
cp
ef
29.6162 89.5708 mo
29.6162 90.3823 28.958 91.041 28.146 91.041 cv
27.3345 91.041 26.6763 90.3823 26.6763 89.5708 cv
26.6763 88.7583 27.3345 88.0996 28.146 88.0996 cv
28.958 88.0996 29.6162 88.7583 29.6162 89.5708 cv
cp
ef
37.8013 77.0176 mo
37.8013 77.8291 37.1426 78.4873 36.3311 78.4873 cv
35.5195 78.4873 34.8608 77.8291 34.8608 77.0176 cv
34.8608 76.2051 35.5195 75.5464 36.3311 75.5464 cv
37.1426 75.5464 37.8013 76.2051 37.8013 77.0176 cv
cp
ef
41.1284 77.0176 mo
41.1284 77.8291 40.4712 78.4873 39.6587 78.4873 cv
38.8462 78.4873 38.1885 77.8291 38.1885 77.0176 cv
38.1885 76.2051 38.8462 75.5464 39.6587 75.5464 cv
40.4712 75.5464 41.1284 76.2051 41.1284 77.0176 cv
cp
ef
44.4141 77.0176 mo
44.4141 77.8291 43.7559 78.4873 42.9438 78.4873 cv
42.1323 78.4873 41.4741 77.8291 41.4741 77.0176 cv
41.4741 76.2051 42.1323 75.5464 42.9438 75.5464 cv
43.7559 75.5464 44.4141 76.2051 44.4141 77.0176 cv
cp
ef
37.8013 80.3979 mo
37.8013 81.2095 37.1426 81.8672 36.3311 81.8672 cv
35.5195 81.8672 34.8608 81.2095 34.8608 80.3979 cv
34.8608 79.5845 35.5195 78.9268 36.3311 78.9268 cv
37.1426 78.9268 37.8013 79.5845 37.8013 80.3979 cv
cp
ef
41.1284 80.3979 mo
41.1284 81.2095 40.4712 81.8672 39.6587 81.8672 cv
38.8462 81.8672 38.1885 81.2095 38.1885 80.3979 cv
38.1885 79.5845 38.8462 78.9268 39.6587 78.9268 cv
40.4712 78.9268 41.1284 79.5845 41.1284 80.3979 cv
cp
ef
44.4141 80.3979 mo
44.4141 81.2095 43.7559 81.8672 42.9438 81.8672 cv
42.1323 81.8672 41.4741 81.2095 41.4741 80.3979 cv
41.4741 79.5845 42.1323 78.9268 42.9438 78.9268 cv
43.7559 78.9268 44.4141 79.5845 44.4141 80.3979 cv
cp
ef
37.8013 83.6685 mo
37.8013 84.48 37.1426 85.1377 36.3311 85.1377 cv
35.5195 85.1377 34.8608 84.48 34.8608 83.6685 cv
34.8608 82.855 35.5195 82.1973 36.3311 82.1973 cv
37.1426 82.1973 37.8013 82.855 37.8013 83.6685 cv
cp
ef
41.1284 83.6685 mo
41.1284 84.48 40.4712 85.1377 39.6587 85.1377 cv
38.8462 85.1377 38.1885 84.48 38.1885 83.6685 cv
38.1885 82.855 38.8462 82.1973 39.6587 82.1973 cv
40.4712 82.1973 41.1284 82.855 41.1284 83.6685 cv
cp
ef
44.4141 83.6685 mo
44.4141 84.48 43.7559 85.1377 42.9438 85.1377 cv
42.1323 85.1377 41.4741 84.48 41.4741 83.6685 cv
41.4741 82.855 42.1323 82.1973 42.9438 82.1973 cv
43.7559 82.1973 44.4141 82.855 44.4141 83.6685 cv
cp
ef
37.8013 86.8228 mo
37.8013 87.6343 37.1426 88.2925 36.3311 88.2925 cv
35.5195 88.2925 34.8608 87.6343 34.8608 86.8228 cv
34.8608 86.0103 35.5195 85.3516 36.3311 85.3516 cv
37.1426 85.3516 37.8013 86.0103 37.8013 86.8228 cv
cp
ef
41.1284 86.8228 mo
41.1284 87.6343 40.4712 88.2925 39.6587 88.2925 cv
38.8462 88.2925 38.1885 87.6343 38.1885 86.8228 cv
38.1885 86.0103 38.8462 85.3516 39.6587 85.3516 cv
40.4712 85.3516 41.1284 86.0103 41.1284 86.8228 cv
cp
ef
44.4141 86.8228 mo
44.4141 87.6343 43.7559 88.2925 42.9438 88.2925 cv
42.1323 88.2925 41.4741 87.6343 41.4741 86.8228 cv
41.4741 86.0103 42.1323 85.3516 42.9438 85.3516 cv
43.7559 85.3516 44.4141 86.0103 44.4141 86.8228 cv
cp
ef
37.8013 90.0352 mo
37.8013 90.8467 37.1426 91.5059 36.3311 91.5059 cv
35.5195 91.5059 34.8608 90.8467 34.8608 90.0352 cv
34.8608 89.2227 35.5195 88.5645 36.3311 88.5645 cv
37.1426 88.5645 37.8013 89.2227 37.8013 90.0352 cv
cp
ef
41.1284 90.0352 mo
41.1284 90.8467 40.4712 91.5059 39.6587 91.5059 cv
38.8462 91.5059 38.1885 90.8467 38.1885 90.0352 cv
38.1885 89.2227 38.8462 88.5645 39.6587 88.5645 cv
40.4712 88.5645 41.1284 89.2227 41.1284 90.0352 cv
cp
ef
44.4141 90.0352 mo
44.4141 90.8467 43.7559 91.5059 42.9438 91.5059 cv
42.1323 91.5059 41.4741 90.8467 41.4741 90.0352 cv
41.4741 89.2227 42.1323 88.5645 42.9438 88.5645 cv
43.7559 88.5645 44.4141 89.2227 44.4141 90.0352 cv
cp
ef
37.8013 93.3057 mo
37.8013 94.1172 37.1426 94.7754 36.3311 94.7754 cv
35.5195 94.7754 34.8608 94.1172 34.8608 93.3057 cv
34.8608 92.4932 35.5195 91.835 36.3311 91.835 cv
37.1426 91.835 37.8013 92.4932 37.8013 93.3057 cv
cp
ef
41.1284 93.3057 mo
41.1284 94.1172 40.4712 94.7754 39.6587 94.7754 cv
38.8462 94.7754 38.1885 94.1172 38.1885 93.3057 cv
38.1885 92.4932 38.8462 91.835 39.6587 91.835 cv
40.4712 91.835 41.1284 92.4932 41.1284 93.3057 cv
cp
ef
44.4141 93.3057 mo
44.4141 94.1172 43.7559 94.7754 42.9438 94.7754 cv
42.1323 94.7754 41.4741 94.1172 41.4741 93.3057 cv
41.4741 92.4932 42.1323 91.835 42.9438 91.835 cv
43.7559 91.835 44.4141 92.4932 44.4141 93.3057 cv
cp
ef
37.8013 96.4053 mo
37.8013 97.2168 37.1426 97.875 36.3311 97.875 cv
35.5195 97.875 34.8608 97.2168 34.8608 96.4053 cv
34.8608 95.5928 35.5195 94.9336 36.3311 94.9336 cv
37.1426 94.9336 37.8013 95.5928 37.8013 96.4053 cv
cp
ef
41.1284 96.4053 mo
41.1284 97.2168 40.4712 97.875 39.6587 97.875 cv
38.8462 97.875 38.1885 97.2168 38.1885 96.4053 cv
38.1885 95.5928 38.8462 94.9336 39.6587 94.9336 cv
40.4712 94.9336 41.1284 95.5928 41.1284 96.4053 cv
cp
ef
44.4141 96.4053 mo
44.4141 97.2168 43.7559 97.875 42.9438 97.875 cv
42.1323 97.875 41.4741 97.2168 41.4741 96.4053 cv
41.4741 95.5928 42.1323 94.9336 42.9438 94.9336 cv
43.7559 94.9336 44.4141 95.5928 44.4141 96.4053 cv
cp
ef
37.8013 99.6172 mo
37.8013 100.43 37.1426 101.088 36.3311 101.088 cv
35.5195 101.088 34.8608 100.43 34.8608 99.6172 cv
34.8608 98.8047 35.5195 98.1475 36.3311 98.1475 cv
37.1426 98.1475 37.8013 98.8047 37.8013 99.6172 cv
cp
ef
41.1284 99.6172 mo
41.1284 100.43 40.4712 101.088 39.6587 101.088 cv
38.8462 101.088 38.1885 100.43 38.1885 99.6172 cv
38.1885 98.8047 38.8462 98.1475 39.6587 98.1475 cv
40.4712 98.1475 41.1284 98.8047 41.1284 99.6172 cv
cp
ef
44.4141 99.6172 mo
44.4141 100.43 43.7559 101.088 42.9438 101.088 cv
42.1323 101.088 41.4741 100.43 41.4741 99.6172 cv
41.4741 98.8047 42.1323 98.1475 42.9438 98.1475 cv
43.7559 98.1475 44.4141 98.8047 44.4141 99.6172 cv
cp
ef
37.8013 102.888 mo
37.8013 103.7 37.1426 104.358 36.3311 104.358 cv
35.5195 104.358 34.8608 103.7 34.8608 102.888 cv
34.8608 102.075 35.5195 101.418 36.3311 101.418 cv
37.1426 101.418 37.8013 102.075 37.8013 102.888 cv
cp
ef
41.1284 102.888 mo
41.1284 103.7 40.4712 104.358 39.6587 104.358 cv
38.8462 104.358 38.1885 103.7 38.1885 102.888 cv
38.1885 102.075 38.8462 101.418 39.6587 101.418 cv
40.4712 101.418 41.1284 102.075 41.1284 102.888 cv
cp
ef
44.4141 102.888 mo
44.4141 103.7 43.7559 104.358 42.9438 104.358 cv
42.1323 104.358 41.4741 103.7 41.4741 102.888 cv
41.4741 102.075 42.1323 101.418 42.9438 101.418 cv
43.7559 101.418 44.4141 102.075 44.4141 102.888 cv
cp
ef
37.8013 106.071 mo
37.8013 106.883 37.1426 107.541 36.3311 107.541 cv
35.5195 107.541 34.8608 106.883 34.8608 106.071 cv
34.8608 105.259 35.5195 104.6 36.3311 104.6 cv
37.1426 104.6 37.8013 105.259 37.8013 106.071 cv
cp
ef
41.1284 106.071 mo
41.1284 106.883 40.4712 107.541 39.6587 107.541 cv
38.8462 107.541 38.1885 106.883 38.1885 106.071 cv
38.1885 105.259 38.8462 104.6 39.6587 104.6 cv
40.4712 104.6 41.1284 105.259 41.1284 106.071 cv
cp
ef
44.4141 106.071 mo
44.4141 106.883 43.7559 107.541 42.9438 107.541 cv
42.1323 107.541 41.4741 106.883 41.4741 106.071 cv
41.4741 105.259 42.1323 104.6 42.9438 104.6 cv
43.7559 104.6 44.4141 105.259 44.4141 106.071 cv
cp
ef
53.9585 77.0176 mo
53.9585 77.8291 53.2993 78.4873 52.4873 78.4873 cv
51.6758 78.4873 51.0176 77.8291 51.0176 77.0176 cv
51.0176 76.2051 51.6758 75.5464 52.4873 75.5464 cv
53.2993 75.5464 53.9585 76.2051 53.9585 77.0176 cv
cp
ef
57.2852 77.0176 mo
57.2852 77.8291 56.6274 78.4873 55.8149 78.4873 cv
55.0024 78.4873 54.3447 77.8291 54.3447 77.0176 cv
54.3447 76.2051 55.0024 75.5464 55.8149 75.5464 cv
56.6274 75.5464 57.2852 76.2051 57.2852 77.0176 cv
cp
ef
60.5703 77.0176 mo
60.5703 77.8291 59.9121 78.4873 59.1006 78.4873 cv
58.2886 78.4873 57.6304 77.8291 57.6304 77.0176 cv
57.6304 76.2051 58.2886 75.5464 59.1006 75.5464 cv
59.9121 75.5464 60.5703 76.2051 60.5703 77.0176 cv
cp
ef
53.9585 80.0991 mo
53.9585 80.9106 53.2993 81.5684 52.4873 81.5684 cv
51.6758 81.5684 51.0176 80.9106 51.0176 80.0991 cv
51.0176 79.2866 51.6758 78.6279 52.4873 78.6279 cv
53.2993 78.6279 53.9585 79.2866 53.9585 80.0991 cv
cp
ef
57.2852 80.0991 mo
57.2852 80.9106 56.6274 81.5684 55.8149 81.5684 cv
55.0024 81.5684 54.3447 80.9106 54.3447 80.0991 cv
54.3447 79.2866 55.0024 78.6279 55.8149 78.6279 cv
56.6274 78.6279 57.2852 79.2866 57.2852 80.0991 cv
cp
ef
60.5703 80.0991 mo
60.5703 80.9106 59.9121 81.5684 59.1006 81.5684 cv
58.2886 81.5684 57.6304 80.9106 57.6304 80.0991 cv
57.6304 79.2866 58.2886 78.6279 59.1006 78.6279 cv
59.9121 78.6279 60.5703 79.2866 60.5703 80.0991 cv
cp
ef
53.9585 83.27 mo
53.9585 84.0815 53.2993 84.7393 52.4873 84.7393 cv
51.6758 84.7393 51.0176 84.0815 51.0176 83.27 cv
51.0176 82.4565 51.6758 81.7988 52.4873 81.7988 cv
53.2993 81.7988 53.9585 82.4565 53.9585 83.27 cv
cp
ef
57.2852 83.27 mo
57.2852 84.0815 56.6274 84.7393 55.8149 84.7393 cv
55.0024 84.7393 54.3447 84.0815 54.3447 83.27 cv
54.3447 82.4565 55.0024 81.7988 55.8149 81.7988 cv
56.6274 81.7988 57.2852 82.4565 57.2852 83.27 cv
cp
ef
60.5703 83.27 mo
60.5703 84.0815 59.9121 84.7393 59.1006 84.7393 cv
58.2886 84.7393 57.6304 84.0815 57.6304 83.27 cv
57.6304 82.4565 58.2886 81.7988 59.1006 81.7988 cv
59.9121 81.7988 60.5703 82.4565 60.5703 83.27 cv
cp
ef
53.9585 86.4243 mo
53.9585 87.2358 53.2993 87.894 52.4873 87.894 cv
51.6758 87.894 51.0176 87.2358 51.0176 86.4243 cv
51.0176 85.6118 51.6758 84.9531 52.4873 84.9531 cv
53.2993 84.9531 53.9585 85.6118 53.9585 86.4243 cv
cp
ef
57.2852 86.4243 mo
57.2852 87.2358 56.6274 87.894 55.8149 87.894 cv
55.0024 87.894 54.3447 87.2358 54.3447 86.4243 cv
54.3447 85.6118 55.0024 84.9531 55.8149 84.9531 cv
56.6274 84.9531 57.2852 85.6118 57.2852 86.4243 cv
cp
ef
60.5703 86.4243 mo
60.5703 87.2358 59.9121 87.894 59.1006 87.894 cv
58.2886 87.894 57.6304 87.2358 57.6304 86.4243 cv
57.6304 85.6118 58.2886 84.9531 59.1006 84.9531 cv
59.9121 84.9531 60.5703 85.6118 60.5703 86.4243 cv
cp
ef
53.9585 89.5376 mo
53.9585 90.3491 53.2993 91.0078 52.4873 91.0078 cv
51.6758 91.0078 51.0176 90.3491 51.0176 89.5376 cv
51.0176 88.7251 51.6758 88.0664 52.4873 88.0664 cv
53.2993 88.0664 53.9585 88.7251 53.9585 89.5376 cv
cp
ef
57.2852 89.5376 mo
57.2852 90.3491 56.6274 91.0078 55.8149 91.0078 cv
55.0024 91.0078 54.3447 90.3491 54.3447 89.5376 cv
54.3447 88.7251 55.0024 88.0664 55.8149 88.0664 cv
56.6274 88.0664 57.2852 88.7251 57.2852 89.5376 cv
cp
ef
60.5703 89.5376 mo
60.5703 90.3491 59.9121 91.0078 59.1006 91.0078 cv
58.2886 91.0078 57.6304 90.3491 57.6304 89.5376 cv
57.6304 88.7251 58.2886 88.0664 59.1006 88.0664 cv
59.9121 88.0664 60.5703 88.7251 60.5703 89.5376 cv
cp
ef
53.9585 92.6582 mo
53.9585 93.4707 53.2993 94.1279 52.4873 94.1279 cv
51.6758 94.1279 51.0176 93.4707 51.0176 92.6582 cv
51.0176 91.8457 51.6758 91.1875 52.4873 91.1875 cv
53.2993 91.1875 53.9585 91.8457 53.9585 92.6582 cv
cp
ef
57.2852 92.6582 mo
57.2852 93.4707 56.6274 94.1279 55.8149 94.1279 cv
55.0024 94.1279 54.3447 93.4707 54.3447 92.6582 cv
54.3447 91.8457 55.0024 91.1875 55.8149 91.1875 cv
56.6274 91.1875 57.2852 91.8457 57.2852 92.6582 cv
cp
ef
60.5703 92.6582 mo
60.5703 93.4707 59.9121 94.1279 59.1006 94.1279 cv
58.2886 94.1279 57.6304 93.4707 57.6304 92.6582 cv
57.6304 91.8457 58.2886 91.1875 59.1006 91.1875 cv
59.9121 91.1875 60.5703 91.8457 60.5703 92.6582 cv
cp
ef
53.9585 95.9072 mo
53.9585 96.7188 53.2993 97.376 52.4873 97.376 cv
51.6758 97.376 51.0176 96.7188 51.0176 95.9072 cv
51.0176 95.0938 51.6758 94.4355 52.4873 94.4355 cv
53.2993 94.4355 53.9585 95.0938 53.9585 95.9072 cv
cp
ef
57.2852 95.9072 mo
57.2852 96.7188 56.6274 97.376 55.8149 97.376 cv
55.0024 97.376 54.3447 96.7188 54.3447 95.9072 cv
54.3447 95.0938 55.0024 94.4355 55.8149 94.4355 cv
56.6274 94.4355 57.2852 95.0938 57.2852 95.9072 cv
cp
ef
60.5703 95.9072 mo
60.5703 96.7188 59.9121 97.376 59.1006 97.376 cv
58.2886 97.376 57.6304 96.7188 57.6304 95.9072 cv
57.6304 95.0938 58.2886 94.4355 59.1006 94.4355 cv
59.9121 94.4355 60.5703 95.0938 60.5703 95.9072 cv
cp
ef
53.9585 99.1201 mo
53.9585 99.9316 53.2993 100.59 52.4873 100.59 cv
51.6758 100.59 51.0176 99.9316 51.0176 99.1201 cv
51.0176 98.3076 51.6758 97.6484 52.4873 97.6484 cv
53.2993 97.6484 53.9585 98.3076 53.9585 99.1201 cv
cp
ef
57.2852 99.1201 mo
57.2852 99.9316 56.6274 100.59 55.8149 100.59 cv
55.0024 100.59 54.3447 99.9316 54.3447 99.1201 cv
54.3447 98.3076 55.0024 97.6484 55.8149 97.6484 cv
56.6274 97.6484 57.2852 98.3076 57.2852 99.1201 cv
cp
ef
60.5703 99.1201 mo
60.5703 99.9316 59.9121 100.59 59.1006 100.59 cv
58.2886 100.59 57.6304 99.9316 57.6304 99.1201 cv
57.6304 98.3076 58.2886 97.6484 59.1006 97.6484 cv
59.9121 97.6484 60.5703 98.3076 60.5703 99.1201 cv
cp
ef
53.9585 102.391 mo
53.9585 103.202 53.2993 103.86 52.4873 103.86 cv
51.6758 103.86 51.0176 103.202 51.0176 102.391 cv
51.0176 101.578 51.6758 100.919 52.4873 100.919 cv
53.2993 100.919 53.9585 101.578 53.9585 102.391 cv
cp
ef
57.2852 102.391 mo
57.2852 103.202 56.6274 103.86 55.8149 103.86 cv
55.0024 103.86 54.3447 103.202 54.3447 102.391 cv
54.3447 101.578 55.0024 100.919 55.8149 100.919 cv
56.6274 100.919 57.2852 101.578 57.2852 102.391 cv
cp
ef
60.5703 102.391 mo
60.5703 103.202 59.9121 103.86 59.1006 103.86 cv
58.2886 103.86 57.6304 103.202 57.6304 102.391 cv
57.6304 101.578 58.2886 100.919 59.1006 100.919 cv
59.9121 100.919 60.5703 101.578 60.5703 102.391 cv
cp
ef
53.9585 105.673 mo
53.9585 106.484 53.2993 107.142 52.4873 107.142 cv
51.6758 107.142 51.0176 106.484 51.0176 105.673 cv
51.0176 104.859 51.6758 104.201 52.4873 104.201 cv
53.2993 104.201 53.9585 104.859 53.9585 105.673 cv
cp
ef
57.2852 105.673 mo
57.2852 106.484 56.6274 107.142 55.8149 107.142 cv
55.0024 107.142 54.3447 106.484 54.3447 105.673 cv
54.3447 104.859 55.0024 104.201 55.8149 104.201 cv
56.6274 104.201 57.2852 104.859 57.2852 105.673 cv
cp
ef
60.5703 105.673 mo
60.5703 106.484 59.9121 107.142 59.1006 107.142 cv
58.2886 107.142 57.6304 106.484 57.6304 105.673 cv
57.6304 104.859 58.2886 104.201 59.1006 104.201 cv
59.9121 104.201 60.5703 104.859 60.5703 105.673 cv
cp
ef
53.9585 108.811 mo
53.9585 109.622 53.2993 110.279 52.4873 110.279 cv
51.6758 110.279 51.0176 109.622 51.0176 108.811 cv
51.0176 107.997 51.6758 107.34 52.4873 107.34 cv
53.2993 107.34 53.9585 107.997 53.9585 108.811 cv
cp
ef
57.2852 108.811 mo
57.2852 109.622 56.6274 110.279 55.8149 110.279 cv
55.0024 110.279 54.3447 109.622 54.3447 108.811 cv
54.3447 107.997 55.0024 107.34 55.8149 107.34 cv
56.6274 107.34 57.2852 107.997 57.2852 108.811 cv
cp
ef
60.5703 108.811 mo
60.5703 109.622 59.9121 110.279 59.1006 110.279 cv
58.2886 110.279 57.6304 109.622 57.6304 108.811 cv
57.6304 107.997 58.2886 107.34 59.1006 107.34 cv
59.9121 107.34 60.5703 107.997 60.5703 108.811 cv
cp
ef
53.9585 112.047 mo
53.9585 112.858 53.2993 113.517 52.4873 113.517 cv
51.6758 113.517 51.0176 112.858 51.0176 112.047 cv
51.0176 111.234 51.6758 110.576 52.4873 110.576 cv
53.2993 110.576 53.9585 111.234 53.9585 112.047 cv
cp
ef
57.2852 112.047 mo
57.2852 112.858 56.6274 113.517 55.8149 113.517 cv
55.0024 113.517 54.3447 112.858 54.3447 112.047 cv
54.3447 111.234 55.0024 110.576 55.8149 110.576 cv
56.6274 110.576 57.2852 111.234 57.2852 112.047 cv
cp
ef
60.5703 112.047 mo
60.5703 112.858 59.9121 113.517 59.1006 113.517 cv
58.2886 113.517 57.6304 112.858 57.6304 112.047 cv
57.6304 111.234 58.2886 110.576 59.1006 110.576 cv
59.9121 110.576 60.5703 111.234 60.5703 112.047 cv
cp
ef
57.2852 115.185 mo
57.2852 115.996 56.6274 116.653 55.8149 116.653 cv
55.0024 116.653 54.3447 115.996 54.3447 115.185 cv
54.3447 114.371 55.0024 113.714 55.8149 113.714 cv
56.6274 113.714 57.2852 114.371 57.2852 115.185 cv
cp
ef
60.5703 115.185 mo
60.5703 115.996 59.9121 116.653 59.1006 116.653 cv
58.2886 116.653 57.6304 115.996 57.6304 115.185 cv
57.6304 114.371 58.2886 113.714 59.1006 113.714 cv
59.9121 113.714 60.5703 114.371 60.5703 115.185 cv
cp
ef
63.6602 108.811 mo
63.6602 109.622 63.0015 110.279 62.189 110.279 cv
61.3774 110.279 60.7192 109.622 60.7192 108.811 cv
60.7192 107.997 61.3774 107.34 62.189 107.34 cv
63.0015 107.34 63.6602 107.997 63.6602 108.811 cv
cp
ef
66.9448 108.811 mo
66.9448 109.622 66.2871 110.279 65.4746 110.279 cv
64.6631 110.279 64.0044 109.622 64.0044 108.811 cv
64.0044 107.997 64.6631 107.34 65.4746 107.34 cv
66.2871 107.34 66.9448 107.997 66.9448 108.811 cv
cp
ef
63.6602 112.047 mo
63.6602 112.858 63.0015 113.517 62.189 113.517 cv
61.3774 113.517 60.7192 112.858 60.7192 112.047 cv
60.7192 111.234 61.3774 110.576 62.189 110.576 cv
63.0015 110.576 63.6602 111.234 63.6602 112.047 cv
cp
ef
66.9448 112.047 mo
66.9448 112.858 66.2871 113.517 65.4746 113.517 cv
64.6631 113.517 64.0044 112.858 64.0044 112.047 cv
64.0044 111.234 64.6631 110.576 65.4746 110.576 cv
66.2871 110.576 66.9448 111.234 66.9448 112.047 cv
cp
ef
63.6602 115.185 mo
63.6602 115.996 63.0015 116.653 62.189 116.653 cv
61.3774 116.653 60.7192 115.996 60.7192 115.185 cv
60.7192 114.371 61.3774 113.714 62.189 113.714 cv
63.0015 113.714 63.6602 114.371 63.6602 115.185 cv
cp
ef
66.9448 115.185 mo
66.9448 115.996 66.2871 116.653 65.4746 116.653 cv
64.6631 116.653 64.0044 115.996 64.0044 115.185 cv
64.0044 114.371 64.6631 113.714 65.4746 113.714 cv
66.2871 113.714 66.9448 114.371 66.9448 115.185 cv
cp
ef
70.0332 108.811 mo
70.0332 109.622 69.376 110.279 68.5635 110.279 cv
67.7515 110.279 67.0933 109.622 67.0933 108.811 cv
67.0933 107.997 67.7515 107.34 68.5635 107.34 cv
69.376 107.34 70.0332 107.997 70.0332 108.811 cv
cp
ef
73.3198 108.811 mo
73.3198 109.622 72.6611 110.279 71.8496 110.279 cv
71.0371 110.279 70.3789 109.622 70.3789 108.811 cv
70.3789 107.997 71.0371 107.34 71.8496 107.34 cv
72.6611 107.34 73.3198 107.997 73.3198 108.811 cv
cp
ef
70.0332 112.047 mo
70.0332 112.858 69.376 113.517 68.5635 113.517 cv
67.7515 113.517 67.0933 112.858 67.0933 112.047 cv
67.0933 111.234 67.7515 110.576 68.5635 110.576 cv
69.376 110.576 70.0332 111.234 70.0332 112.047 cv
cp
ef
73.3198 112.047 mo
73.3198 112.858 72.6611 113.517 71.8496 113.517 cv
71.0371 113.517 70.3789 112.858 70.3789 112.047 cv
70.3789 111.234 71.0371 110.576 71.8496 110.576 cv
72.6611 110.576 73.3198 111.234 73.3198 112.047 cv
cp
ef
70.0332 115.185 mo
70.0332 115.996 69.376 116.653 68.5635 116.653 cv
67.7515 116.653 67.0933 115.996 67.0933 115.185 cv
67.0933 114.371 67.7515 113.714 68.5635 113.714 cv
69.376 113.714 70.0332 114.371 70.0332 115.185 cv
cp
ef
73.3198 115.185 mo
73.3198 115.996 72.6611 116.653 71.8496 116.653 cv
71.0371 116.653 70.3789 115.996 70.3789 115.185 cv
70.3789 114.371 71.0371 113.714 71.8496 113.714 cv
72.6611 113.714 73.3198 114.371 73.3198 115.185 cv
cp
ef
79.0283 77.0176 mo
79.0283 77.8291 78.3691 78.4873 77.5586 78.4873 cv
76.7461 78.4873 76.0874 77.8291 76.0874 77.0176 cv
76.0874 76.2051 76.7461 75.5464 77.5586 75.5464 cv
78.3691 75.5464 79.0283 76.2051 79.0283 77.0176 cv
cp
ef
82.3545 77.0176 mo
82.3545 77.8291 81.6973 78.4873 80.8848 78.4873 cv
80.0737 78.4873 79.4146 77.8291 79.4146 77.0176 cv
79.4146 76.2051 80.0737 75.5464 80.8848 75.5464 cv
81.6973 75.5464 82.3545 76.2051 82.3545 77.0176 cv
cp
ef
85.6411 77.0176 mo
85.6411 77.8291 84.9834 78.4873 84.1709 78.4873 cv
83.3584 78.4873 82.7007 77.8291 82.7007 77.0176 cv
82.7007 76.2051 83.3584 75.5464 84.1709 75.5464 cv
84.9834 75.5464 85.6411 76.2051 85.6411 77.0176 cv
cp
ef
111.618 77.1504 mo
111.618 77.9619 110.959 78.6201 110.148 78.6201 cv
109.336 78.6201 108.678 77.9619 108.678 77.1504 cv
108.678 76.3379 109.336 75.6792 110.148 75.6792 cv
110.959 75.6792 111.618 76.3379 111.618 77.1504 cv
cp
ef
114.813 77.1504 mo
114.813 77.9619 114.155 78.6201 113.343 78.6201 cv
112.53 78.6201 111.873 77.9619 111.873 77.1504 cv
111.873 76.3379 112.53 75.6792 113.343 75.6792 cv
114.155 75.6792 114.813 76.3379 114.813 77.1504 cv
cp
ef
117.934 77.1504 mo
117.934 77.9619 117.274 78.6201 116.462 78.6201 cv
115.65 78.6201 114.991 77.9619 114.991 77.1504 cv
114.991 76.3379 115.65 75.6792 116.462 75.6792 cv
117.274 75.6792 117.934 76.3379 117.934 77.1504 cv
cp
ef
121.13 77.1504 mo
121.13 77.9619 120.472 78.6201 119.659 78.6201 cv
118.847 78.6201 118.189 77.9619 118.189 77.1504 cv
118.189 76.3379 118.847 75.6792 119.659 75.6792 cv
120.472 75.6792 121.13 76.3379 121.13 77.1504 cv
cp
ef
124.449 77.1504 mo
124.449 77.9619 123.79 78.6201 122.979 78.6201 cv
122.166 78.6201 121.509 77.9619 121.509 77.1504 cv
121.509 76.3379 122.166 75.6792 122.979 75.6792 cv
123.79 75.6792 124.449 76.3379 124.449 77.1504 cv
cp
ef
135.463 77.1504 mo
135.463 77.9619 134.805 78.6201 133.993 78.6201 cv
133.181 78.6201 132.523 77.9619 132.523 77.1504 cv
132.523 76.3379 133.181 75.6792 133.993 75.6792 cv
134.805 75.6792 135.463 76.3379 135.463 77.1504 cv
cp
ef
138.658 77.1504 mo
138.658 77.9619 138 78.6201 137.188 78.6201 cv
136.375 78.6201 135.718 77.9619 135.718 77.1504 cv
135.718 76.3379 136.375 75.6792 137.188 75.6792 cv
138 75.6792 138.658 76.3379 138.658 77.1504 cv
cp
ef
141.776 77.1504 mo
141.776 77.9619 141.119 78.6201 140.307 78.6201 cv
139.496 78.6201 138.837 77.9619 138.837 77.1504 cv
138.837 76.3379 139.496 75.6792 140.307 75.6792 cv
141.119 75.6792 141.776 76.3379 141.776 77.1504 cv
cp
ef
144.975 77.1504 mo
144.975 77.9619 144.317 78.6201 143.505 78.6201 cv
142.692 78.6201 142.034 77.9619 142.034 77.1504 cv
142.034 76.3379 142.692 75.6792 143.505 75.6792 cv
144.317 75.6792 144.975 76.3379 144.975 77.1504 cv
cp
ef
148.294 77.1504 mo
148.294 77.9619 147.635 78.6201 146.822 78.6201 cv
146.012 78.6201 145.353 77.9619 145.353 77.1504 cv
145.353 76.3379 146.012 75.6792 146.822 75.6792 cv
147.635 75.6792 148.294 76.3379 148.294 77.1504 cv
cp
ef
141.702 80.3257 mo
141.702 81.1377 141.045 81.7959 140.232 81.7959 cv
139.422 81.7959 138.763 81.1377 138.763 80.3257 cv
138.763 79.5132 139.422 78.855 140.232 78.855 cv
141.045 78.855 141.702 79.5132 141.702 80.3257 cv
cp
ef
144.897 80.3257 mo
144.897 81.1377 144.239 81.7959 143.427 81.7959 cv
142.614 81.7959 141.957 81.1377 141.957 80.3257 cv
141.957 79.5132 142.614 78.855 143.427 78.855 cv
144.239 78.855 144.897 79.5132 144.897 80.3257 cv
cp
ef
148.24 80.3257 mo
148.24 81.1377 147.581 81.7959 146.771 81.7959 cv
145.958 81.7959 145.299 81.1377 145.299 80.3257 cv
145.299 79.5132 145.958 78.855 146.771 78.855 cv
147.581 78.855 148.24 79.5132 148.24 80.3257 cv
cp
ef
151.437 80.3257 mo
151.437 81.1377 150.779 81.7959 149.967 81.7959 cv
149.154 81.7959 148.496 81.1377 148.496 80.3257 cv
148.496 79.5132 149.154 78.855 149.967 78.855 cv
150.779 78.855 151.437 79.5132 151.437 80.3257 cv
cp
ef
154.756 80.3257 mo
154.756 81.1377 154.097 81.7959 153.286 81.7959 cv
152.474 81.7959 151.815 81.1377 151.815 80.3257 cv
151.815 79.5132 152.474 78.855 153.286 78.855 cv
154.097 78.855 154.756 79.5132 154.756 80.3257 cv
cp
ef
141.76 83.5576 mo
141.76 84.3691 141.101 85.0269 140.289 85.0269 cv
139.477 85.0269 138.817 84.3691 138.817 83.5576 cv
138.817 82.7441 139.477 82.0869 140.289 82.0869 cv
141.101 82.0869 141.76 82.7441 141.76 83.5576 cv
cp
ef
144.954 83.5576 mo
144.954 84.3691 144.295 85.0269 143.482 85.0269 cv
142.672 85.0269 142.013 84.3691 142.013 83.5576 cv
142.013 82.7441 142.672 82.0869 143.482 82.0869 cv
144.295 82.0869 144.954 82.7441 144.954 83.5576 cv
cp
ef
148.296 83.5576 mo
148.296 84.3691 147.637 85.0269 146.825 85.0269 cv
146.013 85.0269 145.355 84.3691 145.355 83.5576 cv
145.355 82.7441 146.013 82.0869 146.825 82.0869 cv
147.637 82.0869 148.296 82.7441 148.296 83.5576 cv
cp
ef
151.493 83.5576 mo
151.493 84.3691 150.834 85.0269 150.023 85.0269 cv
149.211 85.0269 148.552 84.3691 148.552 83.5576 cv
148.552 82.7441 149.211 82.0869 150.023 82.0869 cv
150.834 82.0869 151.493 82.7441 151.493 83.5576 cv
cp
ef
154.812 83.5576 mo
154.812 84.3691 154.153 85.0269 153.341 85.0269 cv
152.53 85.0269 151.871 84.3691 151.871 83.5576 cv
151.871 82.7441 152.53 82.0869 153.341 82.0869 cv
154.153 82.0869 154.812 82.7441 154.812 83.5576 cv
cp
ef
158.042 83.5576 mo
158.042 84.3691 157.385 85.0269 156.572 85.0269 cv
155.762 85.0269 155.103 84.3691 155.103 83.5576 cv
155.103 82.7441 155.762 82.0869 156.572 82.0869 cv
157.385 82.0869 158.042 82.7441 158.042 83.5576 cv
cp
ef
151.493 86.8438 mo
151.493 87.6563 150.834 88.314 150.023 88.314 cv
149.211 88.314 148.552 87.6563 148.552 86.8438 cv
148.552 86.0313 149.211 85.374 150.023 85.374 cv
150.834 85.374 151.493 86.0313 151.493 86.8438 cv
cp
ef
154.588 86.8438 mo
154.588 87.6563 153.931 88.314 153.118 88.314 cv
152.308 88.314 151.648 87.6563 151.648 86.8438 cv
151.648 86.0313 152.308 85.374 153.118 85.374 cv
153.931 85.374 154.588 86.0313 154.588 86.8438 cv
cp
ef
157.819 86.8438 mo
157.819 87.6563 157.162 88.314 156.35 88.314 cv
155.538 88.314 154.879 87.6563 154.879 86.8438 cv
154.879 86.0313 155.538 85.374 156.35 85.374 cv
157.162 85.374 157.819 86.0313 157.819 86.8438 cv
cp
ef
151.381 90.1309 mo
151.381 90.9424 150.724 91.6006 149.911 91.6006 cv
149.099 91.6006 148.441 90.9424 148.441 90.1309 cv
148.441 89.3184 149.099 88.6611 149.911 88.6611 cv
150.724 88.6611 151.381 89.3184 151.381 90.1309 cv
cp
ef
154.478 90.1309 mo
154.478 90.9424 153.818 91.6006 153.008 91.6006 cv
152.195 91.6006 151.536 90.9424 151.536 90.1309 cv
151.536 89.3184 152.195 88.6611 153.008 88.6611 cv
153.818 88.6611 154.478 89.3184 154.478 90.1309 cv
cp
ef
157.709 90.1309 mo
157.709 90.9424 157.05 91.6006 156.238 91.6006 cv
155.426 91.6006 154.769 90.9424 154.769 90.1309 cv
154.769 89.3184 155.426 88.6611 156.238 88.6611 cv
157.05 88.6611 157.709 89.3184 157.709 90.1309 cv
cp
ef
151.6 77.1504 mo
151.6 77.9619 150.94 78.6201 150.129 78.6201 cv
149.316 78.6201 148.659 77.9619 148.659 77.1504 cv
148.659 76.3379 149.316 75.6792 150.129 75.6792 cv
150.94 75.6792 151.6 76.3379 151.6 77.1504 cv
cp
ef
168.421 77.1504 mo
168.421 77.9619 167.762 78.6201 166.951 78.6201 cv
166.139 78.6201 165.481 77.9619 165.481 77.1504 cv
165.481 76.3379 166.139 75.6792 166.951 75.6792 cv
167.762 75.6792 168.421 76.3379 168.421 77.1504 cv
cp
ef
171.616 77.1504 mo
171.616 77.9619 170.958 78.6201 170.146 78.6201 cv
169.333 78.6201 168.676 77.9619 168.676 77.1504 cv
168.676 76.3379 169.333 75.6792 170.146 75.6792 cv
170.958 75.6792 171.616 76.3379 171.616 77.1504 cv
cp
ef
174.736 77.1504 mo
174.736 77.9619 174.077 78.6201 173.265 78.6201 cv
172.453 78.6201 171.794 77.9619 171.794 77.1504 cv
171.794 76.3379 172.453 75.6792 173.265 75.6792 cv
174.077 75.6792 174.736 76.3379 174.736 77.1504 cv
cp
ef
177.933 77.1504 mo
177.933 77.9619 177.274 78.6201 176.462 78.6201 cv
175.649 78.6201 174.992 77.9619 174.992 77.1504 cv
174.992 76.3379 175.649 75.6792 176.462 75.6792 cv
177.274 75.6792 177.933 76.3379 177.933 77.1504 cv
cp
ef
181.252 77.1504 mo
181.252 77.9619 180.593 78.6201 179.781 78.6201 cv
178.97 78.6201 178.312 77.9619 178.312 77.1504 cv
178.312 76.3379 178.97 75.6792 179.781 75.6792 cv
180.593 75.6792 181.252 76.3379 181.252 77.1504 cv
cp
ef
184.557 77.1504 mo
184.557 77.9619 183.899 78.6201 183.087 78.6201 cv
182.274 78.6201 181.617 77.9619 181.617 77.1504 cv
181.617 76.3379 182.274 75.6792 183.087 75.6792 cv
183.899 75.6792 184.557 76.3379 184.557 77.1504 cv
cp
ef
168.379 80.3667 mo
168.379 81.1787 167.72 81.8369 166.908 81.8369 cv
166.096 81.8369 165.438 81.1787 165.438 80.3667 cv
165.438 79.5547 166.096 78.896 166.908 78.896 cv
167.72 78.896 168.379 79.5547 168.379 80.3667 cv
cp
ef
165.162 80.3667 mo
165.162 81.1787 164.503 81.8369 163.691 81.8369 cv
162.879 81.8369 162.222 81.1787 162.222 80.3667 cv
162.222 79.5547 162.879 78.896 163.691 78.896 cv
164.503 78.896 165.162 79.5547 165.162 80.3667 cv
cp
ef
171.701 80.3667 mo
171.701 81.1787 171.044 81.8369 170.231 81.8369 cv
169.419 81.8369 168.761 81.1787 168.761 80.3667 cv
168.761 79.5547 169.419 78.896 170.231 78.896 cv
171.044 78.896 171.701 79.5547 171.701 80.3667 cv
cp
ef
174.949 80.3667 mo
174.949 81.1787 174.29 81.8369 173.479 81.8369 cv
172.667 81.8369 172.01 81.1787 172.01 80.3667 cv
172.01 79.5547 172.667 78.896 173.479 78.896 cv
174.29 78.896 174.949 79.5547 174.949 80.3667 cv
cp
ef
178.147 80.3667 mo
178.147 81.1787 177.488 81.8369 176.677 81.8369 cv
175.865 81.8369 175.207 81.1787 175.207 80.3667 cv
175.207 79.5547 175.865 78.896 176.677 78.896 cv
177.488 78.896 178.147 79.5547 178.147 80.3667 cv
cp
ef
181.465 80.3667 mo
181.465 81.1787 180.808 81.8369 179.995 81.8369 cv
179.185 81.8369 178.525 81.1787 178.525 80.3667 cv
178.525 79.5547 179.185 78.896 179.995 78.896 cv
180.808 78.896 181.465 79.5547 181.465 80.3667 cv
cp
ef
184.772 80.3667 mo
184.772 81.1787 184.113 81.8369 183.301 81.8369 cv
182.489 81.8369 181.83 81.1787 181.83 80.3667 cv
181.83 79.5547 182.489 78.896 183.301 78.896 cv
184.113 78.896 184.772 79.5547 184.772 80.3667 cv
cp
ef
168.379 83.4985 mo
168.379 84.3101 167.72 84.9678 166.908 84.9678 cv
166.096 84.9678 165.438 84.3101 165.438 83.4985 cv
165.438 82.686 166.096 82.0273 166.908 82.0273 cv
167.72 82.0273 168.379 82.686 168.379 83.4985 cv
cp
ef
165.162 83.4985 mo
165.162 84.3101 164.503 84.9678 163.691 84.9678 cv
162.879 84.9678 162.222 84.3101 162.222 83.4985 cv
162.222 82.686 162.879 82.0273 163.691 82.0273 cv
164.503 82.0273 165.162 82.686 165.162 83.4985 cv
cp
ef
171.701 83.4985 mo
171.701 84.3101 171.044 84.9678 170.231 84.9678 cv
169.419 84.9678 168.761 84.3101 168.761 83.4985 cv
168.761 82.686 169.419 82.0273 170.231 82.0273 cv
171.044 82.0273 171.701 82.686 171.701 83.4985 cv
cp
ef
174.949 83.4985 mo
174.949 84.3101 174.29 84.9678 173.479 84.9678 cv
172.667 84.9678 172.01 84.3101 172.01 83.4985 cv
172.01 82.686 172.667 82.0273 173.479 82.0273 cv
174.29 82.0273 174.949 82.686 174.949 83.4985 cv
cp
ef
168.379 86.8433 mo
168.379 87.6548 167.72 88.313 166.908 88.313 cv
166.096 88.313 165.438 87.6548 165.438 86.8433 cv
165.438 86.0308 166.096 85.373 166.908 85.373 cv
167.72 85.373 168.379 86.0308 168.379 86.8433 cv
cp
ef
165.162 86.8433 mo
165.162 87.6548 164.503 88.313 163.691 88.313 cv
162.879 88.313 162.222 87.6548 162.222 86.8433 cv
162.222 86.0308 162.879 85.373 163.691 85.373 cv
164.503 85.373 165.162 86.0308 165.162 86.8433 cv
cp
ef
171.701 86.8433 mo
171.701 87.6548 171.044 88.313 170.231 88.313 cv
169.419 88.313 168.761 87.6548 168.761 86.8433 cv
168.761 86.0308 169.419 85.373 170.231 85.373 cv
171.044 85.373 171.701 86.0308 171.701 86.8433 cv
cp
ef
174.949 86.8433 mo
174.949 87.6548 174.29 88.313 173.479 88.313 cv
172.667 88.313 172.01 87.6548 172.01 86.8433 cv
172.01 86.0308 172.667 85.373 173.479 85.373 cv
174.29 85.373 174.949 86.0308 174.949 86.8433 cv
cp
ef
168.379 89.9746 mo
168.379 90.7861 167.72 91.4443 166.908 91.4443 cv
166.096 91.4443 165.438 90.7861 165.438 89.9746 cv
165.438 89.1621 166.096 88.5034 166.908 88.5034 cv
167.72 88.5034 168.379 89.1621 168.379 89.9746 cv
cp
ef
165.162 89.9746 mo
165.162 90.7861 164.503 91.4443 163.691 91.4443 cv
162.879 91.4443 162.222 90.7861 162.222 89.9746 cv
162.222 89.1621 162.879 88.5034 163.691 88.5034 cv
164.503 88.5034 165.162 89.1621 165.162 89.9746 cv
cp
ef
171.701 89.9746 mo
171.701 90.7861 171.044 91.4443 170.231 91.4443 cv
169.419 91.4443 168.761 90.7861 168.761 89.9746 cv
168.761 89.1621 169.419 88.5034 170.231 88.5034 cv
171.044 88.5034 171.701 89.1621 171.701 89.9746 cv
cp
ef
174.949 89.9746 mo
174.949 90.7861 174.29 91.4443 173.479 91.4443 cv
172.667 91.4443 172.01 90.7861 172.01 89.9746 cv
172.01 89.1621 172.667 88.5034 173.479 88.5034 cv
174.29 88.5034 174.949 89.1621 174.949 89.9746 cv
cp
ef
178.166 89.9746 mo
178.166 90.7861 177.509 91.4443 176.696 91.4443 cv
175.886 91.4443 175.227 90.7861 175.227 89.9746 cv
175.227 89.1621 175.886 88.5034 176.696 88.5034 cv
177.509 88.5034 178.166 89.1621 178.166 89.9746 cv
cp
ef
171.553 93.1484 mo
171.553 93.96 170.894 94.6182 170.082 94.6182 cv
169.27 94.6182 168.612 93.96 168.612 93.1484 cv
168.612 92.3359 169.27 91.6777 170.082 91.6777 cv
170.894 91.6777 171.553 92.3359 171.553 93.1484 cv
cp
ef
168.336 93.1484 mo
168.336 93.96 167.677 94.6182 166.866 94.6182 cv
166.054 94.6182 165.396 93.96 165.396 93.1484 cv
165.396 92.3359 166.054 91.6777 166.866 91.6777 cv
167.677 91.6777 168.336 92.3359 168.336 93.1484 cv
cp
ef
174.875 93.1484 mo
174.875 93.96 174.218 94.6182 173.405 94.6182 cv
172.593 94.6182 171.936 93.96 171.936 93.1484 cv
171.936 92.3359 172.593 91.6777 173.405 91.6777 cv
174.218 91.6777 174.875 92.3359 174.875 93.1484 cv
cp
ef
178.124 93.1484 mo
178.124 93.96 177.465 94.6182 176.653 94.6182 cv
175.841 94.6182 175.184 93.96 175.184 93.1484 cv
175.184 92.3359 175.841 91.6777 176.653 91.6777 cv
177.465 91.6777 178.124 92.3359 178.124 93.1484 cv
cp
ef
181.34 93.1484 mo
181.34 93.96 180.682 94.6182 179.87 94.6182 cv
179.058 94.6182 178.4 93.96 178.4 93.1484 cv
178.4 92.3359 179.058 91.6777 179.87 91.6777 cv
180.682 91.6777 181.34 92.3359 181.34 93.1484 cv
cp
ef
174.77 96.4082 mo
174.77 97.2197 174.11 97.8779 173.299 97.8779 cv
172.486 97.8779 171.829 97.2197 171.829 96.4082 cv
171.829 95.5957 172.486 94.9375 173.299 94.9375 cv
174.11 94.9375 174.77 95.5957 174.77 96.4082 cv
cp
ef
171.553 96.4082 mo
171.553 97.2197 170.894 97.8779 170.082 97.8779 cv
169.27 97.8779 168.612 97.2197 168.612 96.4082 cv
168.612 95.5957 169.27 94.9375 170.082 94.9375 cv
170.894 94.9375 171.553 95.5957 171.553 96.4082 cv
cp
ef
178.092 96.4082 mo
178.092 97.2197 177.435 97.8779 176.622 97.8779 cv
175.81 97.8779 175.152 97.2197 175.152 96.4082 cv
175.152 95.5957 175.81 94.9375 176.622 94.9375 cv
177.435 94.9375 178.092 95.5957 178.092 96.4082 cv
cp
ef
181.34 96.4082 mo
181.34 97.2197 180.682 97.8779 179.87 97.8779 cv
179.058 97.8779 178.4 97.2197 178.4 96.4082 cv
178.4 95.5957 179.058 94.9375 179.87 94.9375 cv
180.682 94.9375 181.34 95.5957 181.34 96.4082 cv
cp
ef
184.557 96.4082 mo
184.557 97.2197 183.899 97.8779 183.087 97.8779 cv
182.274 97.8779 181.617 97.2197 181.617 96.4082 cv
181.617 95.5957 182.274 94.9375 183.087 94.9375 cv
183.899 94.9375 184.557 95.5957 184.557 96.4082 cv
cp
ef
177.986 99.582 mo
177.986 100.394 177.327 101.052 176.516 101.052 cv
175.703 101.052 175.046 100.394 175.046 99.582 cv
175.046 98.7695 175.703 98.1113 176.516 98.1113 cv
177.327 98.1113 177.986 98.7695 177.986 99.582 cv
cp
ef
174.77 99.582 mo
174.77 100.394 174.11 101.052 173.299 101.052 cv
172.486 101.052 171.829 100.394 171.829 99.582 cv
171.829 98.7695 172.486 98.1113 173.299 98.1113 cv
174.11 98.1113 174.77 98.7695 174.77 99.582 cv
cp
ef
181.309 99.582 mo
181.309 100.394 180.651 101.052 179.839 101.052 cv
179.026 101.052 178.368 100.394 178.368 99.582 cv
178.368 98.7695 179.026 98.1113 179.839 98.1113 cv
180.651 98.1113 181.309 98.7695 181.309 99.582 cv
cp
ef
184.557 99.582 mo
184.557 100.394 183.899 101.052 183.087 101.052 cv
182.274 101.052 181.617 100.394 181.617 99.582 cv
181.617 98.7695 182.274 98.1113 183.087 98.1113 cv
183.899 98.1113 184.557 98.7695 184.557 99.582 cv
cp
ef
181.245 102.884 mo
181.245 103.696 180.586 104.354 179.775 104.354 cv
178.963 104.354 178.306 103.696 178.306 102.884 cv
178.306 102.071 178.963 101.414 179.775 101.414 cv
180.586 101.414 181.245 102.071 181.245 102.884 cv
cp
ef
178.028 102.884 mo
178.028 103.696 177.369 104.354 176.559 104.354 cv
175.746 104.354 175.089 103.696 175.089 102.884 cv
175.089 102.071 175.746 101.414 176.559 101.414 cv
177.369 101.414 178.028 102.071 178.028 102.884 cv
cp
ef
184.568 102.884 mo
184.568 103.696 183.91 104.354 183.098 104.354 cv
182.285 104.354 181.628 103.696 181.628 102.884 cv
181.628 102.071 182.285 101.414 183.098 101.414 cv
183.91 101.414 184.568 102.071 184.568 102.884 cv
cp
ef
187.816 102.884 mo
187.816 103.696 187.159 104.354 186.347 104.354 cv
185.535 104.354 184.876 103.696 184.876 102.884 cv
184.876 102.071 185.535 101.414 186.347 101.414 cv
187.159 101.414 187.816 102.071 187.816 102.884 cv
cp
ef
181.245 106.101 mo
181.245 106.912 180.586 107.571 179.775 107.571 cv
178.963 107.571 178.306 106.912 178.306 106.101 cv
178.306 105.288 178.963 104.63 179.775 104.63 cv
180.586 104.63 181.245 105.288 181.245 106.101 cv
cp
ef
178.028 106.101 mo
178.028 106.912 177.369 107.571 176.559 107.571 cv
175.746 107.571 175.089 106.912 175.089 106.101 cv
175.089 105.288 175.746 104.63 176.559 104.63 cv
177.369 104.63 178.028 105.288 178.028 106.101 cv
cp
ef
184.568 106.101 mo
184.568 106.912 183.91 107.571 183.098 107.571 cv
182.285 107.571 181.628 106.912 181.628 106.101 cv
181.628 105.288 182.285 104.63 183.098 104.63 cv
183.91 104.63 184.568 105.288 184.568 106.101 cv
cp
ef
187.816 106.101 mo
187.816 106.912 187.159 107.571 186.347 107.571 cv
185.535 107.571 184.876 106.912 184.876 106.101 cv
184.876 105.288 185.535 104.63 186.347 104.63 cv
187.159 104.63 187.816 105.288 187.816 106.101 cv
cp
ef
181.247 109.275 mo
181.247 110.087 180.588 110.744 179.775 110.744 cv
178.965 110.744 178.306 110.087 178.306 109.275 cv
178.306 108.463 178.965 107.804 179.775 107.804 cv
180.588 107.804 181.247 108.463 181.247 109.275 cv
cp
ef
178.028 109.275 mo
178.028 110.087 177.371 110.744 176.559 110.744 cv
175.748 110.744 175.089 110.087 175.089 109.275 cv
175.089 108.463 175.748 107.804 176.559 107.804 cv
177.371 107.804 178.028 108.463 178.028 109.275 cv
cp
ef
184.569 109.275 mo
184.569 110.087 183.91 110.744 183.098 110.744 cv
182.287 110.744 181.628 110.087 181.628 109.275 cv
181.628 108.463 182.287 107.804 183.098 107.804 cv
183.91 107.804 184.569 108.463 184.569 109.275 cv
cp
ef
187.816 109.275 mo
187.816 110.087 187.159 110.744 186.347 110.744 cv
185.535 110.744 184.876 110.087 184.876 109.275 cv
184.876 108.463 185.535 107.804 186.347 107.804 cv
187.159 107.804 187.816 108.463 187.816 109.275 cv
cp
ef
168.206 109.275 mo
168.206 110.087 167.547 110.744 166.734 110.744 cv
165.924 110.744 165.265 110.087 165.265 109.275 cv
165.265 108.463 165.924 107.804 166.734 107.804 cv
167.547 107.804 168.206 108.463 168.206 109.275 cv
cp
ef
164.988 109.275 mo
164.988 110.087 164.33 110.744 163.518 110.744 cv
162.705 110.744 162.048 110.087 162.048 109.275 cv
162.048 108.463 162.705 107.804 163.518 107.804 cv
164.33 107.804 164.988 108.463 164.988 109.275 cv
cp
ef
171.529 109.275 mo
171.529 110.087 170.87 110.744 170.058 110.744 cv
169.246 110.744 168.587 110.087 168.587 109.275 cv
168.587 108.463 169.246 107.804 170.058 107.804 cv
170.87 107.804 171.529 108.463 171.529 109.275 cv
cp
ef
174.775 109.275 mo
174.775 110.087 174.118 110.744 173.306 110.744 cv
172.495 110.744 171.836 110.087 171.836 109.275 cv
171.836 108.463 172.495 107.804 173.306 107.804 cv
174.118 107.804 174.775 108.463 174.775 109.275 cv
cp
ef
181.247 112.363 mo
181.247 113.175 180.588 113.833 179.775 113.833 cv
178.965 113.833 178.306 113.175 178.306 112.363 cv
178.306 111.551 178.965 110.892 179.775 110.892 cv
180.588 110.892 181.247 111.551 181.247 112.363 cv
cp
ef
178.028 112.363 mo
178.028 113.175 177.371 113.833 176.559 113.833 cv
175.748 113.833 175.089 113.175 175.089 112.363 cv
175.089 111.551 175.748 110.892 176.559 110.892 cv
177.371 110.892 178.028 111.551 178.028 112.363 cv
cp
ef
184.569 112.363 mo
184.569 113.175 183.91 113.833 183.098 113.833 cv
182.287 113.833 181.628 113.175 181.628 112.363 cv
181.628 111.551 182.287 110.892 183.098 110.892 cv
183.91 110.892 184.569 111.551 184.569 112.363 cv
cp
ef
168.206 112.363 mo
168.206 113.175 167.547 113.833 166.734 113.833 cv
165.924 113.833 165.265 113.175 165.265 112.363 cv
165.265 111.551 165.924 110.892 166.734 110.892 cv
167.547 110.892 168.206 111.551 168.206 112.363 cv
cp
ef
164.988 112.363 mo
164.988 113.175 164.33 113.833 163.518 113.833 cv
162.705 113.833 162.048 113.175 162.048 112.363 cv
162.048 111.551 162.705 110.892 163.518 110.892 cv
164.33 110.892 164.988 111.551 164.988 112.363 cv
cp
ef
171.529 112.363 mo
171.529 113.175 170.87 113.833 170.058 113.833 cv
169.246 113.833 168.587 113.175 168.587 112.363 cv
168.587 111.551 169.246 110.892 170.058 110.892 cv
170.87 110.892 171.529 111.551 171.529 112.363 cv
cp
ef
174.775 112.363 mo
174.775 113.175 174.118 113.833 173.306 113.833 cv
172.495 113.833 171.836 113.175 171.836 112.363 cv
171.836 111.551 172.495 110.892 173.306 110.892 cv
174.118 110.892 174.775 111.551 174.775 112.363 cv
cp
ef
181.375 115.58 mo
181.375 116.392 180.716 117.049 179.905 117.049 cv
179.093 117.049 178.435 116.392 178.435 115.58 cv
178.435 114.767 179.093 114.108 179.905 114.108 cv
180.716 114.108 181.375 114.767 181.375 115.58 cv
cp
ef
178.158 115.58 mo
178.158 116.392 177.499 117.049 176.688 117.049 cv
175.876 117.049 175.217 116.392 175.217 115.58 cv
175.217 114.767 175.876 114.108 176.688 114.108 cv
177.499 114.108 178.158 114.767 178.158 115.58 cv
cp
ef
168.334 115.58 mo
168.334 116.392 167.675 117.049 166.864 117.049 cv
166.052 117.049 165.393 116.392 165.393 115.58 cv
165.393 114.767 166.052 114.108 166.864 114.108 cv
167.675 114.108 168.334 114.767 168.334 115.58 cv
cp
ef
165.117 115.58 mo
165.117 116.392 164.458 117.049 163.647 117.049 cv
162.835 117.049 162.176 116.392 162.176 115.58 cv
162.176 114.767 162.835 114.108 163.647 114.108 cv
164.458 114.108 165.117 114.767 165.117 115.58 cv
cp
ef
171.657 115.58 mo
171.657 116.392 170.998 117.049 170.187 117.049 cv
169.374 117.049 168.717 116.392 168.717 115.58 cv
168.717 114.767 169.374 114.108 170.187 114.108 cv
170.998 114.108 171.657 114.767 171.657 115.58 cv
cp
ef
174.905 115.58 mo
174.905 116.392 174.246 117.049 173.436 117.049 cv
172.623 117.049 171.964 116.392 171.964 115.58 cv
171.964 114.767 172.623 114.108 173.436 114.108 cv
174.246 114.108 174.905 114.767 174.905 115.58 cv
cp
ef
187.773 99.582 mo
187.773 100.394 187.116 101.052 186.304 101.052 cv
185.493 101.052 184.834 100.394 184.834 99.582 cv
184.834 98.7695 185.493 98.1113 186.304 98.1113 cv
187.116 98.1113 187.773 98.7695 187.773 99.582 cv
cp
ef
178.147 83.4985 mo
178.147 84.3101 177.488 84.9678 176.677 84.9678 cv
175.865 84.9678 175.207 84.3101 175.207 83.4985 cv
175.207 82.686 175.865 82.0273 176.677 82.0273 cv
177.488 82.0273 178.147 82.686 178.147 83.4985 cv
cp
ef
181.465 83.4985 mo
181.465 84.3101 180.808 84.9678 179.995 84.9678 cv
179.185 84.9678 178.525 84.3101 178.525 83.4985 cv
178.525 82.686 179.185 82.0273 179.995 82.0273 cv
180.808 82.0273 181.465 82.686 181.465 83.4985 cv
cp
ef
184.772 83.4985 mo
184.772 84.3101 184.113 84.9678 183.301 84.9678 cv
182.489 84.9678 181.83 84.3101 181.83 83.4985 cv
181.83 82.686 182.489 82.0273 183.301 82.0273 cv
184.113 82.0273 184.772 82.686 184.772 83.4985 cv
cp
ef
111.618 80.3423 mo
111.618 81.1543 110.959 81.8115 110.148 81.8115 cv
109.336 81.8115 108.678 81.1543 108.678 80.3423 cv
108.678 79.5293 109.336 78.8716 110.148 78.8716 cv
110.959 78.8716 111.618 79.5293 111.618 80.3423 cv
cp
ef
108.394 80.3423 mo
108.394 81.1543 107.734 81.8115 106.924 81.8115 cv
106.111 81.8115 105.453 81.1543 105.453 80.3423 cv
105.453 79.5293 106.111 78.8716 106.924 78.8716 cv
107.734 78.8716 108.394 79.5293 108.394 80.3423 cv
cp
ef
114.813 80.3423 mo
114.813 81.1543 114.155 81.8115 113.343 81.8115 cv
112.53 81.8115 111.873 81.1543 111.873 80.3423 cv
111.873 79.5293 112.53 78.8716 113.343 78.8716 cv
114.155 78.8716 114.813 79.5293 114.813 80.3423 cv
cp
ef
117.934 80.3423 mo
117.934 81.1543 117.274 81.8115 116.462 81.8115 cv
115.65 81.8115 114.991 81.1543 114.991 80.3423 cv
114.991 79.5293 115.65 78.8716 116.462 78.8716 cv
117.274 78.8716 117.934 79.5293 117.934 80.3423 cv
cp
ef
121.13 80.3423 mo
121.13 81.1543 120.472 81.8115 119.659 81.8115 cv
118.847 81.8115 118.189 81.1543 118.189 80.3423 cv
118.189 79.5293 118.847 78.8716 119.659 78.8716 cv
120.472 78.8716 121.13 79.5293 121.13 80.3423 cv
cp
ef
124.449 80.3423 mo
124.449 81.1543 123.79 81.8115 122.979 81.8115 cv
122.166 81.8115 121.509 81.1543 121.509 80.3423 cv
121.509 79.5293 122.166 78.8716 122.979 78.8716 cv
123.79 78.8716 124.449 79.5293 124.449 80.3423 cv
cp
ef
111.618 83.5005 mo
111.618 84.3125 110.959 84.9707 110.148 84.9707 cv
109.336 84.9707 108.678 84.3125 108.678 83.5005 cv
108.678 82.688 109.336 82.0298 110.148 82.0298 cv
110.959 82.0298 111.618 82.688 111.618 83.5005 cv
cp
ef
108.394 83.5005 mo
108.394 84.3125 107.734 84.9707 106.924 84.9707 cv
106.111 84.9707 105.453 84.3125 105.453 83.5005 cv
105.453 82.688 106.111 82.0298 106.924 82.0298 cv
107.734 82.0298 108.394 82.688 108.394 83.5005 cv
cp
ef
105.069 83.5005 mo
105.069 84.3125 104.41 84.9707 103.6 84.9707 cv
102.787 84.9707 102.129 84.3125 102.129 83.5005 cv
102.129 82.688 102.787 82.0298 103.6 82.0298 cv
104.41 82.0298 105.069 82.688 105.069 83.5005 cv
cp
ef
114.813 83.5005 mo
114.813 84.3125 114.155 84.9707 113.343 84.9707 cv
112.53 84.9707 111.873 84.3125 111.873 83.5005 cv
111.873 82.688 112.53 82.0298 113.343 82.0298 cv
114.155 82.0298 114.813 82.688 114.813 83.5005 cv
cp
ef
111.618 86.6924 mo
111.618 87.5039 110.959 88.1621 110.148 88.1621 cv
109.336 88.1621 108.678 87.5039 108.678 86.6924 cv
108.678 85.8799 109.336 85.2212 110.148 85.2212 cv
110.959 85.2212 111.618 85.8799 111.618 86.6924 cv
cp
ef
108.394 86.6924 mo
108.394 87.5039 107.734 88.1621 106.924 88.1621 cv
106.111 88.1621 105.453 87.5039 105.453 86.6924 cv
105.453 85.8799 106.111 85.2212 106.924 85.2212 cv
107.734 85.2212 108.394 85.8799 108.394 86.6924 cv
cp
ef
105.069 86.6924 mo
105.069 87.5039 104.41 88.1621 103.6 88.1621 cv
102.787 88.1621 102.129 87.5039 102.129 86.6924 cv
102.129 85.8799 102.787 85.2212 103.6 85.2212 cv
104.41 85.2212 105.069 85.8799 105.069 86.6924 cv
cp
ef
114.813 86.6924 mo
114.813 87.5039 114.155 88.1621 113.343 88.1621 cv
112.53 88.1621 111.873 87.5039 111.873 86.6924 cv
111.873 85.8799 112.53 85.2212 113.343 85.2212 cv
114.155 85.2212 114.813 85.8799 114.813 86.6924 cv
cp
ef
108.427 89.917 mo
108.427 90.7285 107.768 91.3867 106.957 91.3867 cv
106.145 91.3867 105.486 90.7285 105.486 89.917 cv
105.486 89.1045 106.145 88.4468 106.957 88.4468 cv
107.768 88.4468 108.427 89.1045 108.427 89.917 cv
cp
ef
105.202 89.917 mo
105.202 90.7285 104.543 91.3867 103.732 91.3867 cv
102.92 91.3867 102.262 90.7285 102.262 89.917 cv
102.262 89.1045 102.92 88.4468 103.732 88.4468 cv
104.543 88.4468 105.202 89.1045 105.202 89.917 cv
cp
ef
101.878 89.917 mo
101.878 90.7285 101.219 91.3867 100.408 91.3867 cv
99.5957 91.3867 98.9375 90.7285 98.9375 89.917 cv
98.9375 89.1045 99.5957 88.4468 100.408 88.4468 cv
101.219 88.4468 101.878 89.1045 101.878 89.917 cv
cp
ef
111.621 89.917 mo
111.621 90.7285 110.964 91.3867 110.151 91.3867 cv
109.339 91.3867 108.682 90.7285 108.682 89.917 cv
108.682 89.1045 109.339 88.4468 110.151 88.4468 cv
110.964 88.4468 111.621 89.1045 111.621 89.917 cv
cp
ef
108.36 93.1094 mo
108.36 93.9209 107.701 94.5781 106.891 94.5781 cv
106.078 94.5781 105.42 93.9209 105.42 93.1094 cv
105.42 92.2969 106.078 91.6387 106.891 91.6387 cv
107.701 91.6387 108.36 92.2969 108.36 93.1094 cv
cp
ef
105.136 93.1094 mo
105.136 93.9209 104.477 94.5781 103.666 94.5781 cv
102.854 94.5781 102.195 93.9209 102.195 93.1094 cv
102.195 92.2969 102.854 91.6387 103.666 91.6387 cv
104.477 91.6387 105.136 92.2969 105.136 93.1094 cv
cp
ef
101.812 93.1094 mo
101.812 93.9209 101.152 94.5781 100.342 94.5781 cv
99.5293 94.5781 98.8711 93.9209 98.8711 93.1094 cv
98.8711 92.2969 99.5293 91.6387 100.342 91.6387 cv
101.152 91.6387 101.812 92.2969 101.812 93.1094 cv
cp
ef
111.555 93.1094 mo
111.555 93.9209 110.897 94.5781 110.085 94.5781 cv
109.272 94.5781 108.615 93.9209 108.615 93.1094 cv
108.615 92.2969 109.272 91.6387 110.085 91.6387 cv
110.897 91.6387 111.555 92.2969 111.555 93.1094 cv
cp
ef
121.161 93.1094 mo
121.161 93.9209 120.502 94.5781 119.689 94.5781 cv
118.879 94.5781 118.22 93.9209 118.22 93.1094 cv
118.22 92.2969 118.879 91.6387 119.689 91.6387 cv
120.502 91.6387 121.161 92.2969 121.161 93.1094 cv
cp
ef
117.935 93.1094 mo
117.935 93.9209 117.277 94.5781 116.465 94.5781 cv
115.654 94.5781 114.995 93.9209 114.995 93.1094 cv
114.995 92.2969 115.654 91.6387 116.465 91.6387 cv
117.277 91.6387 117.935 92.2969 117.935 93.1094 cv
cp
ef
114.61 93.1094 mo
114.61 93.9209 113.951 94.5781 113.141 94.5781 cv
112.328 94.5781 111.671 93.9209 111.671 93.1094 cv
111.671 92.2969 112.328 91.6387 113.141 91.6387 cv
113.951 91.6387 114.61 92.2969 114.61 93.1094 cv
cp
ef
124.354 93.1094 mo
124.354 93.9209 123.696 94.5781 122.884 94.5781 cv
122.071 94.5781 121.414 93.9209 121.414 93.1094 cv
121.414 92.2969 122.071 91.6387 122.884 91.6387 cv
123.696 91.6387 124.354 92.2969 124.354 93.1094 cv
cp
ef
108.36 96.2676 mo
108.36 97.0791 107.701 97.7363 106.891 97.7363 cv
106.078 97.7363 105.42 97.0791 105.42 96.2676 cv
105.42 95.4541 106.078 94.7969 106.891 94.7969 cv
107.701 94.7969 108.36 95.4541 108.36 96.2676 cv
cp
ef
105.136 96.2676 mo
105.136 97.0791 104.477 97.7363 103.666 97.7363 cv
102.854 97.7363 102.195 97.0791 102.195 96.2676 cv
102.195 95.4541 102.854 94.7969 103.666 94.7969 cv
104.477 94.7969 105.136 95.4541 105.136 96.2676 cv
cp
ef
101.812 96.2676 mo
101.812 97.0791 101.152 97.7363 100.342 97.7363 cv
99.5293 97.7363 98.8711 97.0791 98.8711 96.2676 cv
98.8711 95.4541 99.5293 94.7969 100.342 94.7969 cv
101.152 94.7969 101.812 95.4541 101.812 96.2676 cv
cp
ef
111.555 96.2676 mo
111.555 97.0791 110.897 97.7363 110.085 97.7363 cv
109.272 97.7363 108.615 97.0791 108.615 96.2676 cv
108.615 95.4541 109.272 94.7969 110.085 94.7969 cv
110.897 94.7969 111.555 95.4541 111.555 96.2676 cv
cp
ef
121.161 96.2676 mo
121.161 97.0791 120.502 97.7363 119.689 97.7363 cv
118.879 97.7363 118.22 97.0791 118.22 96.2676 cv
118.22 95.4541 118.879 94.7969 119.689 94.7969 cv
120.502 94.7969 121.161 95.4541 121.161 96.2676 cv
cp
ef
117.935 96.2676 mo
117.935 97.0791 117.277 97.7363 116.465 97.7363 cv
115.654 97.7363 114.995 97.0791 114.995 96.2676 cv
114.995 95.4541 115.654 94.7969 116.465 94.7969 cv
117.277 94.7969 117.935 95.4541 117.935 96.2676 cv
cp
ef
114.61 96.2676 mo
114.61 97.0791 113.951 97.7363 113.141 97.7363 cv
112.328 97.7363 111.671 97.0791 111.671 96.2676 cv
111.671 95.4541 112.328 94.7969 113.141 94.7969 cv
113.951 94.7969 114.61 95.4541 114.61 96.2676 cv
cp
ef
124.354 96.2676 mo
124.354 97.0791 123.696 97.7363 122.884 97.7363 cv
122.071 97.7363 121.414 97.0791 121.414 96.2676 cv
121.414 95.4541 122.071 94.7969 122.884 94.7969 cv
123.696 94.7969 124.354 95.4541 124.354 96.2676 cv
cp
ef
108.228 99.5254 mo
108.228 100.337 107.568 100.994 106.758 100.994 cv
105.945 100.994 105.287 100.337 105.287 99.5254 cv
105.287 98.7119 105.945 98.0547 106.758 98.0547 cv
107.568 98.0547 108.228 98.7119 108.228 99.5254 cv
cp
ef
105.003 99.5254 mo
105.003 100.337 104.344 100.994 103.533 100.994 cv
102.721 100.994 102.062 100.337 102.062 99.5254 cv
102.062 98.7119 102.721 98.0547 103.533 98.0547 cv
104.344 98.0547 105.003 98.7119 105.003 99.5254 cv
cp
ef
101.679 99.5254 mo
101.679 100.337 101.02 100.994 100.209 100.994 cv
99.3965 100.994 98.7373 100.337 98.7373 99.5254 cv
98.7373 98.7119 99.3965 98.0547 100.209 98.0547 cv
101.02 98.0547 101.679 98.7119 101.679 99.5254 cv
cp
ef
111.422 99.5254 mo
111.422 100.337 110.764 100.994 109.951 100.994 cv
109.14 100.994 108.48 100.337 108.48 99.5254 cv
108.48 98.7119 109.14 98.0547 109.951 98.0547 cv
110.764 98.0547 111.422 98.7119 111.422 99.5254 cv
cp
ef
108.526 102.85 mo
108.526 103.661 107.867 104.318 107.057 104.318 cv
106.244 104.318 105.586 103.661 105.586 102.85 cv
105.586 102.037 106.244 101.379 107.057 101.379 cv
107.867 101.379 108.526 102.037 108.526 102.85 cv
cp
ef
105.302 102.85 mo
105.302 103.661 104.643 104.318 103.832 104.318 cv
103.02 104.318 102.361 103.661 102.361 102.85 cv
102.361 102.037 103.02 101.379 103.832 101.379 cv
104.643 101.379 105.302 102.037 105.302 102.85 cv
cp
ef
101.978 102.85 mo
101.978 103.661 101.318 104.318 100.508 104.318 cv
99.6953 104.318 99.0371 103.661 99.0371 102.85 cv
99.0371 102.037 99.6953 101.379 100.508 101.379 cv
101.318 101.379 101.978 102.037 101.978 102.85 cv
cp
ef
111.721 102.85 mo
111.721 103.661 111.063 104.318 110.251 104.318 cv
109.438 104.318 108.781 103.661 108.781 102.85 cv
108.781 102.037 109.438 101.379 110.251 101.379 cv
111.063 101.379 111.721 102.037 111.721 102.85 cv
cp
ef
111.651 106.107 mo
111.651 106.919 110.992 107.577 110.182 107.577 cv
109.369 107.577 108.711 106.919 108.711 106.107 cv
108.711 105.295 109.369 104.637 110.182 104.637 cv
110.992 104.637 111.651 105.295 111.651 106.107 cv
cp
ef
108.427 106.107 mo
108.427 106.919 107.768 107.577 106.957 107.577 cv
106.145 107.577 105.486 106.919 105.486 106.107 cv
105.486 105.295 106.145 104.637 106.957 104.637 cv
107.768 104.637 108.427 105.295 108.427 106.107 cv
cp
ef
105.103 106.107 mo
105.103 106.919 104.443 107.577 103.633 107.577 cv
102.82 107.577 102.162 106.919 102.162 106.107 cv
102.162 105.295 102.82 104.637 103.633 104.637 cv
104.443 104.637 105.103 105.295 105.103 106.107 cv
cp
ef
114.846 106.107 mo
114.846 106.919 114.188 107.577 113.376 107.577 cv
112.563 107.577 111.906 106.919 111.906 106.107 cv
111.906 105.295 112.563 104.637 113.376 104.637 cv
114.188 104.637 114.846 105.295 114.846 106.107 cv
cp
ef
111.651 109.199 mo
111.651 110.012 110.992 110.669 110.182 110.669 cv
109.369 110.669 108.711 110.012 108.711 109.199 cv
108.711 108.387 109.369 107.729 110.182 107.729 cv
110.992 107.729 111.651 108.387 111.651 109.199 cv
cp
ef
108.427 109.199 mo
108.427 110.012 107.768 110.669 106.957 110.669 cv
106.145 110.669 105.486 110.012 105.486 109.199 cv
105.486 108.387 106.145 107.729 106.957 107.729 cv
107.768 107.729 108.427 108.387 108.427 109.199 cv
cp
ef
105.103 109.199 mo
105.103 110.012 104.443 110.669 103.633 110.669 cv
102.82 110.669 102.162 110.012 102.162 109.199 cv
102.162 108.387 102.82 107.729 103.633 107.729 cv
104.443 107.729 105.103 108.387 105.103 109.199 cv
cp
ef
114.846 109.199 mo
114.846 110.012 114.188 110.669 113.376 110.669 cv
112.563 110.669 111.906 110.012 111.906 109.199 cv
111.906 108.387 112.563 107.729 113.376 107.729 cv
114.188 107.729 114.846 108.387 114.846 109.199 cv
cp
ef
121.194 109.199 mo
121.194 110.012 120.535 110.669 119.725 110.669 cv
118.912 110.669 118.253 110.012 118.253 109.199 cv
118.253 108.387 118.912 107.729 119.725 107.729 cv
120.535 107.729 121.194 108.387 121.194 109.199 cv
cp
ef
117.97 109.199 mo
117.97 110.012 117.311 110.669 116.5 110.669 cv
115.688 110.669 115.028 110.012 115.028 109.199 cv
115.028 108.387 115.688 107.729 116.5 107.729 cv
117.311 107.729 117.97 108.387 117.97 109.199 cv
cp
ef
124.389 109.199 mo
124.389 110.012 123.729 110.669 122.917 110.669 cv
122.106 110.669 121.447 110.012 121.447 109.199 cv
121.447 108.387 122.106 107.729 122.917 107.729 cv
123.729 107.729 124.389 108.387 124.389 109.199 cv
cp
ef
114.743 112.358 mo
114.743 113.17 114.084 113.828 113.273 113.828 cv
112.461 113.828 111.804 113.17 111.804 112.358 cv
111.804 111.546 112.461 110.888 113.273 110.888 cv
114.084 110.888 114.743 111.546 114.743 112.358 cv
cp
ef
111.519 112.358 mo
111.519 113.17 110.859 113.828 110.049 113.828 cv
109.236 113.828 108.579 113.17 108.579 112.358 cv
108.579 111.546 109.236 110.888 110.049 110.888 cv
110.859 110.888 111.519 111.546 111.519 112.358 cv
cp
ef
108.194 112.358 mo
108.194 113.17 107.535 113.828 106.725 113.828 cv
105.912 113.828 105.254 113.17 105.254 112.358 cv
105.254 111.546 105.912 110.888 106.725 110.888 cv
107.535 110.888 108.194 111.546 108.194 112.358 cv
cp
ef
117.938 112.358 mo
117.938 113.17 117.28 113.828 116.468 113.828 cv
115.655 113.828 114.998 113.17 114.998 112.358 cv
114.998 111.546 115.655 110.888 116.468 110.888 cv
117.28 110.888 117.938 111.546 117.938 112.358 cv
cp
ef
124.286 112.358 mo
124.286 113.17 123.627 113.828 122.816 113.828 cv
122.004 113.828 121.346 113.17 121.346 112.358 cv
121.346 111.546 122.004 110.888 122.816 110.888 cv
123.627 110.888 124.286 111.546 124.286 112.358 cv
cp
ef
121.062 112.358 mo
121.062 113.17 120.402 113.828 119.592 113.828 cv
118.779 113.828 118.121 113.17 118.121 112.358 cv
118.121 111.546 118.779 110.888 119.592 110.888 cv
120.402 110.888 121.062 111.546 121.062 112.358 cv
cp
ef
114.743 115.517 mo
114.743 116.328 114.084 116.985 113.273 116.985 cv
112.461 116.985 111.804 116.328 111.804 115.517 cv
111.804 114.704 112.461 114.046 113.273 114.046 cv
114.084 114.046 114.743 114.704 114.743 115.517 cv
cp
ef
118.07 115.517 mo
118.07 116.328 117.413 116.985 116.601 116.985 cv
115.788 116.985 115.131 116.328 115.131 115.517 cv
115.131 114.704 115.788 114.046 116.601 114.046 cv
117.413 114.046 118.07 114.704 118.07 115.517 cv
cp
ef
124.419 115.517 mo
124.419 116.328 123.76 116.985 122.949 116.985 cv
122.137 116.985 121.479 116.328 121.479 115.517 cv
121.479 114.704 122.137 114.046 122.949 114.046 cv
123.76 114.046 124.419 114.704 124.419 115.517 cv
cp
ef
121.294 115.517 mo
121.294 116.328 120.635 116.985 119.824 116.985 cv
119.012 116.985 118.354 116.328 118.354 115.517 cv
118.354 114.704 119.012 114.046 119.824 114.046 cv
120.635 114.046 121.294 114.704 121.294 115.517 cv
cp
ef
121.026 99.5254 mo
121.026 100.337 120.367 100.994 119.557 100.994 cv
118.744 100.994 118.087 100.337 118.087 99.5254 cv
118.087 98.7119 118.744 98.0547 119.557 98.0547 cv
120.367 98.0547 121.026 98.7119 121.026 99.5254 cv
cp
ef
117.802 99.5254 mo
117.802 100.337 117.143 100.994 116.332 100.994 cv
115.52 100.994 114.862 100.337 114.862 99.5254 cv
114.862 98.7119 115.52 98.0547 116.332 98.0547 cv
117.143 98.0547 117.802 98.7119 117.802 99.5254 cv
cp
ef
114.478 99.5254 mo
114.478 100.337 113.818 100.994 113.008 100.994 cv
112.195 100.994 111.538 100.337 111.538 99.5254 cv
111.538 98.7119 112.195 98.0547 113.008 98.0547 cv
113.818 98.0547 114.478 98.7119 114.478 99.5254 cv
cp
ef
124.222 99.5254 mo
124.222 100.337 123.563 100.994 122.751 100.994 cv
121.938 100.994 121.281 100.337 121.281 99.5254 cv
121.281 98.7119 121.938 98.0547 122.751 98.0547 cv
123.563 98.0547 124.222 98.7119 124.222 99.5254 cv
cp
ef
117.934 83.5005 mo
117.934 84.3125 117.274 84.9707 116.462 84.9707 cv
115.65 84.9707 114.991 84.3125 114.991 83.5005 cv
114.991 82.688 115.65 82.0298 116.462 82.0298 cv
117.274 82.0298 117.934 82.688 117.934 83.5005 cv
cp
ef
121.13 83.5005 mo
121.13 84.3125 120.472 84.9707 119.659 84.9707 cv
118.847 84.9707 118.189 84.3125 118.189 83.5005 cv
118.189 82.688 118.847 82.0298 119.659 82.0298 cv
120.472 82.0298 121.13 82.688 121.13 83.5005 cv
cp
ef
124.449 83.5005 mo
124.449 84.3125 123.79 84.9707 122.979 84.9707 cv
122.166 84.9707 121.509 84.3125 121.509 83.5005 cv
121.509 82.688 122.166 82.0298 122.979 82.0298 cv
123.79 82.0298 124.449 82.688 124.449 83.5005 cv
cp
ef
79.0283 80.0991 mo
79.0283 80.9106 78.3691 81.5684 77.5586 81.5684 cv
76.7461 81.5684 76.0874 80.9106 76.0874 80.0991 cv
76.0874 79.2866 76.7461 78.6279 77.5586 78.6279 cv
78.3691 78.6279 79.0283 79.2866 79.0283 80.0991 cv
cp
ef
82.3545 80.0991 mo
82.3545 80.9106 81.6973 81.5684 80.8848 81.5684 cv
80.0737 81.5684 79.4146 80.9106 79.4146 80.0991 cv
79.4146 79.2866 80.0737 78.6279 80.8848 78.6279 cv
81.6973 78.6279 82.3545 79.2866 82.3545 80.0991 cv
cp
ef
85.6411 80.0991 mo
85.6411 80.9106 84.9834 81.5684 84.1709 81.5684 cv
83.3584 81.5684 82.7007 80.9106 82.7007 80.0991 cv
82.7007 79.2866 83.3584 78.6279 84.1709 78.6279 cv
84.9834 78.6279 85.6411 79.2866 85.6411 80.0991 cv
cp
ef
79.0283 83.27 mo
79.0283 84.0815 78.3691 84.7393 77.5586 84.7393 cv
76.7461 84.7393 76.0874 84.0815 76.0874 83.27 cv
76.0874 82.4565 76.7461 81.7988 77.5586 81.7988 cv
78.3691 81.7988 79.0283 82.4565 79.0283 83.27 cv
cp
ef
82.3545 83.27 mo
82.3545 84.0815 81.6973 84.7393 80.8848 84.7393 cv
80.0737 84.7393 79.4146 84.0815 79.4146 83.27 cv
79.4146 82.4565 80.0737 81.7988 80.8848 81.7988 cv
81.6973 81.7988 82.3545 82.4565 82.3545 83.27 cv
cp
ef
85.6411 83.27 mo
85.6411 84.0815 84.9834 84.7393 84.1709 84.7393 cv
83.3584 84.7393 82.7007 84.0815 82.7007 83.27 cv
82.7007 82.4565 83.3584 81.7988 84.1709 81.7988 cv
84.9834 81.7988 85.6411 82.4565 85.6411 83.27 cv
cp
ef
79.0283 86.4243 mo
79.0283 87.2358 78.3691 87.894 77.5586 87.894 cv
76.7461 87.894 76.0874 87.2358 76.0874 86.4243 cv
76.0874 85.6118 76.7461 84.9531 77.5586 84.9531 cv
78.3691 84.9531 79.0283 85.6118 79.0283 86.4243 cv
cp
ef
82.3545 86.4243 mo
82.3545 87.2358 81.6973 87.894 80.8848 87.894 cv
80.0737 87.894 79.4146 87.2358 79.4146 86.4243 cv
79.4146 85.6118 80.0737 84.9531 80.8848 84.9531 cv
81.6973 84.9531 82.3545 85.6118 82.3545 86.4243 cv
cp
ef
85.6411 86.4243 mo
85.6411 87.2358 84.9834 87.894 84.1709 87.894 cv
83.3584 87.894 82.7007 87.2358 82.7007 86.4243 cv
82.7007 85.6118 83.3584 84.9531 84.1709 84.9531 cv
84.9834 84.9531 85.6411 85.6118 85.6411 86.4243 cv
cp
ef
79.0283 89.5376 mo
79.0283 90.3491 78.3691 91.0078 77.5586 91.0078 cv
76.7461 91.0078 76.0874 90.3491 76.0874 89.5376 cv
76.0874 88.7251 76.7461 88.0664 77.5586 88.0664 cv
78.3691 88.0664 79.0283 88.7251 79.0283 89.5376 cv
cp
ef
82.3545 89.5376 mo
82.3545 90.3491 81.6973 91.0078 80.8848 91.0078 cv
80.0737 91.0078 79.4146 90.3491 79.4146 89.5376 cv
79.4146 88.7251 80.0737 88.0664 80.8848 88.0664 cv
81.6973 88.0664 82.3545 88.7251 82.3545 89.5376 cv
cp
ef
85.6411 89.5376 mo
85.6411 90.3491 84.9834 91.0078 84.1709 91.0078 cv
83.3584 91.0078 82.7007 90.3491 82.7007 89.5376 cv
82.7007 88.7251 83.3584 88.0664 84.1709 88.0664 cv
84.9834 88.0664 85.6411 88.7251 85.6411 89.5376 cv
cp
ef
79.0283 92.6582 mo
79.0283 93.4707 78.3691 94.1279 77.5586 94.1279 cv
76.7461 94.1279 76.0874 93.4707 76.0874 92.6582 cv
76.0874 91.8457 76.7461 91.1875 77.5586 91.1875 cv
78.3691 91.1875 79.0283 91.8457 79.0283 92.6582 cv
cp
ef
82.3545 92.6582 mo
82.3545 93.4707 81.6973 94.1279 80.8848 94.1279 cv
80.0737 94.1279 79.4146 93.4707 79.4146 92.6582 cv
79.4146 91.8457 80.0737 91.1875 80.8848 91.1875 cv
81.6973 91.1875 82.3545 91.8457 82.3545 92.6582 cv
cp
ef
85.6411 92.6582 mo
85.6411 93.4707 84.9834 94.1279 84.1709 94.1279 cv
83.3584 94.1279 82.7007 93.4707 82.7007 92.6582 cv
82.7007 91.8457 83.3584 91.1875 84.1709 91.1875 cv
84.9834 91.1875 85.6411 91.8457 85.6411 92.6582 cv
cp
ef
79.0283 95.9072 mo
79.0283 96.7188 78.3691 97.376 77.5586 97.376 cv
76.7461 97.376 76.0874 96.7188 76.0874 95.9072 cv
76.0874 95.0938 76.7461 94.4355 77.5586 94.4355 cv
78.3691 94.4355 79.0283 95.0938 79.0283 95.9072 cv
cp
ef
82.3545 95.9072 mo
82.3545 96.7188 81.6973 97.376 80.8848 97.376 cv
80.0737 97.376 79.4146 96.7188 79.4146 95.9072 cv
79.4146 95.0938 80.0737 94.4355 80.8848 94.4355 cv
81.6973 94.4355 82.3545 95.0938 82.3545 95.9072 cv
cp
ef
85.6411 95.9072 mo
85.6411 96.7188 84.9834 97.376 84.1709 97.376 cv
83.3584 97.376 82.7007 96.7188 82.7007 95.9072 cv
82.7007 95.0938 83.3584 94.4355 84.1709 94.4355 cv
84.9834 94.4355 85.6411 95.0938 85.6411 95.9072 cv
cp
ef
79.0283 99.1201 mo
79.0283 99.9316 78.3691 100.59 77.5586 100.59 cv
76.7461 100.59 76.0874 99.9316 76.0874 99.1201 cv
76.0874 98.3076 76.7461 97.6484 77.5586 97.6484 cv
78.3691 97.6484 79.0283 98.3076 79.0283 99.1201 cv
cp
ef
82.3545 99.1201 mo
82.3545 99.9316 81.6973 100.59 80.8848 100.59 cv
80.0737 100.59 79.4146 99.9316 79.4146 99.1201 cv
79.4146 98.3076 80.0737 97.6484 80.8848 97.6484 cv
81.6973 97.6484 82.3545 98.3076 82.3545 99.1201 cv
cp
ef
85.6411 99.1201 mo
85.6411 99.9316 84.9834 100.59 84.1709 100.59 cv
83.3584 100.59 82.7007 99.9316 82.7007 99.1201 cv
82.7007 98.3076 83.3584 97.6484 84.1709 97.6484 cv
84.9834 97.6484 85.6411 98.3076 85.6411 99.1201 cv
cp
ef
79.0283 102.391 mo
79.0283 103.202 78.3691 103.86 77.5586 103.86 cv
76.7461 103.86 76.0874 103.202 76.0874 102.391 cv
76.0874 101.578 76.7461 100.919 77.5586 100.919 cv
78.3691 100.919 79.0283 101.578 79.0283 102.391 cv
cp
ef
82.3545 102.391 mo
82.3545 103.202 81.6973 103.86 80.8848 103.86 cv
80.0737 103.86 79.4146 103.202 79.4146 102.391 cv
79.4146 101.578 80.0737 100.919 80.8848 100.919 cv
81.6973 100.919 82.3545 101.578 82.3545 102.391 cv
cp
ef
85.6411 102.391 mo
85.6411 103.202 84.9834 103.86 84.1709 103.86 cv
83.3584 103.86 82.7007 103.202 82.7007 102.391 cv
82.7007 101.578 83.3584 100.919 84.1709 100.919 cv
84.9834 100.919 85.6411 101.578 85.6411 102.391 cv
cp
ef
79.0283 105.673 mo
79.0283 106.484 78.3691 107.142 77.5586 107.142 cv
76.7461 107.142 76.0874 106.484 76.0874 105.673 cv
76.0874 104.859 76.7461 104.201 77.5586 104.201 cv
78.3691 104.201 79.0283 104.859 79.0283 105.673 cv
cp
ef
82.3545 105.673 mo
82.3545 106.484 81.6973 107.142 80.8848 107.142 cv
80.0737 107.142 79.4146 106.484 79.4146 105.673 cv
79.4146 104.859 80.0737 104.201 80.8848 104.201 cv
81.6973 104.201 82.3545 104.859 82.3545 105.673 cv
cp
ef
85.6411 105.673 mo
85.6411 106.484 84.9834 107.142 84.1709 107.142 cv
83.3584 107.142 82.7007 106.484 82.7007 105.673 cv
82.7007 104.859 83.3584 104.201 84.1709 104.201 cv
84.9834 104.201 85.6411 104.859 85.6411 105.673 cv
cp
ef
132.095 80.3994 mo
132.095 81.2109 131.436 81.8687 130.623 81.8687 cv
129.813 81.8687 129.153 81.2109 129.153 80.3994 cv
129.153 79.5869 129.813 78.9287 130.623 78.9287 cv
131.436 78.9287 132.095 79.5869 132.095 80.3994 cv
cp
ef
135.277 80.3994 mo
135.277 81.2109 134.617 81.8687 133.807 81.8687 cv
132.994 81.8687 132.337 81.2109 132.337 80.3994 cv
132.337 79.5869 132.994 78.9287 133.807 78.9287 cv
134.617 78.9287 135.277 79.5869 135.277 80.3994 cv
cp
ef
138.563 80.3994 mo
138.563 81.2109 137.904 81.8687 137.092 81.8687 cv
136.28 81.8687 135.621 81.2109 135.621 80.3994 cv
135.621 79.5869 136.28 78.9287 137.092 78.9287 cv
137.904 78.9287 138.563 79.5869 138.563 80.3994 cv
cp
ef
132.046 83.5283 mo
132.046 84.3398 131.389 84.9985 130.576 84.9985 cv
129.764 84.9985 129.105 84.3398 129.105 83.5283 cv
129.105 82.7158 129.764 82.0576 130.576 82.0576 cv
131.389 82.0576 132.046 82.7158 132.046 83.5283 cv
cp
ef
135.229 83.5283 mo
135.229 84.3398 134.57 84.9985 133.76 84.9985 cv
132.947 84.9985 132.288 84.3398 132.288 83.5283 cv
132.288 82.7158 132.947 82.0576 133.76 82.0576 cv
134.57 82.0576 135.229 82.7158 135.229 83.5283 cv
cp
ef
138.514 83.5283 mo
138.514 84.3398 137.856 84.9985 137.044 84.9985 cv
136.231 84.9985 135.574 84.3398 135.574 83.5283 cv
135.574 82.7158 136.231 82.0576 137.044 82.0576 cv
137.856 82.0576 138.514 82.7158 138.514 83.5283 cv
cp
ef
132.046 86.6992 mo
132.046 87.5107 131.389 88.1694 130.576 88.1694 cv
129.764 88.1694 129.105 87.5107 129.105 86.6992 cv
129.105 85.8867 129.764 85.2285 130.576 85.2285 cv
131.389 85.2285 132.046 85.8867 132.046 86.6992 cv
cp
ef
135.229 86.6992 mo
135.229 87.5107 134.57 88.1694 133.76 88.1694 cv
132.947 88.1694 132.288 87.5107 132.288 86.6992 cv
132.288 85.8867 132.947 85.2285 133.76 85.2285 cv
134.57 85.2285 135.229 85.8867 135.229 86.6992 cv
cp
ef
138.514 86.6992 mo
138.514 87.5107 137.856 88.1694 137.044 88.1694 cv
136.231 88.1694 135.574 87.5107 135.574 86.6992 cv
135.574 85.8867 136.231 85.2285 137.044 85.2285 cv
137.856 85.2285 138.514 85.8867 138.514 86.6992 cv
cp
ef
132.046 89.9507 mo
132.046 90.7627 131.389 91.4209 130.576 91.4209 cv
129.764 91.4209 129.105 90.7627 129.105 89.9507 cv
129.105 89.1382 129.764 88.48 130.576 88.48 cv
131.389 88.48 132.046 89.1382 132.046 89.9507 cv
cp
ef
135.229 89.9507 mo
135.229 90.7627 134.57 91.4209 133.76 91.4209 cv
132.947 91.4209 132.288 90.7627 132.288 89.9507 cv
132.288 89.1382 132.947 88.48 133.76 88.48 cv
134.57 88.48 135.229 89.1382 135.229 89.9507 cv
cp
ef
138.514 89.9507 mo
138.514 90.7627 137.856 91.4209 137.044 91.4209 cv
136.231 91.4209 135.574 90.7627 135.574 89.9507 cv
135.574 89.1382 136.231 88.48 137.044 88.48 cv
137.856 88.48 138.514 89.1382 138.514 89.9507 cv
cp
ef
132.046 93.25 mo
132.046 94.0615 131.389 94.7188 130.576 94.7188 cv
129.764 94.7188 129.105 94.0615 129.105 93.25 cv
129.105 92.4365 129.764 91.7793 130.576 91.7793 cv
131.389 91.7793 132.046 92.4365 132.046 93.25 cv
cp
ef
135.229 93.25 mo
135.229 94.0615 134.57 94.7188 133.76 94.7188 cv
132.947 94.7188 132.288 94.0615 132.288 93.25 cv
132.288 92.4365 132.947 91.7793 133.76 91.7793 cv
134.57 91.7793 135.229 92.4365 135.229 93.25 cv
cp
ef
138.514 93.25 mo
138.514 94.0615 137.856 94.7188 137.044 94.7188 cv
136.231 94.7188 135.574 94.0615 135.574 93.25 cv
135.574 92.4365 136.231 91.7793 137.044 91.7793 cv
137.856 91.7793 138.514 92.4365 138.514 93.25 cv
cp
ef
141.685 93.25 mo
141.685 94.0615 141.025 94.7188 140.215 94.7188 cv
139.402 94.7188 138.743 94.0615 138.743 93.25 cv
138.743 92.4365 139.402 91.7793 140.215 91.7793 cv
141.025 91.7793 141.685 92.4365 141.685 93.25 cv
cp
ef
144.867 93.25 mo
144.867 94.0615 144.208 94.7188 143.396 94.7188 cv
142.584 94.7188 141.927 94.0615 141.927 93.25 cv
141.927 92.4365 142.584 91.7793 143.396 91.7793 cv
144.208 91.7793 144.867 92.4365 144.867 93.25 cv
cp
ef
148.153 93.25 mo
148.153 94.0615 147.494 94.7188 146.682 94.7188 cv
145.871 94.7188 145.212 94.0615 145.212 93.25 cv
145.212 92.4365 145.871 91.7793 146.682 91.7793 cv
147.494 91.7793 148.153 92.4365 148.153 93.25 cv
cp
ef
151.434 93.25 mo
151.434 94.0615 150.775 94.7188 149.963 94.7188 cv
149.152 94.7188 148.493 94.0615 148.493 93.25 cv
148.493 92.4365 149.152 91.7793 149.963 91.7793 cv
150.775 91.7793 151.434 92.4365 151.434 93.25 cv
cp
ef
154.72 93.25 mo
154.72 94.0615 154.061 94.7188 153.25 94.7188 cv
152.438 94.7188 151.779 94.0615 151.779 93.25 cv
151.779 92.4365 152.438 91.7793 153.25 91.7793 cv
154.061 91.7793 154.72 92.4365 154.72 93.25 cv
cp
ef
141.685 96.3643 mo
141.685 97.1758 141.025 97.835 140.215 97.835 cv
139.402 97.835 138.743 97.1758 138.743 96.3643 cv
138.743 95.5518 139.402 94.8936 140.215 94.8936 cv
141.025 94.8936 141.685 95.5518 141.685 96.3643 cv
cp
ef
144.867 96.3643 mo
144.867 97.1758 144.208 97.835 143.396 97.835 cv
142.584 97.835 141.927 97.1758 141.927 96.3643 cv
141.927 95.5518 142.584 94.8936 143.396 94.8936 cv
144.208 94.8936 144.867 95.5518 144.867 96.3643 cv
cp
ef
148.153 96.3643 mo
148.153 97.1758 147.494 97.835 146.682 97.835 cv
145.871 97.835 145.212 97.1758 145.212 96.3643 cv
145.212 95.5518 145.871 94.8936 146.682 94.8936 cv
147.494 94.8936 148.153 95.5518 148.153 96.3643 cv
cp
ef
151.434 96.3643 mo
151.434 97.1758 150.775 97.835 149.963 97.835 cv
149.152 97.835 148.493 97.1758 148.493 96.3643 cv
148.493 95.5518 149.152 94.8936 149.963 94.8936 cv
150.775 94.8936 151.434 95.5518 151.434 96.3643 cv
cp
ef
154.72 96.3643 mo
154.72 97.1758 154.061 97.835 153.25 97.835 cv
152.438 97.835 151.779 97.1758 151.779 96.3643 cv
151.779 95.5518 152.438 94.8936 153.25 94.8936 cv
154.061 94.8936 154.72 95.5518 154.72 96.3643 cv
cp
ef
141.685 99.6289 mo
141.685 100.44 141.025 101.098 140.215 101.098 cv
139.402 101.098 138.743 100.44 138.743 99.6289 cv
138.743 98.8154 139.402 98.1582 140.215 98.1582 cv
141.025 98.1582 141.685 98.8154 141.685 99.6289 cv
cp
ef
144.867 99.6289 mo
144.867 100.44 144.208 101.098 143.396 101.098 cv
142.584 101.098 141.927 100.44 141.927 99.6289 cv
141.927 98.8154 142.584 98.1582 143.396 98.1582 cv
144.208 98.1582 144.867 98.8154 144.867 99.6289 cv
cp
ef
148.153 99.6289 mo
148.153 100.44 147.494 101.098 146.682 101.098 cv
145.871 101.098 145.212 100.44 145.212 99.6289 cv
145.212 98.8154 145.871 98.1582 146.682 98.1582 cv
147.494 98.1582 148.153 98.8154 148.153 99.6289 cv
cp
ef
151.434 99.6289 mo
151.434 100.44 150.775 101.098 149.963 101.098 cv
149.152 101.098 148.493 100.44 148.493 99.6289 cv
148.493 98.8154 149.152 98.1582 149.963 98.1582 cv
150.775 98.1582 151.434 98.8154 151.434 99.6289 cv
cp
ef
154.72 99.6289 mo
154.72 100.44 154.061 101.098 153.25 101.098 cv
152.438 101.098 151.779 100.44 151.779 99.6289 cv
151.779 98.8154 152.438 98.1582 153.25 98.1582 cv
154.061 98.1582 154.72 98.8154 154.72 99.6289 cv
cp
ef
157.924 99.6289 mo
157.924 100.44 157.266 101.098 156.453 101.098 cv
155.642 101.098 154.983 100.44 154.983 99.6289 cv
154.983 98.8154 155.642 98.1582 156.453 98.1582 cv
157.266 98.1582 157.924 98.8154 157.924 99.6289 cv
cp
ef
151.403 102.951 mo
151.403 103.763 150.746 104.422 149.934 104.422 cv
149.122 104.422 148.463 103.763 148.463 102.951 cv
148.463 102.139 149.122 101.48 149.934 101.48 cv
150.746 101.48 151.403 102.139 151.403 102.951 cv
cp
ef
154.571 102.951 mo
154.571 103.763 153.912 104.422 153.101 104.422 cv
152.288 104.422 151.629 103.763 151.629 102.951 cv
151.629 102.139 152.288 101.48 153.101 101.48 cv
153.912 101.48 154.571 102.139 154.571 102.951 cv
cp
ef
157.775 102.951 mo
157.775 103.763 157.116 104.422 156.305 104.422 cv
155.492 104.422 154.835 103.763 154.835 102.951 cv
154.835 102.139 155.492 101.48 156.305 101.48 cv
157.116 101.48 157.775 102.139 157.775 102.951 cv
cp
ef
151.403 106.186 mo
151.403 106.998 150.746 107.655 149.934 107.655 cv
149.122 107.655 148.463 106.998 148.463 106.186 cv
148.463 105.373 149.122 104.716 149.934 104.716 cv
150.746 104.716 151.403 105.373 151.403 106.186 cv
cp
ef
154.571 106.186 mo
154.571 106.998 153.912 107.655 153.101 107.655 cv
152.288 107.655 151.629 106.998 151.629 106.186 cv
151.629 105.373 152.288 104.716 153.101 104.716 cv
153.912 104.716 154.571 105.373 154.571 106.186 cv
cp
ef
157.775 106.186 mo
157.775 106.998 157.116 107.655 156.305 107.655 cv
155.492 107.655 154.835 106.998 154.835 106.186 cv
154.835 105.373 155.492 104.716 156.305 104.716 cv
157.116 104.716 157.775 105.373 157.775 106.186 cv
cp
ef
151.403 109.449 mo
151.403 110.262 150.746 110.919 149.934 110.919 cv
149.122 110.919 148.463 110.262 148.463 109.449 cv
148.463 108.637 149.122 107.979 149.934 107.979 cv
150.746 107.979 151.403 108.637 151.403 109.449 cv
cp
ef
154.571 109.449 mo
154.571 110.262 153.912 110.919 153.101 110.919 cv
152.288 110.919 151.629 110.262 151.629 109.449 cv
151.629 108.637 152.288 107.979 153.101 107.979 cv
153.912 107.979 154.571 108.637 154.571 109.449 cv
cp
ef
157.775 109.449 mo
157.775 110.262 157.116 110.919 156.305 110.919 cv
155.492 110.919 154.835 110.262 154.835 109.449 cv
154.835 108.637 155.492 107.979 156.305 107.979 cv
157.116 107.979 157.775 108.637 157.775 109.449 cv
cp
ef
151.403 112.476 mo
151.403 113.287 150.746 113.946 149.934 113.946 cv
149.122 113.946 148.463 113.287 148.463 112.476 cv
148.463 111.663 149.122 111.005 149.934 111.005 cv
150.746 111.005 151.403 111.663 151.403 112.476 cv
cp
ef
154.571 112.476 mo
154.571 113.287 153.912 113.946 153.101 113.946 cv
152.288 113.946 151.629 113.287 151.629 112.476 cv
151.629 111.663 152.288 111.005 153.101 111.005 cv
153.912 111.005 154.571 111.663 154.571 112.476 cv
cp
ef
157.775 112.476 mo
157.775 113.287 157.116 113.946 156.305 113.946 cv
155.492 113.946 154.835 113.287 154.835 112.476 cv
154.835 111.663 155.492 111.005 156.305 111.005 cv
157.116 111.005 157.775 111.663 157.775 112.476 cv
cp
ef
151.403 115.739 mo
151.403 116.551 150.746 117.209 149.934 117.209 cv
149.122 117.209 148.463 116.551 148.463 115.739 cv
148.463 114.927 149.122 114.269 149.934 114.269 cv
150.746 114.269 151.403 114.927 151.403 115.739 cv
cp
ef
154.571 115.739 mo
154.571 116.551 153.912 117.209 153.101 117.209 cv
152.288 117.209 151.629 116.551 151.629 115.739 cv
151.629 114.927 152.288 114.269 153.101 114.269 cv
153.912 114.269 154.571 114.927 154.571 115.739 cv
cp
ef
157.775 115.739 mo
157.775 116.551 157.116 117.209 156.305 117.209 cv
155.492 117.209 154.835 116.551 154.835 115.739 cv
154.835 114.927 155.492 114.269 156.305 114.269 cv
157.116 114.269 157.775 114.927 157.775 115.739 cv
cp
ef
132.046 96.3301 mo
132.046 97.1416 131.389 97.7998 130.576 97.7998 cv
129.764 97.7998 129.105 97.1416 129.105 96.3301 cv
129.105 95.5176 129.764 94.8594 130.576 94.8594 cv
131.389 94.8594 132.046 95.5176 132.046 96.3301 cv
cp
ef
135.229 96.3301 mo
135.229 97.1416 134.57 97.7998 133.76 97.7998 cv
132.947 97.7998 132.288 97.1416 132.288 96.3301 cv
132.288 95.5176 132.947 94.8594 133.76 94.8594 cv
134.57 94.8594 135.229 95.5176 135.229 96.3301 cv
cp
ef
138.514 96.3301 mo
138.514 97.1416 137.856 97.7998 137.044 97.7998 cv
136.231 97.7998 135.574 97.1416 135.574 96.3301 cv
135.574 95.5176 136.231 94.8594 137.044 94.8594 cv
137.856 94.8594 138.514 95.5176 138.514 96.3301 cv
cp
ef
132.046 99.5781 mo
132.046 100.39 131.389 101.047 130.576 101.047 cv
129.764 101.047 129.105 100.39 129.105 99.5781 cv
129.105 98.7656 129.764 98.1074 130.576 98.1074 cv
131.389 98.1074 132.046 98.7656 132.046 99.5781 cv
cp
ef
135.229 99.5781 mo
135.229 100.39 134.57 101.047 133.76 101.047 cv
132.947 101.047 132.288 100.39 132.288 99.5781 cv
132.288 98.7656 132.947 98.1074 133.76 98.1074 cv
134.57 98.1074 135.229 98.7656 135.229 99.5781 cv
cp
ef
138.514 99.5781 mo
138.514 100.39 137.856 101.047 137.044 101.047 cv
136.231 101.047 135.574 100.39 135.574 99.5781 cv
135.574 98.7656 136.231 98.1074 137.044 98.1074 cv
137.856 98.1074 138.514 98.7656 138.514 99.5781 cv
cp
ef
132.046 102.791 mo
132.046 103.603 131.389 104.261 130.576 104.261 cv
129.764 104.261 129.105 103.603 129.105 102.791 cv
129.105 101.979 129.764 101.32 130.576 101.32 cv
131.389 101.32 132.046 101.979 132.046 102.791 cv
cp
ef
135.229 102.791 mo
135.229 103.603 134.57 104.261 133.76 104.261 cv
132.947 104.261 132.288 103.603 132.288 102.791 cv
132.288 101.979 132.947 101.32 133.76 101.32 cv
134.57 101.32 135.229 101.979 135.229 102.791 cv
cp
ef
138.514 102.791 mo
138.514 103.603 137.856 104.261 137.044 104.261 cv
136.231 104.261 135.574 103.603 135.574 102.791 cv
135.574 101.979 136.231 101.32 137.044 101.32 cv
137.856 101.32 138.514 101.979 138.514 102.791 cv
cp
ef
132.046 106.062 mo
132.046 106.873 131.389 107.531 130.576 107.531 cv
129.764 107.531 129.105 106.873 129.105 106.062 cv
129.105 105.249 129.764 104.591 130.576 104.591 cv
131.389 104.591 132.046 105.249 132.046 106.062 cv
cp
ef
135.229 106.062 mo
135.229 106.873 134.57 107.531 133.76 107.531 cv
132.947 107.531 132.288 106.873 132.288 106.062 cv
132.288 105.249 132.947 104.591 133.76 104.591 cv
134.57 104.591 135.229 105.249 135.229 106.062 cv
cp
ef
138.514 106.062 mo
138.514 106.873 137.856 107.531 137.044 107.531 cv
136.231 107.531 135.574 106.873 135.574 106.062 cv
135.574 105.249 136.231 104.591 137.044 104.591 cv
137.856 104.591 138.514 105.249 138.514 106.062 cv
cp
ef
132.046 109.344 mo
132.046 110.155 131.389 110.813 130.576 110.813 cv
129.764 110.813 129.105 110.155 129.105 109.344 cv
129.105 108.531 129.764 107.873 130.576 107.873 cv
131.389 107.873 132.046 108.531 132.046 109.344 cv
cp
ef
135.229 109.344 mo
135.229 110.155 134.57 110.813 133.76 110.813 cv
132.947 110.813 132.288 110.155 132.288 109.344 cv
132.288 108.531 132.947 107.873 133.76 107.873 cv
134.57 107.873 135.229 108.531 135.229 109.344 cv
cp
ef
138.514 109.344 mo
138.514 110.155 137.856 110.813 137.044 110.813 cv
136.231 110.813 135.574 110.155 135.574 109.344 cv
135.574 108.531 136.231 107.873 137.044 107.873 cv
137.856 107.873 138.514 108.531 138.514 109.344 cv
cp
ef
132.046 112.385 mo
132.046 113.196 131.389 113.854 130.576 113.854 cv
129.764 113.854 129.105 113.196 129.105 112.385 cv
129.105 111.571 129.764 110.914 130.576 110.914 cv
131.389 110.914 132.046 111.571 132.046 112.385 cv
cp
ef
135.229 112.385 mo
135.229 113.196 134.57 113.854 133.76 113.854 cv
132.947 113.854 132.288 113.196 132.288 112.385 cv
132.288 111.571 132.947 110.914 133.76 110.914 cv
134.57 110.914 135.229 111.571 135.229 112.385 cv
cp
ef
138.514 112.385 mo
138.514 113.196 137.856 113.854 137.044 113.854 cv
136.231 113.854 135.574 113.196 135.574 112.385 cv
135.574 111.571 136.231 110.914 137.044 110.914 cv
137.856 110.914 138.514 111.571 138.514 112.385 cv
cp
ef
132.046 115.667 mo
132.046 116.479 131.389 117.137 130.576 117.137 cv
129.764 117.137 129.105 116.479 129.105 115.667 cv
129.105 114.854 129.764 114.196 130.576 114.196 cv
131.389 114.196 132.046 114.854 132.046 115.667 cv
cp
ef
135.229 115.667 mo
135.229 116.479 134.57 117.137 133.76 117.137 cv
132.947 117.137 132.288 116.479 132.288 115.667 cv
132.288 114.854 132.947 114.196 133.76 114.196 cv
134.57 114.196 135.229 114.854 135.229 115.667 cv
cp
ef
138.514 115.667 mo
138.514 116.479 137.856 117.137 137.044 117.137 cv
136.231 117.137 135.574 116.479 135.574 115.667 cv
135.574 114.854 136.231 114.196 137.044 114.196 cv
137.856 114.196 138.514 114.854 138.514 115.667 cv
cp
ef
79.0283 108.811 mo
79.0283 109.622 78.3691 110.279 77.5586 110.279 cv
76.7461 110.279 76.0874 109.622 76.0874 108.811 cv
76.0874 107.997 76.7461 107.34 77.5586 107.34 cv
78.3691 107.34 79.0283 107.997 79.0283 108.811 cv
cp
ef
82.3545 108.811 mo
82.3545 109.622 81.6973 110.279 80.8848 110.279 cv
80.0737 110.279 79.4146 109.622 79.4146 108.811 cv
79.4146 107.997 80.0737 107.34 80.8848 107.34 cv
81.6973 107.34 82.3545 107.997 82.3545 108.811 cv
cp
ef
85.6411 108.811 mo
85.6411 109.622 84.9834 110.279 84.1709 110.279 cv
83.3584 110.279 82.7007 109.622 82.7007 108.811 cv
82.7007 107.997 83.3584 107.34 84.1709 107.34 cv
84.9834 107.34 85.6411 107.997 85.6411 108.811 cv
cp
ef
79.0283 112.047 mo
79.0283 112.858 78.3691 113.517 77.5586 113.517 cv
76.7461 113.517 76.0874 112.858 76.0874 112.047 cv
76.0874 111.234 76.7461 110.576 77.5586 110.576 cv
78.3691 110.576 79.0283 111.234 79.0283 112.047 cv
cp
ef
82.3545 112.047 mo
82.3545 112.858 81.6973 113.517 80.8848 113.517 cv
80.0737 113.517 79.4146 112.858 79.4146 112.047 cv
79.4146 111.234 80.0737 110.576 80.8848 110.576 cv
81.6973 110.576 82.3545 111.234 82.3545 112.047 cv
cp
ef
85.6411 112.047 mo
85.6411 112.858 84.9834 113.517 84.1709 113.517 cv
83.3584 113.517 82.7007 112.858 82.7007 112.047 cv
82.7007 111.234 83.3584 110.576 84.1709 110.576 cv
84.9834 110.576 85.6411 111.234 85.6411 112.047 cv
cp
ef
82.3545 115.185 mo
82.3545 115.996 81.6973 116.653 80.8848 116.653 cv
80.0737 116.653 79.4146 115.996 79.4146 115.185 cv
79.4146 114.371 80.0737 113.714 80.8848 113.714 cv
81.6973 113.714 82.3545 114.371 82.3545 115.185 cv
cp
ef
85.6411 115.185 mo
85.6411 115.996 84.9834 116.653 84.1709 116.653 cv
83.3584 116.653 82.7007 115.996 82.7007 115.185 cv
82.7007 114.371 83.3584 113.714 84.1709 113.714 cv
84.9834 113.714 85.6411 114.371 85.6411 115.185 cv
cp
ef
88.7295 108.811 mo
88.7295 109.622 88.0723 110.279 87.2598 110.279 cv
86.4473 110.279 85.7896 109.622 85.7896 108.811 cv
85.7896 107.997 86.4473 107.34 87.2598 107.34 cv
88.0723 107.34 88.7295 107.997 88.7295 108.811 cv
cp
ef
92.0161 108.811 mo
92.0161 109.622 91.3569 110.279 90.5444 110.279 cv
89.7334 110.279 89.0742 109.622 89.0742 108.811 cv
89.0742 107.997 89.7334 107.34 90.5444 107.34 cv
91.3569 107.34 92.0161 107.997 92.0161 108.811 cv
cp
ef
88.7295 112.047 mo
88.7295 112.858 88.0723 113.517 87.2598 113.517 cv
86.4473 113.517 85.7896 112.858 85.7896 112.047 cv
85.7896 111.234 86.4473 110.576 87.2598 110.576 cv
88.0723 110.576 88.7295 111.234 88.7295 112.047 cv
cp
ef
92.0161 112.047 mo
92.0161 112.858 91.3569 113.517 90.5444 113.517 cv
89.7334 113.517 89.0742 112.858 89.0742 112.047 cv
89.0742 111.234 89.7334 110.576 90.5444 110.576 cv
91.3569 110.576 92.0161 111.234 92.0161 112.047 cv
cp
ef
88.7295 115.185 mo
88.7295 115.996 88.0723 116.653 87.2598 116.653 cv
86.4473 116.653 85.7896 115.996 85.7896 115.185 cv
85.7896 114.371 86.4473 113.714 87.2598 113.714 cv
88.0723 113.714 88.7295 114.371 88.7295 115.185 cv
cp
ef
92.0161 115.185 mo
92.0161 115.996 91.3569 116.653 90.5444 116.653 cv
89.7334 116.653 89.0742 115.996 89.0742 115.185 cv
89.0742 114.371 89.7334 113.714 90.5444 113.714 cv
91.3569 113.714 92.0161 114.371 92.0161 115.185 cv
cp
ef
95.103 108.811 mo
95.103 109.622 94.4453 110.279 93.6328 110.279 cv
92.8223 110.279 92.1631 109.622 92.1631 108.811 cv
92.1631 107.997 92.8223 107.34 93.6328 107.34 cv
94.4453 107.34 95.103 107.997 95.103 108.811 cv
cp
ef
98.3896 108.811 mo
98.3896 109.622 97.7314 110.279 96.9189 110.279 cv
96.1069 110.279 95.4492 109.622 95.4492 108.811 cv
95.4492 107.997 96.1069 107.34 96.9189 107.34 cv
97.7314 107.34 98.3896 107.997 98.3896 108.811 cv
cp
ef
95.103 112.047 mo
95.103 112.858 94.4453 113.517 93.6328 113.517 cv
92.8223 113.517 92.1631 112.858 92.1631 112.047 cv
92.1631 111.234 92.8223 110.576 93.6328 110.576 cv
94.4453 110.576 95.103 111.234 95.103 112.047 cv
cp
ef
98.3896 112.047 mo
98.3896 112.858 97.7314 113.517 96.9189 113.517 cv
96.1069 113.517 95.4492 112.858 95.4492 112.047 cv
95.4492 111.234 96.1069 110.576 96.9189 110.576 cv
97.7314 110.576 98.3896 111.234 98.3896 112.047 cv
cp
ef
95.103 115.185 mo
95.103 115.996 94.4453 116.653 93.6328 116.653 cv
92.8223 116.653 92.1631 115.996 92.1631 115.185 cv
92.1631 114.371 92.8223 113.714 93.6328 113.714 cv
94.4453 113.714 95.103 114.371 95.103 115.185 cv
cp
ef
98.3896 115.185 mo
98.3896 115.996 97.7314 116.653 96.9189 116.653 cv
96.1069 116.653 95.4492 115.996 95.4492 115.185 cv
95.4492 114.371 96.1069 113.714 96.9189 113.714 cv
97.7314 113.714 98.3896 114.371 98.3896 115.185 cv
cp
ef
37.8013 109.283 mo
37.8013 110.096 37.1426 110.754 36.3311 110.754 cv
35.5195 110.754 34.8608 110.096 34.8608 109.283 cv
34.8608 108.471 35.5195 107.813 36.3311 107.813 cv
37.1426 107.813 37.8013 108.471 37.8013 109.283 cv
cp
ef
41.1284 109.283 mo
41.1284 110.096 40.4712 110.754 39.6587 110.754 cv
38.8462 110.754 38.1885 110.096 38.1885 109.283 cv
38.1885 108.471 38.8462 107.813 39.6587 107.813 cv
40.4712 107.813 41.1284 108.471 41.1284 109.283 cv
cp
ef
44.4141 109.283 mo
44.4141 110.096 43.7559 110.754 42.9438 110.754 cv
42.1323 110.754 41.4741 110.096 41.4741 109.283 cv
41.4741 108.471 42.1323 107.813 42.9438 107.813 cv
43.7559 107.813 44.4141 108.471 44.4141 109.283 cv
cp
ef
37.8013 112.359 mo
37.8013 113.172 37.1426 113.829 36.3311 113.829 cv
35.5195 113.829 34.8608 113.172 34.8608 112.359 cv
34.8608 111.547 35.5195 110.889 36.3311 110.889 cv
37.1426 110.889 37.8013 111.547 37.8013 112.359 cv
cp
ef
41.1284 112.359 mo
41.1284 113.172 40.4712 113.829 39.6587 113.829 cv
38.8462 113.829 38.1885 113.172 38.1885 112.359 cv
38.1885 111.547 38.8462 110.889 39.6587 110.889 cv
40.4712 110.889 41.1284 111.547 41.1284 112.359 cv
cp
ef
44.4141 112.359 mo
44.4141 113.172 43.7559 113.829 42.9438 113.829 cv
42.1323 113.829 41.4741 113.172 41.4741 112.359 cv
41.4741 111.547 42.1323 110.889 42.9438 110.889 cv
43.7559 110.889 44.4141 111.547 44.4141 112.359 cv
cp
ef
37.8013 115.507 mo
37.8013 116.318 37.1426 116.977 36.3311 116.977 cv
35.5195 116.977 34.8608 116.318 34.8608 115.507 cv
34.8608 114.694 35.5195 114.036 36.3311 114.036 cv
37.1426 114.036 37.8013 114.694 37.8013 115.507 cv
cp
ef
41.1284 115.507 mo
41.1284 116.318 40.4712 116.977 39.6587 116.977 cv
38.8462 116.977 38.1885 116.318 38.1885 115.507 cv
38.1885 114.694 38.8462 114.036 39.6587 114.036 cv
40.4712 114.036 41.1284 114.694 41.1284 115.507 cv
cp
ef
44.4141 115.507 mo
44.4141 116.318 43.7559 116.977 42.9438 116.977 cv
42.1323 116.977 41.4741 116.318 41.4741 115.507 cv
41.4741 114.694 42.1323 114.036 42.9438 114.036 cv
43.7559 114.036 44.4141 114.694 44.4141 115.507 cv
cp
ef
17.4619 99.3174 mo
17.4619 100.129 16.8037 100.787 15.9912 100.787 cv
15.1797 100.787 14.521 100.129 14.521 99.3174 cv
14.521 98.5049 15.1797 97.8477 15.9912 97.8477 cv
16.8037 97.8477 17.4619 98.5049 17.4619 99.3174 cv
cp
ef
20.7168 99.3174 mo
20.7168 100.129 20.0576 100.787 19.2461 100.787 cv
18.4341 100.787 17.7759 100.129 17.7759 99.3174 cv
17.7759 98.5049 18.4341 97.8477 19.2461 97.8477 cv
20.0576 97.8477 20.7168 98.5049 20.7168 99.3174 cv
cp
ef
23.9707 99.3174 mo
23.9707 100.129 23.3125 100.787 22.5005 100.787 cv
21.689 100.787 21.0308 100.129 21.0308 99.3174 cv
21.0308 98.5049 21.689 97.8477 22.5005 97.8477 cv
23.3125 97.8477 23.9707 98.5049 23.9707 99.3174 cv
cp
ef
17.4619 102.617 mo
17.4619 103.429 16.8037 104.087 15.9912 104.087 cv
15.1797 104.087 14.521 103.429 14.521 102.617 cv
14.521 101.805 15.1797 101.146 15.9912 101.146 cv
16.8037 101.146 17.4619 101.805 17.4619 102.617 cv
cp
ef
20.7168 102.617 mo
20.7168 103.429 20.0576 104.087 19.2461 104.087 cv
18.4341 104.087 17.7759 103.429 17.7759 102.617 cv
17.7759 101.805 18.4341 101.146 19.2461 101.146 cv
20.0576 101.146 20.7168 101.805 20.7168 102.617 cv
cp
ef
23.9707 102.617 mo
23.9707 103.429 23.3125 104.087 22.5005 104.087 cv
21.689 104.087 21.0308 103.429 21.0308 102.617 cv
21.0308 101.805 21.689 101.146 22.5005 101.146 cv
23.3125 101.146 23.9707 101.805 23.9707 102.617 cv
cp
ef
27.2373 102.617 mo
27.2373 103.429 26.5791 104.087 25.7671 104.087 cv
24.9556 104.087 24.2974 103.429 24.2974 102.617 cv
24.2974 101.805 24.9556 101.146 25.7671 101.146 cv
26.5791 101.146 27.2373 101.805 27.2373 102.617 cv
cp
ef
7.87988 105.791 mo
7.87988 106.603 7.22168 107.261 6.40918 107.261 cv
5.59717 107.261 4.93896 106.603 4.93896 105.791 cv
4.93896 104.979 5.59717 104.32 6.40918 104.32 cv
7.22168 104.32 7.87988 104.979 7.87988 105.791 cv
cp
ef
11.1338 105.791 mo
11.1338 106.603 10.4756 107.261 9.66357 107.261 cv
8.85205 107.261 8.19385 106.603 8.19385 105.791 cv
8.19385 104.979 8.85205 104.32 9.66357 104.32 cv
10.4756 104.32 11.1338 104.979 11.1338 105.791 cv
cp
ef
14.3887 105.791 mo
14.3887 106.603 13.73 107.261 12.9185 107.261 cv
12.106 107.261 11.4478 106.603 11.4478 105.791 cv
11.4478 104.979 12.106 104.32 12.9185 104.32 cv
13.73 104.32 14.3887 104.979 14.3887 105.791 cv
cp
ef
7.87988 109.037 mo
7.87988 109.849 7.22168 110.506 6.40918 110.506 cv
5.59717 110.506 4.93896 109.849 4.93896 109.037 cv
4.93896 108.224 5.59717 107.566 6.40918 107.566 cv
7.22168 107.566 7.87988 108.224 7.87988 109.037 cv
cp
ef
11.1338 109.037 mo
11.1338 109.849 10.4756 110.506 9.66357 110.506 cv
8.85205 110.506 8.19385 109.849 8.19385 109.037 cv
8.19385 108.224 8.85205 107.566 9.66357 107.566 cv
10.4756 107.566 11.1338 108.224 11.1338 109.037 cv
cp
ef
14.3887 109.037 mo
14.3887 109.849 13.73 110.506 12.9185 110.506 cv
12.106 110.506 11.4478 109.849 11.4478 109.037 cv
11.4478 108.224 12.106 107.566 12.9185 107.566 cv
13.73 107.566 14.3887 108.224 14.3887 109.037 cv
cp
ef
7.87988 112.229 mo
7.87988 113.04 7.22168 113.698 6.40918 113.698 cv
5.59717 113.698 4.93896 113.04 4.93896 112.229 cv
4.93896 111.416 5.59717 110.758 6.40918 110.758 cv
7.22168 110.758 7.87988 111.416 7.87988 112.229 cv
cp
ef
11.1338 112.229 mo
11.1338 113.04 10.4756 113.698 9.66357 113.698 cv
8.85205 113.698 8.19385 113.04 8.19385 112.229 cv
8.19385 111.416 8.85205 110.758 9.66357 110.758 cv
10.4756 110.758 11.1338 111.416 11.1338 112.229 cv
cp
ef
14.3887 112.229 mo
14.3887 113.04 13.73 113.698 12.9185 113.698 cv
12.106 113.698 11.4478 113.04 11.4478 112.229 cv
11.4478 111.416 12.106 110.758 12.9185 110.758 cv
13.73 110.758 14.3887 111.416 14.3887 112.229 cv
cp
ef
7.87988 115.42 mo
7.87988 116.231 7.22168 116.89 6.40918 116.89 cv
5.59717 116.89 4.93896 116.231 4.93896 115.42 cv
4.93896 114.607 5.59717 113.949 6.40918 113.949 cv
7.22168 113.949 7.87988 114.607 7.87988 115.42 cv
cp
ef
11.1338 115.42 mo
11.1338 116.231 10.4756 116.89 9.66357 116.89 cv
8.85205 116.89 8.19385 116.231 8.19385 115.42 cv
8.19385 114.607 8.85205 113.949 9.66357 113.949 cv
10.4756 113.949 11.1338 114.607 11.1338 115.42 cv
cp
ef
14.3887 115.42 mo
14.3887 116.231 13.73 116.89 12.9185 116.89 cv
12.106 116.89 11.4478 116.231 11.4478 115.42 cv
11.4478 114.607 12.106 113.949 12.9185 113.949 cv
13.73 113.949 14.3887 114.607 14.3887 115.42 cv
cp
ef
23.479 108.814 mo
23.479 109.626 22.8208 110.283 22.0083 110.283 cv
21.1968 110.283 20.5381 109.626 20.5381 108.814 cv
20.5381 108.001 21.1968 107.344 22.0083 107.344 cv
22.8208 107.344 23.479 108.001 23.479 108.814 cv
cp
ef
26.6572 108.814 mo
26.6572 109.626 25.9985 110.283 25.187 110.283 cv
24.3745 110.283 23.7163 109.626 23.7163 108.814 cv
23.7163 108.001 24.3745 107.344 25.187 107.344 cv
25.9985 107.344 26.6572 108.001 26.6572 108.814 cv
cp
ef
29.9111 108.814 mo
29.9111 109.626 29.2524 110.283 28.4409 110.283 cv
27.6294 110.283 26.9707 109.626 26.9707 108.814 cv
26.9707 108.001 27.6294 107.344 28.4409 107.344 cv
29.2524 107.344 29.9111 108.001 29.9111 108.814 cv
cp
ef
22.8105 105.562 mo
22.8105 106.374 22.1523 107.032 21.3398 107.032 cv
20.5278 107.032 19.8696 106.374 19.8696 105.562 cv
19.8696 104.749 20.5278 104.091 21.3398 104.091 cv
22.1523 104.091 22.8105 104.749 22.8105 105.562 cv
cp
ef
25.9883 105.563 mo
25.9883 106.374 25.3291 107.033 24.5176 107.033 cv
23.7061 107.033 23.0474 106.374 23.0474 105.563 cv
23.0474 104.75 23.7061 104.092 24.5176 104.092 cv
25.3291 104.092 25.9883 104.75 25.9883 105.563 cv
cp
ef
29.5869 105.543 mo
29.5869 106.354 28.9287 107.013 28.1162 107.013 cv
27.3042 107.013 26.646 106.354 26.646 105.543 cv
26.646 104.73 27.3042 104.072 28.1162 104.072 cv
28.9287 104.072 29.5869 104.73 29.5869 105.543 cv
cp
ef
23.479 112.229 mo
23.479 113.04 22.8208 113.698 22.0083 113.698 cv
21.1968 113.698 20.5381 113.04 20.5381 112.229 cv
20.5381 111.416 21.1968 110.758 22.0083 110.758 cv
22.8208 110.758 23.479 111.416 23.479 112.229 cv
cp
ef
26.6572 112.229 mo
26.6572 113.04 25.9985 113.698 25.187 113.698 cv
24.3745 113.698 23.7163 113.04 23.7163 112.229 cv
23.7163 111.416 24.3745 110.758 25.187 110.758 cv
25.9985 110.758 26.6572 111.416 26.6572 112.229 cv
cp
ef
29.9111 112.229 mo
29.9111 113.04 29.2524 113.698 28.4409 113.698 cv
27.6294 113.698 26.9707 113.04 26.9707 112.229 cv
26.9707 111.416 27.6294 110.758 28.4409 110.758 cv
29.2524 110.758 29.9111 111.416 29.9111 112.229 cv
cp
ef
23.479 115.42 mo
23.479 116.231 22.8208 116.89 22.0083 116.89 cv
21.1968 116.89 20.5381 116.231 20.5381 115.42 cv
20.5381 114.607 21.1968 113.949 22.0083 113.949 cv
22.8208 113.949 23.479 114.607 23.479 115.42 cv
cp
ef
26.6572 115.42 mo
26.6572 116.231 25.9985 116.89 25.187 116.89 cv
24.3745 116.89 23.7163 116.231 23.7163 115.42 cv
23.7163 114.607 24.3745 113.949 25.187 113.949 cv
25.9985 113.949 26.6572 114.607 26.6572 115.42 cv
cp
ef
29.9111 115.42 mo
29.9111 116.231 29.2524 116.89 28.4409 116.89 cv
27.6294 116.89 26.9707 116.231 26.9707 115.42 cv
26.9707 114.607 27.6294 113.949 28.4409 113.949 cv
29.2524 113.949 29.9111 114.607 29.9111 115.42 cv
cp
ef
17.2778 78.9492 mo
17.2778 77.48 li
18.1963 77.48 li
18.1963 78.9492 li
20.354 78.9492 li
20.354 79.9004 li
18.1963 79.9004 li
18.1963 82.9995 li
18.1963 83.3228 18.6934 83.6089 19.0562 83.6128 cv
19.6973 83.6191 20.354 83.6128 20.354 83.6128 cv
20.354 84.5693 li
18.439 84.5693 li
17.2651 84.2397 17.2778 82.9995 17.2778 82.9995 cv
17.2778 79.9004 li
17.2778 78.9492 li
cp
f
24.8584 84.5884 mo
24.8584 81.2671 li
24.8584 80.8481 24.7153 80.4893 24.4277 80.1929 cv
24.1406 79.8965 23.7944 79.748 23.3892 79.748 cv
22.9907 79.748 22.6445 79.8965 22.3506 80.1929 cv
22.063 80.4893 21.9199 80.8481 21.9199 81.2671 cv
21.9199 84.5884 li
21.0044 84.5884 li
21.0044 76.2271 li
21.9199 76.2271 li
21.9199 79.5869 li
22.3647 79.0596 22.917 78.7964 23.5771 78.7964 cv
24.2056 78.7964 24.7344 79.0488 25.1655 79.5527 cv
25.5752 80.0391 25.7793 80.6104 25.7793 81.2671 cv
25.7793 84.5884 li
24.8584 84.5884 li
cp
f
31.6641 82.1167 mo
31.5493 82.6528 31.4546 82.8535 31.0723 83.2393 cv
30.6943 83.6216 30.2285 83.812 29.6753 83.812 cv
29.1411 83.812 28.7031 83.6265 28.3223 83.2661 cv
28.1753 83.1543 27.9248 82.8833 27.7842 82.4771 cv
27.7041 82.2485 27.6729 82.0313 27.6729 81.8315 cv
27.6729 81.2832 27.8657 80.811 28.2515 80.4175 cv
28.6328 80.0249 29.1025 79.8286 29.6587 79.8286 cv
30.1934 79.8286 30.6509 80.0083 31.0332 80.3687 cv
28.2671 82.1846 li
28.8262 82.938 li
32.3628 80.6348 li
32.1294 80.0977 31.7661 79.6704 31.272 79.3555 cv
30.7788 79.0366 30.2412 78.877 29.6587 78.877 cv
28.8433 78.877 28.1494 79.1665 27.5781 79.7451 cv
27.0073 80.3164 26.7212 81.0117 26.7212 81.8315 cv
26.7212 82.6479 27.0088 83.3394 27.5835 83.9067 cv
28.166 84.4712 28.8628 84.7524 29.6753 84.7524 cv
30.4771 84.7524 31.1655 84.4712 31.7397 83.9067 cv
32.3115 83.3394 32.5137 82.8667 32.6201 82.1167 cv
31.6641 82.1167 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Platon1) ()
%%Title: (The_Killers.eps)
%%CreationDate: 2/2/2009 11:35 AM
%AI9_DataStream
%Gb!9s?&p#JOf!CW5l]fu1f2&lNoKq'F2_T']/;1J$7\b[(8HGB7:qg*P[kEKUq5*kIbhod*dc]fMl`M`=:?L]a>`LRgCsRT8":5?
%,6$OC^3o_Nm`jS"+23-tpKq9^DSHVWEgaN/12Zp7J+aEQn5"7X\GabY?'f!AJ_.&sEqF;k[sgt'frjYpc1uKh4hUdhp@d=k2ieKQ
%Da/Voq/HB'pu0hk0CNgcs&FRJmDntin*b/OUer0s5,Q\6?f%]II(4U9]Qj&;h<gj'DuY!-5Q(>rDrs]B*A1WHnc..X*8,i5p?%.b
%'XsmJnbK]Pgu!VZnFUtso^HN#IjFOVLVGtLgL[m<QgM=*J,%2]hAdubQ?%(;Ng0"YYO:gs?TgNc]m735f-66O\Gu7G(&.%;nTWH3
%oBu;Ma#CKbUb-Wajs^5HnWWXla$7;OI<nLqV!ZRm&mkS*s7tiEWVD7X7ujBO]'FB.@pcingP4t``A]ILjc@1VQ`i'[[Tm/<lcWZ1
%bB+*^lcT7Ap`G!qrS]AGNJIOZ7&CDp9)\JWrCu!6G7X.?#poS/]N)_XrVks>rDR.76ra$Kdk<=b1]@<$<^%M,b/KX>3r>NY]cm1N
%IbEoa8(dWUq<u3I\[%1cbr9"k0np=FFI-]:59B.prFpe`HuTjg\,7=dhnHk?H+H0*4Eenj^5VrZs,=^>BUVe>rH6oi4k2Pt[rL:X
%oA3j;4Z1F69o!2]#ijhAmI']*IXV$igRC.2O62N?O&+ZirC:nFdLV[e+&)[Oa8=W3s7YmK.;cYjm:A&%p[I>=hR2D*YO6>7.<GY4
%Ip0c4D]XD<IELAfs"Vj=Y>]lKZ[_fGp9uu1^O7q7j["@qrq>.i+9(p]oU#N(?'b/h%,5nEa4qa#GJB-(D&b4H@CF@LrjBjaHL@:O
%Vssf=4Aju]+92?1mYADu^\/#d5QBd(h4$+m3aB,aa$F_$jS/)WXk8=+oQ9uUX7(g.^\hAJlFQ<M^9o]ppm7%[^O(0GQSr,6Crc">
%OhXSUJ+qL<dnLa*)qQo*s*je7mnZI:Fm7L;k!,1Ys1.Uoc^-:j9q,\;J**A`A,b^PQCkm;FhGB"Cftf2ZK-Ke9+G0l*4@E%??stI
%cS<O(9E'"iO-f<^%bp^tQN*9Nb[E/3k-11*o1NH)bWgCK1<7%RQ%/YqeZp/JJ+Y8r]R!Ra</N:SQ\rqQjeqpNrpt,'0@0[?@@8YG
%RDUeHe!?V;W;L:ga\_fZKAAIVH#_uhJ*)5lW;L:'<AmlLSY>VH#CHGCQ8;S`[;=;i5n;(Oq9L&Pl;cD_QB'tJQ7gptCo[DGH"is*
%!2]Tk>oEYjhP\L`b-)eN)=sI\<LLop?@HK"QiE5d18E0;fehg0R5+`0s-3VC&+Z>nI$X>q3@luK5KdRQ]9J:Z.`c,2(QRM28Nq9n
%`3ScO=P7r5D$k[l3/TAcQ'"^WT=,Bl^N*!PFH:%Lj5l!-r&?Lp5BBrsH=e__V7\efR:A![HF^ZC4/m&11.H8pgY#<]^,q3*Q78^#
%-LnVu>JJZh[XB%(CqQNfT,?`Ajl\<>^SELhb0S6a/&!iTEH[cIZ@PW*=3%LRjll^7Re1XhhWQcQ=O@Aml.uO$`8ft<-L^l"D;Wo!
%)n@<QSB&f_PBaWEZB&6'Q^@DoGPoV`[AC1<?c,]h'`Tc"VQ'JTr`aiJQd9`8ikOSV3d*W7`IH(7D(GYC2FcTjf8CI,8+GL-lcUs)
%^Z3)j=*j[D?PP$h>CM#!Fnp7Z\,>OdAa=`8_u+/8hst^c=8?cH*2](Or9C=aH)pols3)/K^\,JDjNEn_eZ8ADH&1?Yr2WmP[MR]!
%YIa,OX*O1V%VsLQ?SAkcDc]lmMl[A'<mo/Cf2m65*.S""UtDPia=f\Sch5riZb-D7O?JBo39>A[RJf6L\%bQ8._g'#a34)SP$mA^
%l^Y%j!FKtJ.Vd.Aedj#F./uBB]Z:=X7SQGaV*>U<WXN7ts-Aun'mu;6Z'5C39?'jsc0:]SrG0Ure8T6IVZPJR+?Y7JgX=hU[e>:E
%<S:-Ujic`[Af<S"[%(/UVu;"N9mRdiD(s8-g?N6Z`E'Iq-!N"g(tlej\,DBIflUf;Aih%u7Q\7a?@G9n5$R]u9cj#NHlu"Mq'\*9
%cgR8J(Op8mY?u+"/1\]25;jb'cD5jP>FbE?o'\\\-2)lBo1tD.+ss1Gj^I6u(<unWrk\$]a^+'*\h.s%3P<j`ClPWHG)jt"FFngQ
%OPXUtS9V\oH<DRD[DZ6EPAU?QJ#<6ojdu4nP]\Kt8tosrMq)N"gUoND4n%tp@J*TJXj%M#/KOS^cDdpfYKCH=INPQ%hb*`#[>/UZ
%/\6f-9/T(NU15L4A?i5-\,9<1/ka_j=g#'n\+>8tA,&SL',Hr.m+I(_bG>/TLYR((A-ou!DYrVLZK7,VnNtfo.eFA^=Of0\W@Zfh
%mJ)P75&'>fj^YJk[edNt%Og)9g(DBK9>TT#@U.f%SED$'8m^[t&r*O0\uhGrpd0+-XNE@>$,/U,DMJIuD2ns0lD?]kDZ.-\RhPVg
%nEK>TPq$.n>,U\E(Os):Cc5YnS&5=;/MQ8dJDJY[o3oU&2^P<uAe-S\fdLS+%`NURm=bE4CdcGD'AH6GD;4JSI!T6kjJBCS9#G7l
%i.JSanT2lQ4WE'4m/EiRAWlURHu>Y#5dock`(?"=HkWbl.;;](OS8&&-aneih`bnGm+=m<gN3G5%*;sYD0`!,*NtfXI^Njc/_&B(
%PE)+r4\>=tkFbd%C3lkc:efH2QYL$n-O9NoD^)qdF8W:Eaf4lDS&_g-A`B:cam)GYcd6ZB<F5=a,gEUG3R,lf#:G4*I`12jg$ZT'
%81!`4BmmOJO_&i2gA2@_Fsri^o4<N4H4BKB^.o$,19U`sHQL:hP\n=&d7^^IL=8dSCZuGco$5\9i[5]e=7]aAI[+@8ZI6d@BR<Ce
%Qd'Xe2MTPPQM>C64O\;TOaJ50SQ3m.3BXWnIr9RAA*Pd]]mDB$DN3\B]WK@,Se%/o</X]AB;7\9*u>T4m^M5cD)Q;Q3j,'OA#jK.
%9joP:dOR*r0@*k:*2(iG_p[X:2Wa>ZQbGi5T'uVJ1*p/sJ\UlXk/MS=a67LKXp9K_Dp<@o[;=^9kK+3/FOt.1I`I]KgYl7cl^>g-
%pZ6H(<BU`cIrVh5%a;o\hO*KQfZ(@>?drk1=m,%F3:sRInO;1B:],IcBB!#GlH*_r!8:,fk+s[GX#Q-*k1H8pM/j:S7i19`rb2Ld
%&sSRH^21c'`-YTNWqB)r9esKF3(MiUl$I2PT)X"@dslcAb(f%AX<36Ve&UIpm.5>B(\[LIYs"90GiKXcGG1.lIPYG%<UVU)3*lKD
%]'Pf-Wsd'M`+%B-;gbTQTA0-WqpC?D)V)li<DU95:Q=Z<\@t1f.2"jE^WUMhg6Yh2XZ_\E6Y.?PF)<#*r:kZ+T6Y"LFnK)6`Q#:X
%^-V.'atZ9?F7JgMLmM)t3[W3$Y4l(^,HEN?ZR]g6BO2^Rok#0!b<Fh:D-N@/`S3Z8*W!f0o`8dNonuP*YF7VUHE2G/<i)f+=BI3(
%@ene7r2RD$dWsD4,Ze1+N,1^:a48R:[7lq_iGG76lEJgFm-?q.!Qf^MVUa`!\q-L2A[9b0j)YGhdDYSS21JZKLOcT+D;aiSL!4oC
%@+/bsqRge;cVS(bQ)2n8bH_udrqk6P*s9ur<HH/pZh^;nDg,P/?6,ZAd]g9ts85CRA[2*hre188nabdqD<l]HqV@WghV.u*o&4Hb
%NkktGBn,aLE<#E[rA=Lnr9W1mViU:r?;Ark_Opki+hch%>s<9-o:PtSq:YK)Dsfie+9(<\_oMMdH2%9Tc[YZ-nSOW92`FN^\U8[P
%qsM^a?X1;n;3t?+5MSE7]DZ\oF'H?mPCA1.qsO%;md^#De&1k@mene&PQ0CP^]!TZrpI\YPiCF^NUr\?q+tW<q57d$j5\DM`-1tT
%GQ00.O^A(Yk5P%u]/L8of8%PA^A.-Y_sO(FnPca,]"`Ma>N,?kVTf'6s8D6V_pe#OrD,aRKAPMan9FR(06aTQ?Trr:n<_<?+!0i[
%F+/3)me,uGjn2=XqpROthqt7[AIJFbmGm6OgUf<,2pVa/Ub2O+It?VL;\c)OhqWX)J,B$"mSDju^ACS5D>=,k<IAj%na?/?MS25W
%bM.fM]>%@pnXK)<ZI`[#YMUYHrQ!0PT/6lS^CC,#n`_D1HLpoRqg\$q?ep22nG"oqe](5'Dr:N\iVmc;2ta3D2=fktp?J-f:QL`s
%^;#$h-COY`O*=C?g6Z/iH2[7+rPu8tgun`FIf,9IT*Wl6p7GK3^:D"(GOp&>ISamgViQltQh6p)["XZ-Wkk;&EJudT3UIi/p&F,,
%5J(:TbKo_qf:MtjT>)iJX+,Tmn8IcUIpIMoWr4$s4?TJR^<c-Ds89jt=9!=4p@e',Vmp[6hS-b>-*Y#Z56"LZpXf>p5PW"jb<P1)
%qA8o*qqq"[rbMAbs%;"[?)Gg60)ss]G*b-P:HqK*b$R:.mr-V[hqY#B0E:.s5J-hCc!:7k;/r=pH9Vr>c-?3(C<BH!2rBl$g+Q%[
%\isY0rSHToYB03r^588,q!ZloV_;`GQ[eU<PXltt\OlU6Wol2NkA=)55-[+!Xac&P%QOIc.i7b-k'u7$c<i09H2N"$ng;K92mdbA
%]Y/`7GE\TemF,S%%=dp-2gp0!a`0F`YqP^F(Ad1`2Li+mgZB=*2p[HPWu#Kp\%hs0F?"5ds%bRL.H,1edS;L2nA>jr0E70uhrLC(
%bu[oHrqqg9hqd2PTms/&EOl#4&%=LlQS74Q]Qn!ah;q^FVIf/c`S6jmIl4?PmDJgVV`$0p[Qg.f%[UP!W\.YkH%1#qD)UYO_u4'Z
%q;O?"(E]7j/q:B&7idY7s)He*9s]%hJ!9SWQOe:Y5MdJhc&HIuN&`/c[,4%%4MFB[ec!Bq>Afn.md`LsoC2;7rpJV0-+j,Z[i[dI
%rBAQfj54`-%tD3>I%Qu&\Q?GX^O(I3RJ42jIX+W<H[,;Dbk5dD:UgAl)g7e2X$Rnh:%c]Ej`Ym]I!:d?e(;o^[UdWADU#r1H[,M@
%1rSL2ZKQ`ep+BMI-LEY(b=BRok0?#3DN_ZGIs7B*HTl0*qpP#r>^ORJV`1V?3_*m%qX4?X(I!"BqVQdMHCr@Ys#Rq+O12S>4@il6
%CVBW74rs++Hi<[QFS@,M$gW4!lf5,Aa?3/6p>_j!&q2`>Mu@I2eBh:Gpl1d9O3'qZYM\+uh0aEjJ+r$i66D]U]QX8Ik1pOiDgk6h
%k_JobjHn_80-;:m^NdE)H'.j8\'M6L`)KB,Rb64&O)Jpn4L>$_rT_:!rGs8'/np%7]f!j><PN]A(A>f4Ti`KiUi#)%$,6E$gWsE8
%Qo<4PO?1SSX45(KGMdgBa(iBc?Ou%"dra_aZRi@oC#e'J=\54`iO5_aNVi4s]D(3Z"lZZ"q"2(W[u'%\D6C*HN"60T@upZdn6J4k
%]?"lbf-U7K6S+#WT^5eJ*^8A1nl,7Qa,GC\IsEfdbIk'n["\/`e\\>ejUk_JNaMa#=XLnbQH<mL.H/%dF.SC?0'W=VBqEdo;_<R^
%<WDi=o-V4`4'kq<`:d1qm3j0jlDJNW')dZ(E=RH3K63TJ\5-tK)Sa5j"TE^OQ^@Z(NW$W@;=EC,?=+cj'7HTLEmU:rc&XNdqg9Es
%`]!JHmbU))`<*NJ^Fn9%7K2EBmYAQ%c7dUcqq\lr2\28LBg]U`GaC>dI<qsgpl"=)4=>@ie(m/GaQp:++-3F:H#?P$;9*SDZYN?B
%eiD4Xj7VfWRnm,bpu_GBpqudRKj2p]I.Fij%81V%mr->Aftb@NWr++,rVc&sJ&3ufkk2OuTA64kkUGn73FmHeU-H<hlh*VofCHJF
%FSp:Yk&Whle,K%SFasGZl2'PVSt0MH5(*8<[dgoE5$X-V(-g>N+0OMWj`^T%boa+WDL]0Yj+e_5apmt3mP@0'IGX;F4Im:W-88fY
%Gl+EEqTjoX6gT$++&8l3LAh#HCOO/"gnmV.q(9B0W_X3;mpA;,0&jdH[_NLFk2T7nbqq*P9NOHmGt]1<j1Ep8>TSp(Rs4=G1\cg2
%cS!GFhs*8n`QO$Y@.`UPlM(>RLDRjSq9p.pq=aQLITWK?Qc$"^Y+,F_M]\WcM;CH\I"+YI%F:*$5>+V`5BEdqh;-Q7S,=>3hEUtk
%;OEuDNf0M")rqO%$0;0P]6s;@B3(=Ra5`rRcW-&N^JEGXbJW@i2"/'2YiB])b4[&QEiS^0k5A(X].NMNX6m0*h7h&S8A+boA]j:]
%=@OY.'<u8OT'i1Z=hP=:ZYc:De*]FB%5kcGkDRSThKS3TpiCG9jjUQ^9i0fkDrSLCH2R029c?*EL[VuRX7,dY5<\l-iVcO_I]O%p
%4r=4S_c-3tntY_nD]\rTTrIr;6q??'+]p8p$/nnG5IMqeF8u70qhKBfCu/Y,oeru[+$ML8C#="/eEg7srR>nhq;Z1O3=`Tl$iT$3
%X[dY$<0j;Wo:+Fr"3X2DTA)*M*W5:'[-U'E*R0?MT,@K.Y03^YYM]?XPNuUE5!8dtGHRi>lCZl]Uj(P%a#f1T?.EYN%o;s!rnpnK
%)<Ub-3S`V)QhlQkpM]V/mf)$<YN#MYQc^:O<m$6bJ+W]`?+pVt2Wa*gUEer=r:0MQ-!36L)tm(?>:T/[9E*S5T%(IrDEk[&Q+&nn
%gp;A"2n'msIX(UtQ2::.jk)ZX]7bQH3?V4\3Be=*o:[.(4T!OL$\*_Vq!qd`Gmc1$KpkpZq:cO[Y=BSA0Sjd8IYWW"5OKaMb]CK-
%6<8U5h9UTE`QObF2jaL[Qf#N`O85ABVaij;506?(dU'K"5Nf@K07No,O3a@Fqtu;Ur\uXppL`qWZ!?/br+Dq^ZWuoej=W(Zn`o9o
%IIVC4pIF?Dji.*VVjC!tqXlmno7!,(rjkk(LYc'@GMS%&]aXj[h55<XP[WqiTc<.qiH9V&Hl[sHQ_<S(02n,@`J-H\LH&Q%H-B]-
%8tF]1]8gOHnNs6"N64`B!kpiV`\;MdFl'SG4@Ch^.=Kf$_R*[*D-q&Im5hA=`2qRmYL8)ugkZ[1M;Vf!_2asH/F)q&-ToG@m&!#_
%2Bpf6Fe"/389q+IWi1];@I/1ElEB#)Y*oP`YX>3g1',=<b3_V07GVKhnI-?QFPCq07]L=^Xk.\;`8sSSa*^f#D!+FPo*BCBP6o(F
%X*gN8F%Z%*2,(JS6etdu;VR]q.ecUg?gDao%ah;q:]]XkX16EF&`j3$)aU_@^"@!7_i^OB>!&p@7GX9n7+[m?U.06>ZP,<c:8.2i
%KXlS(KHSbfHEkmN`Zn1mf[4s[7GXQ6V)rsM:4YdiG^M!M6P>TDf6s[M<`a%"'8Cp,Kjl:X/mhM28St&`D&]L`18V:%KMak2>/lcP
%KfqgW3/e=]7TXal3`/urF;./6UgD@M'&s:DPiZ=N\n=&9T"M5eLlf7%*@]2bi*gfGYVDPBKKMZf,o'+4W9@P(;3XhQQLNu0+mffg
%m\]])In^AM/a@ThVP>;ST..2*$,ai[6Eq,<^Q0i20O1X/=n]#_YX>Dg:)Ls6Wb"<g?._O:K#:\UiBLmtQP,"75t=do7-]cW0dQ!:
%aL)IM=Hr6A:4t"0.leg7mOLd7pBc)3PVA%i-57U6Oa<jHN(H&]d%_+'MUKVr&iP1\pH8\%A**H)hl^ZC`:)`XIPf0?\dRfs#Vm2h
%*Y]Pgc(;o(Y*I\Pla6>-G@dJV\d&P"j_<rtVcV@kHF7Xi!&ES7eA[sjA,[3V'SR=MMN*?>37:gPXM&f\.7m*P@V\)41F'bA]EF66
%:6F@u&S01P1ap5BU(o2l;L#"4J<%&g0g]>`>.0X,kOdnFhAUUaf=mkHFn^!Kk,#Am.CHns_muQUjVY6\pl]U*nPZbeqE<F>FXV!E
%$);`C[>ZJo$bM:mi:&^&QsA>#j[A'7cp\7_7-]b\0dLH_aL1\5=Hr6A:4t!m/%LI*mS7u%Ye#@?f*T@6A.f(:&?/ab`gER4!^/Tk
%U*uR+/`Fh?_f],%^@?Q"h<'/`^\=^5LIp<79'pi>0J]V(CrG&rA")_/\Q#\phXG?(LE0"SGJYc"<%[.Pn%p-?(ECEr$NDQe]9F_&
%$p'9?,>rH%NZguD6*>',_P2.uF<WjC?-*[%G@*@.\50oXUkE/e18+u!Lt!rW@nb<ZJKB5Q;3XhQQE^&ZQJTX,Xl$V[<d(M@^9-"8
%)qFD[<.9l^2fb]\Yn:cdGLp9&rLQ6])Ktec.CJ%>_qh,')-aj+H\bu^`X4-g?c?n8N@6`+TVEnrI]$NH4%T-PaM[Hf(@Lli-c4I'
%'fdK!jsuO4T7US$#]h4\-57U6^Jce7LC(^G])/$HgeFZ3nDs?*g<X8M[(af:EU#LUqfH,PEDaK?;Z!"=geB74)mSs\'),to/lh3g
%6doG$YGos)Mliu:=Ip;tA9ItadAm__6\O,-gs&S.eqP,4\OElOUMZ<jkq0s,%Qo=WVPH62SXck8Lg[jDSL9p[eDYMdn26V1"C"<q
%=.3_=Rb!'PqQIgCN2:7Y*.,ABgY*XeKZJ%E\PDsZJF';uldDu]@8%SNlfKZJm:iG4LZX3VcWl[)OQBn@`GiCMUFO-ZS5_)5JWF**
%LS6__$'B9&14_d!?+4t?)t<7K/Y*rtV/`E9YI5U3U*EPiWISGGAZ%3mMrHnMM:("slb"ld_iEpaO2H*9IMJfWoP*![fuO(Qp6-Q;
%UiFl;>,=Otp(/[?<'W14YX`,T;*:g]7V>L%p3T"_m"c@Gg122qW,t^m47m%#SsJPWX2;l@U!nY1:m;u_Jk6+[,:Yd/&Ou;dC)NSU
%cgRpW',\/@RHJE3*ZpcGBj(2\hM)KgFu7%L/Rp2@^j_h4%GS#l\;s<5*912&R$ao?er(eGn%tCN9ci>_@W&HV4=htk9IE$eSuukd
%m1$O\Kf^lKo<8QuR\V+!KWM\Iq,1!g@;1R),nL$/fd3hc'VI.C&lT?MeEiT,1+,ge=P^VI`$1L>f/2d(-q[Z?a16,Ee(QmB)E"A)
%b-Y0<%O%JW]i`S_%\kI171i#FSuAK,l60;@bk%GX[G,?;+`>nRS2lfkAXlC:l`e]Hh&43i'JnP"gROM4jNDDC;MAR)>%\garY2L#
%LXK'jWiRaern,jn6nrHtKh7XH0<&-p=P(,u)]Nrgf[H:pGJ1;[F_A,L*UMg/?04Sn`cPn%:7;MYfNj_n/X8TSLc)dZ-=KrfUhUd<
%4WOl)_pGV4;K,fb[Rln8?e1nocUUZ7't%;eY"jYEj<dph*iT:A$s8.KW[,XmQUEEtEDPiW@EA98[jC2/roS&DG53+cg*KImD3iG\
%%C5(+EMrWDcYEfsNhl?s4DRp]pMJS?'8d6D]FZe<R4e)QO]5gS#M@4M-604a/>=P`9J)s#chT!g3;"ob+aUgnl#tes`g#@<9J(R>
%CGAdsq<c3Z.lrQ^,>p4pJ7:oTO2="1MYC't7V>N/KpLL>\4?Eg)F/Ah\o0J#S5\JYMm.:?dri@$64rVs.@*p50qr\e(h$H+M/'WQ
%l!<SjF]`CVGNl5GrjWe8FfFuDr*9j-SI:_1,K_$#+p8jfnp-S50T@95dXj^F6SX<OTsAr3;7@ofkusE(Fbj'L?4%a_>_VRjN%fH/
%fEd@okgbh%+N>)_.*KN&Em&RaWuYMDS)hf],@IaF1?6L_F6A\m6't%38kB-oj!ccq&S?04Sso$,mc:=l^&o#-F<1(&DEF@F?C1R2
%+T,h<D/Z.&/t#OP^tRZpCHp.3W`/%[G8r6b"t*#f/5o2dEk%3dkk0[s@)?rAN\_!Z]V)#J\qjCkFGiFV;o,WM=2L3#UcL4g/m!(W
%i5SP&'Xe\CE$o'2QrGKNXeHO\*Fh@_=MZTfB49.hU71N2oKMYLeu`q<.VDujFaA7ZkSLr`s/pe<1&.(lU?oN&0c`h=h0>n[B'Qk=
%lDm:ND,(dfPGuM_fj(a]/G4ae*!spt2pV%<bR:m._2V!ndOn!7>m7_r?O;Y54k0kCn[N$Q))PALShOD7LFkXpkE8?"?!_.fPtJ4s
%NO2YM9BTHFeP2bVXYG'LZ`oJSJEC\pVDkZqZ,\[WAS"u@"j8'f`?i[N/"'4M5kTAN__=mPI]9nika&qtWC*UI:)'OgW?l@C?BL$,
%ot$WGa\5d2Rl;Y;r%$tZMN16DdP(kOD$@O0?O;YM4k5CoZ?]/^'&7)t!-6ssghomo1CHi*']BOa@\m]G83/92V>i*j8gdJ1GB3P-
%Satr+[F;&>1*6ah3.8I-qqR+Y9rOUX'G`#/M@EZLICTjR.][hqp<a@[b((h;dj9n"aj^rpS1`kGHG/9ZQuKX2j)i/B0^'pBN_%!^
%!f@SD4UUeb.,Imn(`TA'\Ogc#F9`/N$[4S$0J#mI']BOa@S$_7,:YX+&S@l'W2;X:ICP<\4>]h%mFmi0<-R0lb'58_:+$AVP6o24
%XIVO]qfQ0t<RYdEZ<+/N#dr-<U3&/uKI<Z*H&,dF(^_U;Vs)cs0J!VnMP;=nYV_>*8T2GJ/QflaGY`HkCn.Zh-Gb\8*%61^ggO!q
%YV<%QKKDSZQ)68Yl)im0(:5bGSO>>@lh#%TPMdU]GHL,3X#N87Dr([YH?#X!H:5;t,883@-c&e6B<S^WngO_/XMq>1d.StE!b5qJ
%][l5&*MO@.Rf^Z*=)ki2,L$**gaL;sU(o4";jaAa**g,E#Z@1Uk6+n6]YZQ5BX\U23)6/%Aq[^?,8H)$X(]IE]+c<#.\NX28e<D:
%V+*NaI*U?E1^>U(m++oB>.1D8Z4[A6ihDhp3)MZ%9VNL/ecoKab<G5X9A4dR4Npeq*C=?-Ln\uH[=fog$b;.khXEKuG[/Yd3+80j
%FAW)[Ob0E8$qe)<G&=r+(<(X#'4YNn,tB_.D!jPsF5[Uu'8D!.,mrEN;QOu!!D-c)\+H;H=m733ktXtq;V^+KZtt-t?M0s;.Dp/:
%$fdXO4.RcN9I:GmY]fl1c[b:H9A5!rEP>(LX7qfeg40r-l""N8:JM_s&A?pS'MS9sdBP'-=;Z,o77X.]Bc;VehL]$;Y_5I8T'F8H
%3*jX#Jf@';;#!eq_k)Ni@8`d)GDHq`9k-H:>JVmCBOOq&M/#(]?H.?oFfs&HL$0niQ6Ca-?VbhkV=2I04t!f2f<MAOSLnOd1Q@<i
%6BQ=u+o81>8ED52@RN4((53>inYBn;SNXZMl2/2'8#5)8#%nu)Kh?9'VJ^>)e,-:VX2<;3Zi$'r8VNo*L_NN4TGUPZ.?#s<-WS?'
%lt^h4pLUGZ6_rZ=3[\8`e95+reqSTIUJ,us4=S0QVa=7(6jb7U:lM@>']rh$]VdeF[[tgsOK\U^HbN-Gcb/`+q4nGpA,(#9/!]9B
%bfq-,:i+(moD.,6D;6dEqt*fN%b**mPhP_^;*:g]`n'_r4!Fj?[0"Jk=L#J8,L"CPWDJg"Ob0EX$qe)^fVKH;N8dFZ1:EcUp(/\*
%XVF\#^l$s-)I[OG8;3f)L_ME-@o1Tb_(Nu7_P29NF^dIYI_O*5\bV8Aq4#s#jjVLalpnIr.CJ7D_onVX_8`Mr^Z;SuMW+.Uju)V(
%@Q[R=_abQ/H`!+tjEK]ToP1Wm5hKAQYrcChfJ=[!2kjAH,(LM+\LEFj.ecUghoY3$*MQVneH*PPb)OpX_o&&P6+IT@=qUkSGfi``
%*Yt#FVA%k/k<jRU]F9eGqil>/e`bh3>F/KPB1d#__QY_n:i+)(l!o#I]rc&B0ceuNPE'<KD0<]DSl@<%am7*08AVeC.*SUUGa'mu
%9I^`f8#0Nj!QBl;:18fQ4K2N(PM_'W6jgq:5[coha/=T!AQ#3M4!Fil$7JACFpdiF.,Imn(`UfaP>9$J*5gqq:XbuWnAgkOQU)Bk
%'_T+lR@,?9MN(_b5.q2jWakgOLP`/pL3KKf4CL4><%VV?q3i=dK$@I#AIbfpc);7eAsQCEb)YX6=PCfgUs"?qRaJuk32p*$`q'pl
%L_O[V&h%g/c#-"90Jg&26;_ng:VkIC"smOjm*^h=/0+)W:5gRH0?I)/fQ_kZ%XWM[/=oYd;&rN/e=J#rLQ`(a7T@\UB>on7pM9Ze
%p[(tEAO.=Y6%WTl>/6?\'c`?N0g%i@?GS?Y@G%&K-jhT$'eI$sR&%V"QTcrdJn'(0^m!LV4@H3gm1A6""ip"`iGDJd.(G(6YV]*`
%P4er^Rd^S\S<E%<Gd@0bh3P=RqJbia^9W'*i',EN4B$!q'8D96--@rOD=oWsZWJ]X:Y0TVleWQI<cHcD-&B^cdfQ,BY2CL-[<N$&
%S>Y<?P;#*m.T$6eOb0EF$Bt)ti6m0&Ls!ig!hQJGi$qp<GR>XbVr7?60K`#Y;$%`"Ju*5iPOoXKdXanb<:5$,J?@A2rOU3YrQ._s
%(Uf>"2Dm#`f'/<U/!\X0bWQrF:i+)(lJ4<<BC2%cC\g=]$UUi;:)Mh7<Qj%+]jaL-@(0-$\bR^u[qLH*N?]0qZK$*8QGtX-l*"K]
%2RG1)9raMa28$5M8AX_qJ9(Zim-`:-F!jI-'P5>S'J-q-:srgh/tH+]_Vq*O`-Cj#H>C.\c-cEShVKlS*kcJj.]FB:o;:$/-Obco
%$H5K94MS"A0lEdjm:+ifd?MfF&Ou;dC)Kg==*?t=`q)ISH"G%fK]-lJTdVuH"d99A7T=O<,E1VReM<^Y0C0i[0V/LVcRV)K-Obco
%$:WV[.@=("0qtsPR"n-#T'F7=o)+kNf<(%qL[2/r]m@E=e$5qU9rU9O(hP*0MN(_bIOoP>[ElMPA)1^O;L=uh+gP'!j2po8N_$ug
%$Rd!nlkl!AbY0K#AJ``$QM*$]l*=]`B!a68Z;`F9an*@j+pDI.TQ$R0@oU<!1T=38>sp2Fg;fk^bCX#gZ%OQ'8TeKY4hp,tg!l$X
%;En0^r0lJ_n%GmpY#LFB0Xl(u&nPDg^Sa$GlWC:ZrH0%E,:QQ+^Cu@68QGAiDAR&MXAlZ.i4/A.C,]gZ\VVPr-r,cN.92hVE29sp
%>$B:in271[^=MI5Xcet7AdTOP>Xe&2N%h_ZU_76G)NRgs[#<m6<s>ug?O7*1H`DhhjR=JW*F"TfMjjoVeWZ0qX/if^[DrTkdA0+6
%&M'3Ol)jZhkc2AZgO;n-h,T5.\NI_WSl@<%algg,8AR8+.%II,31VaN9e$ig8#0O,)M=40$?g,L$_qrE[>ZKB$[[[DN8K3'n&g[J
%$,bSp6;_no$C96t.-[sDQUWN7;7ref0qRMj)e3cG@+QPZbZ(]`fm%;?_O4<J4(1f2WDIELHJ[+tmX<\E/o@t5?C';ZLJlG[@2)M;
%QLQg#_B'm)Z[%+2(6kB3,)cgS'oK:A;Qs9ETYtQ\/qtoc;7ref0fo26%PW!Y(TAt/WU=>"FbdBuq0Qu'IP$C^=7-"<I.+%^=1UpK
%MQQA=Yq16r=LroC?/[4__S#M3<V&4n^0nA'.Vb*IeD-mqmap$;*Ga9nf?u!@a)"aX^&U*A7kIVqim]SLWLbMWI(Y?jbDIu,4]9gX
%Vn(CO%FGugQu-3?@^]irMqKG9\KquJXD]8f.#Dq[i=^XF^8VPnN8dFZ17i)_fb#[#3<tF%=*E_r0P6\O.*@Q@_."L=&sid6R*ic!
%Sl@<%C#3u\6hEer2Qnc=0ak;$`FKS#KTZ[2f!c2nPf,nsE/E%Ghpd`'7e*9h),Kk,m"cA"jopWF:j+1D0IE#`.*@Q@_."R?&uPoF
%(t-8LSl@;:Zf_k_G1PBVNFY]2T&sG-eLQ.%\BiDD[pG9EWhhk(XKOF:ies="YqgU!=M9*pC6>j&,0C:S9Jr@qV`2is1fl3>8u9tr
%?1k3jFri$g26VU,6QJ,2PHZ[)FkDmWU)5^"V32*(``$QnMD-\H;Up/mRF]mtOX8-4RT59Vf#<WZ-B+?='8eD[Loa-V)dB_g?*Unn
%#;(h]aj^rpk$,nooQk#eSLJ/Ucst'%@t%"',3U1r_.oPCV&f_EX_;,W:TB`N2!_`]+gN6den**8%WlDpWX*)qab6B])^=U1(s(8Z
%nQ@D[iC8a"F>C7WVcai,&A?rQ\BYe0+QtO[KJB$n64ri$]jN]oJPr+kY'.0+MC2EIkj2O--<'MqpCR:=lM:/-q1@o,.XV.OH^gIB
%]H85/%oq8Pk&]#kM1m/2GRr3:VB2`7X6_R8I,d?s,E1VReM8'?hI$#ZCTd46d0nflq^Um5h"H-a`NHc3><[V'DkncIac]Sf.MQGa
%UgR(\</`6l;&E^Un#9'@cCU>tASnU@#SHe&I_"5+nr8(1Y5?XPjfp1WD,V0-UtQTtas.U/&!;H8"V`124,"89nYBn;$i;pUf3t,*
%^'rh;T-P#\ldk1``.fmg9)2e=4u54mHYHiOP],ot[-+f/pfZ6m*BSW1A]YXD%;7COECfuiTnHRKr#'do95fc&8q%q+GuU$rR8/E1
%5,EdHDTED5:Kr547q!=aX=W+,UF3>@X'$u)/Pl8HR9U;B1o_i46k$!K<(.XhPH"e.n?hqZpS@m\Utg>n[r,*<V;1CK##E6BQRZf$
%pC`fl.#O$U_5%-i&XAp(#buWB[>`+smrCP:Hd*V+(Hcm&`/HtC9*t"-UVVCaEEIqVWtOSefhmtSOb-..'I*s3']rh$]VdeF3r=$d
%ep1r]&RccBk@b(KR,0*3dp/[2>;#As7cbRX9q*Ir&b6J^f/#_2GREk=&OkY(CAEg8b'-_>RQ1o+bK\YeNh&r-PhoU;HXDD$6],5m
%q]mK$Z.:oG7E@jgJg6OJ`JB*eKb6fEUhUd<IEP^-2KKo`"g@$EfYOp?K9"3H-dcj=C/Oe8$_u!m-q]Lj\Xj*O``$i[MC8fZ;9NV-
%F+-710\5#&HF`i4heB6Td[S!K2oSY8?G<`j@9`QQNf^"a3?eWj$7J@XoI.r$U3KIV@W_<k37'PKH\eohB:+^jE$qJ(]4QJ`dnr]O
%<FI?Dd]%X]&bZbbQrH=*U9[]7@2)M;QI4CWkPBPSlQK/F^AD!^lgo.fVQF"YkP;]JeSZLh]<BcT5q'm98AV)'M@l,E_?co];RMJB
%q6V(i(H"rd\U0QsCUnY#[aoFCluM@?<'7_9>\dC.Pa99@hk!NYNr*n$Ot%.bd6)>Vg4@LaEO_k!bM=[[6rV>$<g\Y2nXf$a(nR@T
%EGF,<@3;]-@LlKl:e<Yg!`6-LUCL4(L%X&<Y;\5I+QR389-/m+:;Noe0IeGM$Q+WUQ=XaF&LfYGJ\!=-H:te%F2L.J.j#`pcJLaN
%6mrD&8@b;u,0!Q#YDO_8-W/'"ge3.aQ=6r,6hGDc0!17@(O@4kf6JIH#(0(!dp3]sffC/7-q]Lj_5%-i&Ht<)o<9Y";k4brII^SL
%.Q\j@krlnVefOG7(]'i/fot(Uqk@M5a-,>W8h(N`&!;H8"V`124,"8)`JpE?<QceKgbtM"B8=46<u5l!O8G?fNnpn3>GqD_M<Pj-
%"Q-D,_lQ^\1qUu@A.$9[o_nVsQeci&;N;\IeRB%!@_d[&=%QO9'r?8S';6ssS)$ata:TRkHdBO2Rk.6Y-em=^Q([<:Bj[pFZo8l3
%C*TGYHAE8/.\IVUfdVk6MC2EI.(f/Gh]$`,$I4"E@9'85PF_TE@@nQkYdApt]hWo&b)T$/F)2;<@ROe*0Z#60<%VU]FT(a$5hSNs
%K(FSgIS[#iEkL5,aL?3)3XOQ`*UA@u7EH,jQW,(^U6'_)*Ya<TU(^n8EiHpdiC8J^Of\F.89rH_QE;K@r,\,/b9+F!eL!Zrndm7;
%<'W14P#E3+'Mk`pdFm!cCU]03FOqpbbtj-r)_Xj0Ap$h>hL06V'fMmgBWF$8MNT2^/u_*F6m\`b_Rt%I21R'XpSf$rXmp^ESl1NH
%3dVoJ37!iCl\&\U:Sc,f?L@FE\rQZ4WS6JoMQ+2Q:t4eP'SUn.'46!4kf:Bq(=BY4lT?gmSt*82+)WQR)J(#2.]gApX5=;uU_3k%
%&>`c-"V`123JA&7nYBn;_s>c.Nt&^W<q)94X0u?.k&e6k0+If+m?adZb7B&kWm)qaYTm%"WISGGAZ%6!.%XBiUE%6rG'EIf/8*L%
%9ZOmCbt^/t3h.UbMtTeilZX=INb]_o+2n^g'p]qb\5&2:'H>G+BOZE]lVPHY<-^:nq:l#rU6su%_BLOgpJ`N[n9j-He%UDS&b[q$
%s,@)F*4Y&Wo2Y-kPc['lO0CIsbKt#S'O_ML$9h>oP`8eO>@A.6nYBn;_t2mph)3>LX62N^MDV4i6b4knn])B5&iQ#U3$f;sOs<l-
%V%P$mYpQrs,g:$O;Zdkc+,7?%BIZFM9I8@AXX;S2:4'\u?i/7#G29'i$JXQ=HM_pk76dA0j>.NKn[T#Pb/Z;8R"n-#T'F7-lt^@A
%Bk]c"$IK7,Vtdad1T08+88IfOoK$@2A^ZWUO"WMqqD!(?_B,Ef*2so-7MPPEN%g,:<Qf(Bq'Lm;1Y7jS6n`fNb,5H[PgB0uc,\1F
%OF>]DN9_6<75Jru,tF2?9.#H3:V`sPUS;^'FQ.B0e7))J0m&4jV^&NceBaJjiO\D^o.b>"]61<od_TYra^uqf*[1cO$7JACF:'7O
%i^qZU3dX$o[l(i?+pFT61N(O0B&)sf_79ork7>&E4t+R68AV)'lFGB&gZ^P)'Mk`pdFe&]aOdiaoangpr06h[cQjT.8ak6mA*@dA
%cMfpl$VTq'O7s+"NhYlr'ML!L(fAq\0Fs*$4k5D:g!`-')k)$_&b^=f3)gR&Vk^);B]_I-B;;oUSpP>(Gn3?r6_rYSS^83NfdVk6
%MC2EI-u42jLtpEZ*B2RE+ssecIJNlq3;IXe7_:]q*iC.q?fQpU$;3JE`?-P<gSI]CfSK5f'DF>Ep2rMk[AR06X-7?f;gaRsjsl>L
%8_#RWqrGf6b)T$/C")/o0a0$I2tuXfYRc1B:09P.S(:S<TdVuH"d99A7T=O<,E1VReM>/DD&h,]4[^sup^Z%b60/b'-h_r%Uh7s9
%<0iC^7G/8%QrH=*U9I-r*Yu_AWY8n/j6#C/Hc;!NHbT?!&Z..08EeBVFS,M(4o<IAU@Q?aZ]^(fj<7F(B7bs0'\o`5MS_s7o#:Uq
%pu68;NC^TqH.OK9a-1>k#(/%1KU/k,]%NWb/X$Rbm2FN<#9nn$DQ4n>b":+bq?!;Gd-]XiK88[Pk1a'u@l<:n=tK'lPQAL(\%\=h
%CeH:,?Yr.E77X.];?=am_B+DV=;:5':5lH!9CHS`8IlF,Z+TT;W;KZ0_*.pQIF$f.STWBTit:UgAqVAp+]:"nJ7:oXV_Gt9Sl@<%
%C$1cmTS@(92I36"0#+YsaI%.s_lA&%;sJcM@I1?lKi/,VGA[/Cc)qss0=g4.I^LspP^:qN(q#R-+[#/F"<<D9fmc9*DFVIq)\L(2
%Mc;)+N^gF^M_lX2P6SP`E%R%&8_"BDG&%+"RTCFi%uAlY-oeg__Ur,pN[!Cp<%Ii9,Egk2i4?BL@8XY7C'd]51]^)KgijeL'Y>4@
%Ak,6'q^N5P"EnJ.)Z*"AOZdASa*uU6W1-0ah5S0\LQn\@c_$fSX#>5%KQXC,,u(?XS1n-5<2/aB%R3-?>qa`3ObC8O;@]PkE5F#p
%<%[.0`Ka^s/!sWEMO%1a3g28/QW0^Gk9d*7=Y:+T<g@'Z`Q,hDSl@<%WQU!$`DUZ^'2WeAZI>=sdD2uEZCh#aJn;nT-s9Y[fCc%p
%7Icu7`-?$=AJ`bH]r@MN>#3LZ:nm/^&rEod>FfeEbqL>E=TU_:+,ck4'"**]Y9-Q2grj7m,-L%="'R0)l&Dn5>>_cZ--Vf[;PDa!
%g?\Qej/')/&[6'k(G&OdbG!G!:)Ls6Wb$!m]k0d1?u%3BZHfN(X[+8WRTNI]-p&UVbHbPQZFU1N/4(+AnYBn;RpN;N6hGuDV$+q%
%Y@b6JPqZu_@7O1<6jf5k_k:O_JR'(c&f/H5WY8mklSUaJm%pb7aa:3X[gnZOCLTkg,30nFDQFaG,\p&'`sQ?S'MbBg:Yr&</[fF/
%]9_pI$W)0,3"0;L4dTdb8Q^9DR\-&qWDJfuO`E%=+PDQ.\.p?!?9=Pn_!lZbDWO($b:mn`_8N=c=Zen)n+ZBJ.(t8=ZN/esJiWOL
%[\Q<.f4!H(aV9UABJ22^8T-]X<\p%V9lDeB9a3GjcT7;r4=Wtt9IE/6iRW&><(.iPordD?!F\TgpL.a^;j):,_U>`\hCE=j'LbLp
%SQ)7<U9I-rKMak2>"7asH_bLP\nfN83Yn>WRH!7-CnlL4lf>T6o>fc%emHo'DC#f^a?sL<8B#[+U<YfR&a$KbW<&59T,VU1.!7*`
%C'[R`1@O'tkK!0H<ERDjm>Ii.;//L6,o&CuW72MNR$CF@RP%@A*)E?2W'g2dP;7=IU-O'Gh9n7;RseKi_D_;&;K/BZ2^7@H$6VeP
%mO6;sU3KIV@['fLAJH**q7!huQlg_1'pl%th.:camF:%`ASi-&qJelB$-ODFc+Tu@Yn?ra@M/4,Dl<0BX/-_qcR*5=,5@#6ER>mY
%-Vk+p>1OE.O_S#`SVU9H\77*;MY5[ZKd,:qHG,H`O;Lct.E\op)se>9qE+YK_+"Ph3GI^l.!OH\\l2sr'mA<blWR_PU=5)m]qfZo
%+&B*ib%%B>1bIR``<A=k0/bit+<""cktAnW?+<ar)j,_Dj\-("i),dD7HL-("PB56XhbSM\$M>cj<lf8E'O(G@<R*!;P=A@L_NN4
%B4=+,V^r@QEq6Sf@J$D*769fjB/dDY>J:2/q:`VHg<ni`@nfRf0+gW-UQ<<!Kh_BBB=h\@Yjos#7GPMU5A[bRaq$lm\'+=3>WH-R
%AOVtf:8X>\?-k*>7'G/Xc2dFs[GpmK35U':-51uOZ^cBMZ=>R2fma.6lt.f-jkDT!I+$tbV^^CE>.+/F$0taqV1)WDh"gXZ20Zb`
%`h_Aqb3^D'HD1E1nW]NK#buFdFQ.'T]])D&DJpeNBK,%M.3m%UQV7\%*UW7Eb!KN%ZCV3./3=V:4+!ij0BRUcmH3e?rXe"),BiBP
%$6&cTgf_4qokn,;2o2A<cBg[a;#\I-^ITDGNo>AsMn#!ah+FRB*9^t^nP&KK/ld1!<:6_\J?lE@>H_#a.U'Y]\Vj*7/`g:l(&2&%
%#STL<a5#GKf^ah2i.uoI$#mltn>M3u.OS4(-r/Z(E#!60a)Y6.R'Q=<Ym/PR/GE6>TYB2W9(Ic>G_f$,R@$Uddi#&5_Piu(/YIaZ
%YC-p[""p;_SA.?R&&ORGB0NCSGlBUI"eOTV%[n_t^ik]88HTHT.5`C`7bOSPktV[OPRm*F#4Ka3^X>a=Lj/S.[WJ#gFc-o&o6RE5
%CrEp*a6U)QFinIH:L1<(*(o&I*Yu_AWY=Ela+ZZE$Ds;CU?Ro5hB\'Z,o)<C,Jl&@L9\q-!kU'K(.RhiC)KfaY4I[p][K[e'n%Ir
%d@Q$=_PBL1p(3WC=Yjk\AS$^DQhAD9.%XBij/LLm*Kbqf/"l)iAZ&*+o0+Lb$VKh*e]O=h7'a*$\?%n17cgF\!O^V(S)#M4kH/Li
%DX4h)k;XbD<'+/_][_4Qa),8A_k[XY#-;%bhf"WllcQ&Ldd!^VlJjL*?MgU<-l&t'F9N2;EcXJ@l)CB1]2n"'4"$$Y#*)A*$;R2q
%DOH*G2A^8RMD1Kf9J)sHq:n_*U:`'1h6b?%l-aZGIe;c)KmE\f.MP102J8mL<D4`VY&d@-'B[8PqE\Q/fX?(EN_%"C:oetK=Sf10
%p\%kRF2lmNf?$OF78S#CF/l(]+em3rS2MaRVNq`:CVVp)Y`2#pNTS2,TjJ%Ao6!WCmCT7?fD.I']=.MrQ"pmU'oIMd;D+q6@RMN?
%YR%Sh,?"[]kDGV?D=\;fG>)rP/$gV"T3AS)_fZs"$"*SqZB!Z%Td[I0;6Ql),Tj98pVJ,uMiUghUO:EL[uDFQ$WC]1HNhpe/BY]'
%F`aS![W:c=YbNVYMc$^V$E-+FM+,\tMabpLO%$3_N"9E7s.o![m'LT=Z!7\f$hk3ZXB=>7CHkeiSj-jJc<`ph'OBU%N.O2m5Rk!i
%$[+0S_PYuc=fRdmh5)ddb)gA)5*tS*A=#KFCJ89*DG%T8-]B(UV[CBIXENj-0o(3bAXAumFkq3]d?JC4:)LBcVAA[.9,I(/.@4=$
%8F4cigir!NYlc?eMLm&Sm[<!F4Q2=+#buJs[=kG`\kY70F3ZDoR:;L8jKV?*N#amW:]rpLAr9P]-6qfG;]&pW:TB_ch6RDKR[4t?
%2FiWfRuk[^NA1'9Ud>[a&A?jij[_,#O@N`4H0o-W!)Ir""\5@np1tkVB2`jECkT&8,8H*!,>p1o5[m,-V_Gt9Sl@<%C!WZIN_"Z*
%B*2n0j-*k`cUJcK1"]?f*KbqF"k4Ru=4-=J7^#`Q^"tN9p2%m3#WmAkeh?`5]#q9j,E2R<WDI])6_n*f!B%eZ+P8-%YUO_tQE"Ng
%FfmA>9kQi\jVb@t-/87`@[ufUZLY-;/`6E_\3/CXgU!.Ug*:F?Z^dfu`<Ps5M+*s*1HJ-qV+Q2"mR7[3Rc5\.Vd@9>h(uHhEpbpE
%-*mX`O`Jo[1<`@TQCNDm)t;P;Oq<loYNbhF%Z+#H)\Hu6"?,9H2H:>Xi?W16@Vt"hRbB&@p%YOaVpfm<,=qoQARG!k@3f['G5YI<
%64rJo^">m;5V]!@7q%'Rkp3:n@U8/+OJ#(=f]cSRG6uT?*S,4FY_RU[_QI>GFXn!F,85rD,>p+mi*f$mp:?'Kii3a:e.Td$5&;fr
%LmYN\/ji(A?an2P7i`?:Q9)3iGUNoY8?!=Wj/BT')Ve''\@^j[Q/!,]j[FiHoR.&U4/NakDqd>1X&>Y_GM'@;C24N#CIII\9HZ']
%Jrd1g['1tp4j2=f`lBdRP8rjdVhff=1LC/=PS47E:3=5<K,k6<WRJE5P=`X^FZGW*ri)eiMo;Si:D%5,IAH/(W>?7W?8J!Q10MFp
%^C+J_2)1*VLq'IKCQ5k!;m/aO)H"BL1/]m<+;Z<6`+;>Waf8W],ZhFo"\E_8XG'M2W>[nP?^IfIK/tim26Q*FLW_lHR]Ad^isJ\g
%;1omJC?:W/ePE/cALl\b!UT)Y[B\FK<D+0IaQsO5!Cm6^M`I=VY5&e$\29F(/fuAS8q;[d[;rtGl<b:cZIT#BX'[H;g.Bg+^2=u^
%Ofpng[\8-i7D9jXT>,L9O+#+$c-Ep`)o@85"](4&a<*0'RS[fWH_$"?)R^aK=VU\+fmTp@1F9etU-'pjp.Qhr_bMFuq0RZ-G)4Y[
%QFDBq[$5ck(&+6,r]3ZuD"i744=J@3#WJ10Aj#%4WX,A?fn;5UcaQ-6U7-!gk1^u%iCl?J6bir;04P<oLMK9r(Bb\:3?eq(aC%'`
%PXH@"PH(I#C4A957?'jKIKpdAr&uu1m17GaaIfLFGu0_EO_Vu@&`Y<"<=q^^UhTp;2ilimn.<9@SoOjq579iprJ;Bpq*R"@*(@[U
%WKp3h0qNnc<?;p@H`@aPKDVu(.W@ekm3rj3`1o#>gRjfuN'C/aZChJHLt(^H^gT'rp6(6+C(dpnVo:b[X'*SDCZKEIZ=rA*)s+uY
%=B\Fuf5e`1V(GOMa'eR4Spd,i]QKjN:AJVF]&u&;C*iVQ.,-O8Co;CqifLfLQ:k=^<>Cq@QS91gc\)kN80H+D^lW-*!OD,s/<%GW
%lRAA\VhJZRa,1bV.npKkQX4)i]1ZJLSDGLQO*`1S\%D-l#pG[u.$Qj00Usms'k%eOWg`@_gBqR<\[0sT3)&[/KR(o`':1E1,C(L5
%2oI,S;0IBM=P5upY@TY-@8ot$)XZ%sq8RDYo9ca7rFO*scDGSB]/21pbETT-$):E^;^aP3h9^>O\nYYE*Z459j%ub1p*f#OR8/F5
%Q59$&WL*U8M)J:S\re[-Q;f8i/u#&_!b(;uNe":UNJ.ZN>Hqd&[C3@c;D<M%'^_daF<t@;/u_[3>sp2F((,\Wod&1$fs*4SZ;`F9
%WQ!EXLcCulEiA1a@?1U=b^5^N/dT"$k#,>6bfR/hK\pA.YqX#!<%Xa[INHXCbM,/)(uE5LZF;$i?/[\ZU[?%/0a+u_g<CNnqt1)`
%8;(J4H_$#XNOAGtOXP._7(4okJpVpT)dce`FaKjK0!&AsQ!7+D=GiZPrSmPS-p6O4/76Isllg6=\I.Z+gU?D@'-XRl]in&S5W2rn
%D.Q9UQ$]Bocair=>YZ:f[tpm7m^c-AW^,fVR/9-.G<R534qL4d3[.7@SKj=*E//,WH6NBqnS2ql9>[X_\Q_8RTrlReX*@Tjlo4W4
%\b#6#D/Gm=6;nW-q%p&Y$]5MeN>V(G&daYZ=)iRi&JgX9VA#TJGJ6\!Z"qk\Qc@l_@Qm;gg[;/u6Qr'[+)H/P02!_Mhq_7cV>XAu
%5,h@p7,OOMECoW47dKQ,.UV]&D`XUAhVs!f$4EVR;RMJ2j6P-s%6Ga;:ZYG+!gRp]I*[:u^"Ktu;;?bn9IPdY8A1gNaTkdcas)_k
%aj^qmQVXA`5Rf^tolbe,V_dE^oIT</UF3=:>)ohh4<u.LKd,_(HGP`dTjgE$V_HaP*qkmS3kaF^B%B?AJoa`L#AhM0VUk(F]p\SA
%Q1%b-D>#kI2C")S4!Fil$7J@Xp*e/&U3KIV@[,2C2P#Q2Q08B!V&r_]bo_IprB/Ws_reG>+`'jjk%Z]H#^_@A]Z"/t%#PXN4UUeb
%.,Imn)!+,nEm_/;4!FjkO0_;5F8j[IgEaS+h@8SeH:cag54b+?.*@PU4/lUpir00;mhA5.`KR<5N.]_jCfgED.<mE<Go*D&/KjF1
%TA6j#eLI3c0)76OOpXY2&]L]7$7JACFp]IQi^qZU]'%-)Pjd>tLj4C@gY4^;QuBaH2tK6,l0Z;jL%X&8dR<eIiH>NcOou^[QF_L'
%4762fAWs-j471X@Ap\&bLq/'6Kp^M@p3-?LHWa;4rAnBRYXsOX,M)bbI-7M@df"Kl]W?I=BM,sF-]I%VeM<`ilcP5Y_<aF<o%gCA
%ZSNqc*B'<^'HN<^8Hk:gW8s13'W%"m,s:SHPoPp4]=>C=@>_b"TZ>?F0Qu*?.MP/Zd0kt6%M^3<HPa/TfUKQ6ln.73^FnjrHGQl`
%A3S\ilEmlR-B&s'Rh8)e*KbqF"V`0gHPGUN;7ref0qS+)_B,Ef*4o"%MS6*qa3L&+G1^V#'O_N7Jk6+[,78c3k$_-"V`HQ(p?Od.
%L_S)$'.ER[b0J;"0Qu*E6;_nofLZ6.,O2p?(h"+SWg<1^?WVD=$>0#='RNtoB4jmT4)@fg-p+.?ePZFeLrrJ$KMak2>/o$?>s47)
%kLk\Q<:"CS4a+r#fhS#)p2Ao5$&arL)`*ekSWX8RCf7Z_Z!T`P^?;\e%+EGtFVD7T'pG`OFfG2+1eW,/?9X6c`HKT!g/h^H?Sk8&
%'H>GC;FSf:<6A!!M,[&LO8FYfU+<ZZ082i^(E]V[7euh)YR<UG*Kbs&VH`t&>m4t:H_5_"fSAcP/QGoA^29u1,Dre=(^58dJFX:&
%FtYD`]_G%J1<,o6m&%1!8#5)2\kM]H;#*6@37m@cl\;*jg9.Eq7`c@%THd>fWF58t.rm9naM%3gD[BpgIQT3p+qN)e9tS^cZ06;t
%[^];C^85CSY/7Vh]X:GE&Q*Z$?&X@u<C$A9b"cAu;*:gQN:GT5h0Elj&'KCULuiVlWF;[[md4;O\(9^iD;'EN%`Q#->OC!'(,l&l
%%7hef0quA.`9"Rj@gTJ@q'5T^d1K*XDR[IggYu7dQE"MTDVp4lD:h:aK%'-rfbT8[bB_MCIIOrn.d`qPQ/,s`-.!7'GDI"j-6H(+
%.>oTH-W<YT]tPI^$*;3:[!K@MIQRokR*oEmnK^Lk:]36_]nW@9?C#(ipJe/C*hjGjWISGGAZ%6!-m&)J0tQ1AARSZF'V(V,g%K/E
%o)gPpB%D1<STI8:jT6"HMPA%j,>p1o@.F>P4Nd5n.,?\M#iuI_\YI\O[enfObVsk3b;si0^T?2u_FiRmGVq"#$6nmd@XU/sLXnqp
%:i&Na#>rG#lMPU"8N#13a,$TPHR[1VU3KIV@Vj@F.XQsclmEYQb"a]mk^J[LUAXXlA3s.87*nL/\dp4M;&3#n/fV&BPg:iM6^;G-
%7-^>+rUs*V`p5>5NSFS`\5(LNL%TWLmmr/,k_KpH.\IVUfdVk6MC2EI.&YSH^7"X*EVt(;qFTj+.:"m^kkRnsBg&3elT>Z0AjR+%
%&90.uE3^"QI]"`k.%O$`@GC,6?B1JT?=204`Nc+NWAPcFpnHg#]H9brlOi8R9WCp*`4FR43)@Z%EI:BVMb=iN::Hm0CX7&'C`?Zr
%6_moSW$&C[X15i),K`)-18-*TNS_Y+&6L^qG:Y;*XfG6STr2JneTbqt=4i<Clcg,/hK'F@[q:;=qaN%Ljeg3M=;Hk4,g-PQZM9Y,
%)O`c?@,'\+d1J+EpC]mNEQV!_7[3XbA3pmrBQ<r!X$s:4/1K4Vet!F@2j:,XMpLFlTkjKd6n^HJm,^0R0q`WA20VcEk7>t[XU=*/
%@(>;"iS`j]=:4b$0_p5#:0AW+jlAE&b(juu!b\(m26M86C@h&AQ>.b5CHo2]o/6?KMONOZ8sX1K]+P;A,W@A+gn"jj)c,YOM]ubm
%$bn8fMs']&3i#".^nC:YaF*/(lc]^#59H>_AM&BBHaNYT=]?ka*S';G#W?-cPG_k:D*4A+08^UM44:K\dG8O2@99Q("$:H8kB)O;
%Q!X1]@n_&DEB>dfF2aT[gQl-_qWfuj]alY+MN)8nD;oj^NlTsGWoX1sfQ9M[XM=`5(aY!T8_!=QWJ8M9RMst;PhTKAD&1F02dOSN
%_1b"D+'=7p_m\mXc+43K&b6LHi(2s+0qsh0)!hqIHcmfZ5aK\3p(/Ztoq`+r`KrJoT7(DuCeAKo^2#24AOhEE<3S0QYX`,T;*:g]
%7Qo:@RWh0^4b'3@k_(!!r/]+8+6Nn*.VuDKJ'$c'qV=#@MEK*0_s*sq'k(':WYSDpC[[%Ud6mPHa*dA1BFg/Vh`jfMo>fq0?A3OR
%II4Gm6P8r%^#2HC:be]K7q%'J4K2N(fU%qcHRj8-.C^>*C,YYc1tQp!o-Xoe't.H#j-t<KlR4g]LeJS`Qr$7OFp`kmiaHaC:CI)&
%DT,O-n@klM-11)SEj=Dg;D7NmZ#Z$6`Q"qppj='m9UBL$Z20X00',oOJL?8j8_!<"UG)L"2Va+Q]3`*hYK3';7IsZbML8/<FfN;V
%8b6qs1/aeo3?eWj$7JACEXF%Mi^qZUb-B1\&2.T*d0n6T%@c1nVa0?RMrT(]b+=YZQD"XY4-n0`=)+^2KKV^V3)Vb9N%"$i(h"+S
%Wg5AcIIHor*KbsFUSg/,8t@n\(DQ"[].W,IKro%igZR9WVWbZ;10LD^65`YR.1CBWLV78`Fj;(`_g.OZ3R>!<pRSAYQa4p0rlICf
%=b_=1KW`q2eaHF4.MOnhJf#k*4B7n:g#Lr[ELt,W,E1VRF^g;YT?8POHB&;oJsYQ69huh,Ib]3,p;29lYKt&H[u&j?D+,.-G;7H-
%<M8)s'tKYG;-nQZC'eC(n%8:@Eer4,-GNUEPLGE$N:$H%_8#RU@B#6Q8^Ac>U?F5p.5C_r'Mpu&`U8FKQkpjD>/iP%.8O3M*09:e
%-`-PJoaB8/nE:/)a5.;s+t>HR3Jg!J'L>4tQ[5ZNo"\0W+K);so$Sa]9.1%Nja-:'?4k:41ZZ,b/k"dkDnTJ>X2G>)8oi72&6CD,
%ELie.[r0eAb15m!aeE#BDda>TWgYQk2nKbCk)c[m\>1&\Y5D=4/eBChMo_G,+deB?<%_<4(qHjkB"e,UKLOjkWhGW)Gs'cj\]EQo
%rISp"M9EU:R>\t>iqdZ@K)fm^PSk:<)i7hI*l)dK]1#RRM/'?53uh%13USK*jlc:V[m1Q\J$1-bq1dqo/p"Q*`mCR"h5hU*cpW/M
%?au>Ij@e-q>&Bcd'oIuq]FZgbUpi(6H)c8/F@s0J(t"W/KjIl7;*:g]7Usd=`n\/9Ae38shXf2ma$HBlr"-/OD:nU\</4K,o+P9-
%<1t^%+pE<CTGUPZ.4i=ahG]s^SUE-:!j1,f@8Eq!53XTag!7cIZfdh1Cf;',jJSKMRL2L96_n*c'i7)'`U8FK(r_]=ANY6%h`e65
%)p_=UN3lc;.Z]u3bF;C6ShRhDR1O2Ig@<38qo&""[M8O#]8UApAbZP+EmN8+Sbt+q+^29^G6\Je.lVX,)]q.#JoW)^[3Tdc(f.Z:
%/Ae@@17e28?<;#4kJle+@s-`?WtU5C4VNEdLZm9O#U%,cDTX/^aur\HGOkS"D7cM3Gs92'X_RKU=6F-qj-`daSM2Tg.MNi,G'a.F
%hmTQ8o*M17dLf3QX\K_PPH&1VH!T&ioRat\%Me,)G!$*n2MN5@fb#[#<"9Wf$@<IV(r^j%'B@4'b)Q`hc@R&=$@DQ40W[qt'O_N7
%Jk6+[,:Yd/&Ou;dC)Iu:kKA,!p=h+Dk=^)uTqB3nq*Le8,8(uPU7R]*1UElDYn:ctGPQ9NC3f9jjZHP0X`eT]C.8TKiM:3+)p_UP
%+aUtBXakEsf'I!J@5ftM4,U?(Gm]l2.8\`0Y\Q$u(_6:>-cX0t2*3#KAh@FM#?L2/<!b?:9.CWa&'n1Y[#[LEQNauXUP7ZG;RMH2
%cS+Ba)R\bWX7H,unU)7U3hf*C4\ln)-P_MuW1M>pnU/N[II_SLW[>o@3^/,ua7?Tf-c6=:LgFp8hMK,=$BF'Ga52?A.(G(6Yk65W
%U`JUUg4ptFE(Z]8i5t?nNX.U^#9:2\Gds:u]M0ji!E[YUQGt@IdU%Gs':'cWYrjVram-cdbMT@MgPF\@=&r,OGb8SjSgh(t$,aZV
%''0t8[ecBJ=Y,igVs?=fF`39"gfWBbW15t%i5t6cY%"@g4QSui49`ctJE((R71!p$$C7hTR'a=B>W].m;7YjM!M6Bqi$'(!ScTnp
%$$c6/0K`#Y;#h,hJu*5iPOoXKdX`^#b/r*6[T:^YGjaimAr\t:Nqt[,\BAd(dP79T8nIZ$Et:bj'H=<cH?W*(=o5&\RXWW0Jl$3g
%'8EtfeM=RN=8!3=?u,u\k,[.jU;?7U%X&Ota6aQlNDlLW^L5YOZnUk6WD8DSi@B(>f\K]Hmf$..>T.&=j@FtKlsY,GQJO>EBsD'4
%::)\p:9'WMjSA/I]fCDb:HMZ:4aQ#V7<RFZSi<M>4CL4><%'Y6jnYE)hm,LFXlZ&"1864_k9GrF8_#Sf4>6%EHGSQcLC2?X4._3J
%LVo.Hm"c?L.YilnKfobfN8d"NM=KYPAOhCocbke+KfqOo(_.o.MQhk,_5%-i&XAp(#buWB[>ZKZO6*0+mJ5_0bh&oYqf9BF37*oD
%o7UOa;PDa![HGU$XOjJ#k59)YWlkmKp,lbMA>rbPPNRW_6n^O$j\Xo$A]LaR@qO@jP[-[-=PBZ<BpZZ=c"LNP<)T8(:S(X27+ea[
%lo7ho_l/5sAl><.]8BXn[#[LEQNauXUP0#:V.pn8/DHC2OjTG8!TRp=QjM0c7V:b,m)AMJB9t9LS@[b&(^S0mY<D<h>,'%(\utoY
%R6n.ZNu'#&DateFRn:"p\)U%G$u!ND;Q,jL'W$/R';:Ucjk^.u3?mN_)V..?0'$LlD-1QFBh4HDobs.OQ?TUa7PmQ\6_n*f!QBl;
%:18fQ4K2LRBA^l-pR3+bK%")HDH*P\X\J-4Yg;FcR1_EE48)5q'P0e1?r@$ELrrJ$KMak2>/kN/C'6WQS0)21[M&2&7.]E$Xju1h
%i+r=L6hXl"+-j&'=Gc+ej8*G@ZB7Y,%*+JX'H>?r55K=[k'Z-4A6S=]6nt8^DYS[\_Pl6gSH-Rs>Q1pU%?:^=^,_G8`;'DB0;U,m
%PeXnD+,ZDXr,b<@)7j`O;Zo3NW[/<HN2PT572V;RWWa*GO8b[W^_&#?/^FY4VPQBr]E4_S(omk;SGDFhab->GLf@"oL_rq(WJWAZ
%-WLP!Z?j5:Y$K`n@X^`,^8]ZS%=RjBbJS\(e7SHZYd()5`C?rbT&*P8M__)Hk,E'tGo@U)H][0M4=@q.eJ0&9E(gEph@oC_-t1b1
%[\5,OY+cX^I8cN/\H%s+/4"ktH!8"IeJ0'dC,$GkGYc/\-t1bq<%&)+U(o5-;jaAk!1+0H6%WTl>/8/Ca$!o/<7oqpm(-2uIb`cQ
%\E08C%n3TA@IE)FV91Ne>5bsTm?kYjWEk\t?0Af0%])'F@2/10:5k1eCN^;Lh/"D(rcM^^GDf(\fsoap.'SIt_9t:I-2eSFdY8N,
%nYBn;)oL:o,$MhF/:fSVea2Er#r<r%.T(d<Ob0ER$qa\SfVK65N8dFZ17gV#hFeC@gCti,f<sA`nl,?d<@i&\D0ZX"03b:bCqSKl
%ktPoAf,BM:;k3_Na"p-n04@gtR8/,W^FM7;F(9F(Z+Ft1h$M!>Ym!i5mL['8&copqb"Z#l;7U=Sq+b6tDFCZDWrn%*PoHb;L5.o*
%JoW)^[3Pg0nW]NK#buFdeFFLOSDN#p>r1@]>.&GNIXGK'jYmEfo@r3[m?41Lg[%6F\.OrEdAnQ*5`@)G;3lu+jd,/LkM29WJZ.Qt
%FRJ\1NJa80]<.?+cbiaE5*%^jB*WZ""G%'19=6U\0U<o077:"ZVeO8CGV,NieAR/LC4;%X=4&RJo6Ecrj$ql@Q66"6b1[\a66gfa
%F56'8J/D(e.>ol0pIm02EA)#\SD2=!dAgJ5HPCQ%mFQX<Ra.M6\F[7bD>m4)k=/9c7'DnE!&:'a7p-lKQ!:+!T6!eB2`n2P2kkAS
%f4A1)d,QnB00n(?8aFNO(PqAD,!utd#^2#1/;`<TiKTe*Ln\c_eC'o=ZQTdkN6Q[7H>_'tl=/l=Y5=U\#I2(3;D2^:YuH"K:i+'r
%72o0(Djr@nA%=g'$s81/6*m5_h".$9:CEVC,6I<!LBGLF,M^!I&]@jA*Yb:XO_QJ1j"QiSHUSuCbp7#N:+MbW,>p",#<47hb03IG
%(lK-.:m;l\K'0YiEFE<AiMJ.:U2oh3J>X\f^dIa/A+>)*2+GDbM?m_"!ZXYF&Lj)HcGY56*bAJN<:5$,J>Y8!_%?]\rGWr])<$U`
%La\Q>18+ttLt#'I8+Q0QS"`$"\k1B1[>S4;g2jt0VHVL?o;BWF,Z]tC9aCF5a'$-r\5Fnn&a$,/WC!j%X$nUsqj^H:l2%n0G>?Rt
%FKr#+<NBsC;kfH?`7V5.'g!W+[Yhl=;PWHa*(>rB=HNhW^f@aV=Wi\o<me^C[FV(*`U^BXmF#$4,>tYI+[P0>9ni!#;2"b6'rb"D
%>XU)E<_7q,`AGqQc*]5KZ;`Dc]=KG<LgDdY83lu[;mH4_'Oe^l"ZqUIMeE:;6>99%T#.YRD@'79P3U!</oVOe,4*%0!9FTKU9c=<
%Pcn>S#t<3@[!H;c1o=APK3Zu5M\7)Se.Oh<=rp:<P9WuoEnu`pBElp`Sp4A4+/`YM0_m&XV*\%$&ZoG:'i7)'`U8FKQk3E#Q;JVd
%m,biD>JJ5Xgr8jK=>CY!<Ci&<;Z'U4A;WH4hq9BO[VJt@_DA03$tuh#EOd]s]sfGYeuSPsCq!=9mG,Z>L<O%+[-'ERL"#pID4*gL
%k0\*@jtt2)lZ$DBAR>9JUBo$bU/),u$IBqg_3W6*(b_g:b!IMG,V<<3g_MK<(=>b!(Uss-ilpX(`P.]OeG4QI>8<It-VIN<M\=Nq
%'MKuD@_AA2-ju_bP-f<YIh0Tk<GQsUq./Bap?kj2o:UgoV6W$Wpsq6T;T>cn4^Q0WSM/\Ej]%jqe"P8$pTUUO1UVTXM[ME]fON]_
%Y5j::"?UEk(tKuJ8oTP4e^>s;,V9bhdWlTtmA+J&:G*H&1oeMj&7IU'a-hV>?;dI&3#^=>],6ZP<Ida6=W"Q1WZc2<^=jU4/#TTH
%TdQ<^jK!]k0!)P%p['YJ7(J)p'T*?%>M\bbNRbZ$14+"e&Se(F:q56.SFB^W=4i=:O)cVV!smp92ZAXhpMcop&alm7'Ppfo-Cc^H
%(u9g`20iB@f'!i.,1X9"K#ipQJ\+,kbWQrF:_XnM;_V6r-Cc^H(u9g`20iB@PL5`(0:;IQk]=HrI8Zj'a3%0B4BF#-'8<PO;^aP3
%Ab<@GqJMiVg+qb-%,+g=;H]Qp.,?\M#Z"c.E^\!h\:J's$Ejh_Gb$OY9e$iC%oE\2D%'%J/(g[)/WA[\eM<`_Y3^rYN89'%m`LRG
%$,bPo6;_no$C8sl-u#nnQThc1MC2EIG]N^aY)'8%T0Ek==*8o)=\h8_"&5a7:D?k'9VIDMQX>U(Ue?'gLrXAI[)(n-=kZ#0@7lt%
%hT>2CN<hGFEhG+Y@#%5Y_oJQ>&T/=4R*I-SdU.Mt(R?2[YrjVram0:o8@;P,,+PRh(mH^J9I^_[(XWSU[OFnu>_#HTQ6=#K4>!4u
%$0RcYq-J1)arD#\Mq@M?K7*:8j1BSa'u?,>8:4p`_r=;uSgkEnnTZ4OhkMu*fb^i'6rRFl>eg2%(r^j%';Mo*m/U]fKUqQL^s:OD
%KK[&W5T!jEONhHrY_PccU]QDcQ(>btUNf\EN6]^-"I'phK))PM:jaQTg%jb3@=5V:<%,nL8AV)'M@l,E_?co];RMIckOSp7q)Xha
%oD'&pXnoV)^6dS.l8RL'WB<rnAgUM+]0&IscZeX0qc%jTZ\Rs^Qgq-aD+4oNiL]>QfQt8@7tf^#($t?RA]L_]`\Fu>7T4t'4AWfA
%4pE<=(@9J.(5B^ueM=S)YLjF9fW>lbm_F_9N>c5Ck"(3#m!,+RV0rbE\h)L1)(c8PPH&1VH%%Ai'n+hmrM!Zabh'TL:FlptRo3JI
%_nt>t8VLZeb459^8GOinp.i/ZWOCI?q`!n1$_qacFQ,CX?+EBTgt3Wbln7(%GJZ%XCdA366hG,iD[]1j/%DD`/W@h8;p0CU\oN^2
%Wl=6'@<L\Ol@`S^cQkhr,C6cG1Bo,,(#75g(.RDWWT?5;HoSj>;VSk!DT;uC@An:D3T^G&n=;#9cTNg!m&<<#"4fY38#/L9rmQnl
%f6sb?lVM>k'1VA\W[0bF?,4hfa&.@s495tB&ge\kZ40M7nBe+7>/lAoZN=AMd))`P<"7g.klQl7[9*b[S>Y9^PV>3n.MMnRUKZn"
%,EgUbE9TUqUNTNmKWWeVrAkB\o0rV#].V.eVg'])krio&N:T`ASF/[FQoq(pE4+.Vmgu#Gq=_\iVUSB0_GB=[/j*2;[T9TI&HR)O
%!R<jE!uue'`&g]HJ>NVI,bHqt[5]0NS?Cd0]o/I=?^%JnCoq#p,>tam$79tgK"F5REXPAY'EuPA?$(l_*?q#Vi&I8]HqgUVn7;3g
%Csq&&q4Y])AbCG5]H4;H:g;b-_UtG-'H=3\HN*DIYDuqL:N5pMT!bs9V6YE#;7WSc!M6Bqi.unnFU+8fh`H'bh1IDiCd:o%I$0O/
%X]fEW,EgUbE+qQFUN08?J1%BJ3$JN9F_ASV!fkeo#\0&'7DTS8<gq$aUpU8/)UQ@"S5_)uam*BH?[6M]iB$=jdsJ\IH<ALXg?Tdq
%0"+FsfQagU8*^b$)V\`L>)-![I0rJqj//mQ:/4l.7-DQfE6AnCi!tAPL5BCJRNUB8Q>37/$qNE0\>B5h88q1uQLA@+j[SlWE>1YT
%:V$!C@<gE\+XjgUhBB7b!D-c)\$Vc]#u8Ulo"ApY&X&IVIAq,rZK<ga<&_cfqkPZj2*>d.iQ>rL5tH\)SNe<`.(e<gL>.?&f6&+7
%>N5;:''/>4,_ts%\ig=-g^Jj82;d`^jrcsl;CRkmE.Gic3\"mZT1;`T4[4O%'W:*5+I"AM(b%Fj.h\fRN[5I\D*U3`_roNub7('[
%af,0M=@)>`kYQ$^j:PgL[uX'+b0Kqcm?SlZ.X)[`*4ZAI:s6OE/;tNuOK.G)3IE7t&ChhobCc\1j)]JYMg0X3fdu-&_Jh?2:_l6m
%&i&;/@F:S&j@9UGdo^hETi<Y*0T%5XbBWTgY_VEGLXR7nS?D3<*Hlf>4,U<g;QquPJ^WD,?!G[m.,Imn(f,$NG!t!Q47)`JfYd02
%iGMPe#^_@A/?NDYdUBsENG)`7:TB`N2"+rRVG)'KYI"gDf;Vs4L23ER!$\aW8j2Va(),u46Eq-gH(V6LINhm*Tl+2&g1c=?cT>PL
%n#9'@Vg2?e7+g2*YVQ[(*g9#0'1s_g@1SKP`BjbT:()5"UkMZ.WEMc(hu&n>Z,2E0bAr'_fN.CkQKu!(c$jM:i]3nPQCiA%V\6sM
%GaDlBp-c0-qfpWumq"qTQQE,@5!*rRqL!3ah60i,;<leVC$Q;8(X#FcG#Lc!+2M1MrmF*B^\p'*;4Q@:.+Jtk:5gRM;-&?ql(4p:
%43b19Dhor:bVfhFZ`WO4ZV;9X9.CW]h[iqT`&P2EM8*MJ',t*l`KR<54O&,TMeE:;S/[^:\["$SYVX2$UF82J"cId=W6/\s?CB3X
%.,Ijm),Kk,lPh%+&t>5AMcnF"NQEB'#pg=DY&B+I8n&rJ\AW*d^54!bN8dFZ17mVkfL<0!Ab-h)b_!,V=g0]UYbNU.+pEmY%]INa
%c<_C:_C48=SJdt]5=KOp(:d7XNLS'BA7U[`8(RPU2g5!Z]^>djR-V1^bG?V10+k!^Qon4s?Ll&2=Q@&q#d_Yu;[)@&gU6A1V*Ys>
%$=2,H?RLP1Y4FL;%J-)3^0N>jF*VGaU_:Y7?&D6;;8DsO'sj5A@:"8UWqk@oetpVK<]4QYQ&V2lPtbkZ0]nX".'_'RaDrQ'YpE&U
%'e>bUd)*G=1,XT[fiE&[b%8:Q@_S+tq'M'R,o)<#,>t^Ia,n5J5qYX60T%5XbLk+N/o.VpWj-8@eX1nieRYB[@kpW0&o3G^/4F"i
%>HYnUZ)WWu/^.uX;Zh95Es5(0>W+0)b^bj4;1pZlUd@q!7-YNa(m;B[aMj)R7e*9h)/VT%*=i1YdlQ5emQM`P<ZVu?9`@0%2<W)n
%bBurS4.&'^]LSFgfq]4FT3o0GRL-q;4C75\55B7^Ne(/$al>(HrVLgScX-8]Y<11>G_SBEB-U/MN?+`04!0Md*#'ecNUd$cmHRmA
%aGoDq@K+/m);#DOl]t^P[ur,ZfmmL=Q]NM_Vd\Sq3%"6*`oBekn"Wc\SLSd:I^fLrj#sOtS^[=4[JEg9X1L%=3/#\rN[]>25eLt<
%NNf:3-6:G>#;$AdF6)!\<8k4.nOBrP&5<tK_s5b480>WQ8("j^C0kNp7dDj+_5@@o6j#9ORL4@_5VH;T+c(DJQ;QA]i3\M)J!8E6
%q3^JO]YS:oG$=kL"rCZ(320enA-*qW%L2CfX3\a&]W]-m<]?ZOK>fDLe<+IGE9D5=gd't:*eu(ege3FC&I(`m3Y3qb+:'2,6t&K]
%h2#d4Ok3PoN>n@6jT7_,Cp&B6k"`D=*+:NY;?:dK%0Th0Jfp$9Fb:OJKK9a*l?5p@LW;/')lL0?BVoiAZP5"(9';TrScGP7&HrOe
%'+c%#F?1G'90<VOdq5+[Bm!g*3hek[RC3HH:3Xhi<5)rmBS,]cFP%78YV;jTn^7GiYU^V(j_>1WI0jq]Ok3PoN>ndBjT7_,%&JR"
%G>>X#'4J+!;?:dK%0Tg81a:#kQK`Q=-t,F_M+2W^3A.rQ1d0HZo$$cD?p"53)tl"pqM;G[6`#!a@a)L)1_=+.drCrL&=/bp(S=8"
%),E0V=Dc)#HD/FNcu\Z<<WU$UMY-;#Q%^Z.9=5K__WU/CVmqc(%0YL5/H')7VJ&,qqQdgAD[5\c"Wu<&$lSa^&2.<T,HRk<P`@_:
%=(2F;H)0/.<:+P^>0F5!%T!JXnQ>#`pElm`+dP6*TBVh$WVS=F;U(R9Lslj\#\tn'V'C<R+D,%ShGS2JmL3H_+j1d$#3NA7kW!"*
%:V<<ji<:).O"g5c1+=@+H,DSBQFn8n_C9J'?6uJrmKdi:,gTNIcL"B7J`$mE6Oqo><Q"20K=?sMLtD#Z+m]Pk27`:0E*%]UaNNO)
%4+TJoHf4siX]\pERFRjIZT>s2Cnq-lKR6N$];f:6Y-q<>Y<WS<E[8t3TF*?b6J*\++P;uiS?i/DkOq\ohYcASC8\XOfKXF-]eL65
%0AM+F(o^IJ#'@^J97r`Sag2^1_S^E<;s*8Qoa1QtV!%#QBNqBgmo]6Qmg5EE*"=&4+k&P.pb5mf,l(+DcmRrr3;;V$?)#8uhRi:j
%T$V\g&-h9cBrb#K)pN-oM4W2`_9TIi@1's]U1mRY)r3@*>(+o;+*KQq%PZQ9Q)s,!*/s#Z)^u4PhNDQM:/rZihV"rQ+KKCdU[1Fi
%8/Hd(-oqQY3j8Ca5^,I/QcK2(D4m%\,3Zjf?FI.+'R4DfXh(XTgDTiS?h,1!^9"I!g@47%L;_O2R->;&9Q"9R?V:Pj7N>\t20l#>
%L3e])Bj+kE;-1!peL+dE2,\9KDLLr\)lSGK.2/Q/)mkMh/P7U2dXcZ-E'!btabV3D=A\GOO2K2pRVA[=lh*P(5U[FQ5n_E)Ku9Z$
%VDbkV5b)k948?Cu&P]F@9Y(t46m[1]5r*9lmegDfZ4!G`l-f!a^"qrDDk+Ms"W?]f0UNfYJ.u;d_-qGJR+;B4Keim9qUsJ%7g?G,
%(q:g@7cDYZ-JU:dCL2c?Ghia/Y9OD"L2J,/2_^?$U(KPkZln+)+GUhUc*Z$1F1RPE%'nFIWlL(d<1D8I#$W;c&<grJaL[NH6*@Le
%\(.*=JN5K&o^-Hi.AjE@GoLS&_>?>7=*bt>fhRXVk6Q]mOU?o'3#]K$VU54E/ereF,RfqaaCo[KJNQhI2=@"&Zl>rsbu>5Xms4<c
%:di.<O:K3%#7/&4$'I!6;f8s!bc#<SS\grN]lJX"Y-q5"Aj.Tt4Gkif(n#n6jT^;i;F(sco[9!@U-K`e[L2E_/EfIG\_o52^n]I[
%.l6"fPl"ecD?QLkPr[*Da;NPIit0djPELMnjcD[!CrdaT`\3Up3#197VmiL=6q-1tN/:])E48L[JTboHf/[`%4&G-Q3qpa&;VT6#
%/%k9)Bc<^X3Z"B9-ARt-"c][^1.<tVTNc,5PZ"ta>D9)i2@hEKUYLF;QS&?@a_RX:"T$>'UbBcUo+4s`CtMWG`2"nsKJf$OdLc`O
%9$G/:]VX=s<:.p`F5]&r,JR(@Yh2^&9C>iE0C;[5XmG(s`X>1?RqDuS7?UVkEN'B*!Td4:@-tG#[pWL=G%sfkb.7TWO\6e5$XqtR
%<#^N@S??GFMQUr&=ZA)@:\&qcY"7@)6AcrO>']g@U13.=&".t;GZ(Vp&_T`j6=-<;bI[K-"Hhs^<X8eKAD66'YK+?s*l2j<l?*-^
%^?Schf446@7jLBG=h>F=7E:FEA*Z6G+4a&c?QdidqYr=>?:L&MQ4mUnOX,c*flLX0+sn*u#Qnj6[$A(:kVd8[UiS-Rk;j]kIdX(M
%f$=q_mYt12Ct`Kg::C(_JL>"-!.npS5L)fe;FdT]hQE>0e\Js8boD&:R=!Itk(l@i7OB6Q2)&ulLBWfM#7hL8%P\S"k/apW[qk)#
%2DC4]-\igdEj$FQ*+A'c8-Qrr"pVO(Qlq:ATu2Pq,E.;,4&To0DGBPrCVY%PAT#qAR$l5of?B]iK7B!jLmtObW08c*V%YR&d7r5O
%(rDM!12R0^I-u[j"C5+:P14__3:)JM=;[HVGi8Wg(TF&u#P>Sn$W3RW9O!34X*`q._&&\p-<SSeLI2XX(F'Y+0-)/@,8EUT7'@WL
%&-h\r[FN@PJ+r3e`H6@tJc>T?Y8@-a<1RW(m8uR'C1%=[7c;fc^Y.'E3I_4^c*)@i;V*Qh`-_oI]4"V=a*b!`/:/qqaW'&8RR:X3
%Ped%$ar5QmhiMDto2tf?,mNT7'r<'>T,k8fNqFPN1YV)mDSZ6#HX:VMcP,27P[2=7s"Wk805A+[YP>U%KmsX(GG5n7.!6XIpB*s!
%fQ6>G4BQ+.O[:-M&%i_=.b-;^T=uOE,g'pPV$J`go9A7!3iB\_#9d%#98;Xm/!S#.`ARshZHErBFck03?L(U,orLLG\[d%K%d=%+
%3rrno>]Fg9o9?rj#!.[5foF__MkI6&/RY]dD#4hl^,8WgBG+..`;M/\F"g"*j>tHcn.O<$JKfG]M1L`399kk](7\uZ0@;E:*t9?g
%0.9+W.!3AB&ALj<MYaq<=iN#cWW*bJ<G>gG\^9TV4[WZ"]VKZU$U$foNmg&Z3mO"hVhq=-"D%?--%U--UtjC%HZrWWQqG7tqU@GI
%o+Ye(Uer^T#sPFjDQHa6oN4b%Gr=i:;aXl493jOq9uRK9Cic2Xf%+tP,R%?.3n?<,0CI"c&==\4`ObX2nI'b,AO,n`*lAaVnQb90
%KSAf^jc"4cqXUZYmL'qQJ(hL6VCD-/Iu,[W7nnPY<I_(VaBLj\XPCTJN4otQc8Ra`+mS\ujN<5AGM.,be6)q&_oc%SUHaC\GKq2]
%p%45u<Od`C0+'=RJ0D/#!(+b3,Fc>1W^PmMFl@@4r2!H2g2G%QXIXNk"'PosBslhaL/:0H&#E0Z0O!B]F1INl*RO6sE/ViJ@9hr_
%G>QG=&#"(0""s3Ke`mb@90+W2`d?W;M4Kjm+J+rMRs-IUWYS\d0<-(/jWe^'rC9r$ehC:?,I1t!j=gY2pb``PimO/9G2pure)nN-
%<f4>_H9YXG&lT*;`38oXc#nM]rUSLfo:OpTI=D4kE:`_tn-?h-_ojtLc\Lsq]a<0HmGn/#a%m5TLQDJHq/ACM5Mi!G5Q%+ir^_ND
%]P+FB*kqONnE]!/hkri2+l$D:.#M;:J"f0Acr_,IVmXm;B/Z*bl'^pm[QLn4n>9j*(uFbP-GqmjC,<6]R>j]0dC.RZR9d.-"74_N
%_riirp;L/d7jstVFD/khg(&%H<o`-ZI89+eI<86UOe:s0p9Ut&r]<@BIp14\oe5qBg<as:M&Xia#`!oY?UO9R_=af(V8$C9WTAEu
%-=?fJE-la!q=O<s%h6&Hq<$MtDbi=\mnQXp0A_,iq<`:6H$FR]^3MnjB`E1!pN69,r:kAK"<[Y2#]55(?JRgEo5srnmdAQEkGOdb
%GMP_J]R2n+h7nGQ.1YfAc\Ku!:N&+tah3'%n?.JIh[4`/Gk_"*k.V;V,0RG>h\*,2"l,Yt45IlZo=DU4nYa-,]_ES\ZtB[~>
%AI9_PrivateDataEnd
